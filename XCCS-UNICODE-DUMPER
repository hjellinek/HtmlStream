(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)

(FILECREATED " 4-Jan-2025 11:06:41" {DSK}<Users>hjellinek>Projects>TrySVG>Lisp>XCCS-UNICODE-DUMPER.;5 8941   

      :CHANGES-TO (FNS PROCESS-BROWSER-FONT-METRICS)
                  (VARS XCCS-UNICODE-DUMPERCOMS)
                  (FUNCTIONS DUMP-XCCS-UNICODE-MAPPING)

      :PREVIOUS-DATE " 6-Dec-2024 16:24:57" 
{DSK}<Users>hjellinek>Projects>TrySVG>Lisp>XCCS-UNICODE-DUMPER.;1)


(PRETTYCOMPRINT XCCS-UNICODE-DUMPERCOMS)

(RPAQQ XCCS-UNICODE-DUMPERCOMS ((FILES HTMLSTREAM)
                                
                                (* ;; "Call (CREATE-ALL-FONT-METRICS :data-dir %"xx%" :output-dir %"yy%") to build all font descriptor files")

                                (FUNCTIONS CREATE-ALL-FONT-METRICS)
                                (FNS PROCESS-BROWSER-FONT-METRICS)
                                (FUNCTIONS WRITE-FONT-METRICS-FILE WRITE-CHARSET-METRICS-FILE)
                                (RECORDS WEB-FONT-DESCR WEB-FONT-FACE)))

(FILESLOAD HTMLSTREAM)



(* ;; 
"Call (CREATE-ALL-FONT-METRICS :data-dir %"xx%" :output-dir %"yy%") to build all font descriptor files"
)


(CL:DEFUN CREATE-ALL-FONT-METRICS (&KEY (DATA-DIR *WEB-FONT-DIRECTORY*)
                                        (DATA-FILE-NAME *DEFAULT-WEB-FONT-METRICS-FILE-NAME*)
                                        (OUTPUT-DIR *WEB-FONT-DIRECTORY*))
   "Process all Web fonts and create metrics files"
   (LET* [(METRICS-DATA-FILE (APPLY #'PACKFILENAME.STRING (APPEND (UNPACKFILENAME.STRING DATA-DIR)
                                                                 (LIST 'NAME DATA-FILE-NAME]
         (CL:FORMAT T "Will read from ~A and write to ~A~%%" METRICS-DATA-FILE OUTPUT-DIR)
         (PROCESS-BROWSER-FONT-METRICS METRICS-DATA-FILE OUTPUT-DIR)))
(DEFINEQ

(PROCESS-BROWSER-FONT-METRICS
  [LAMBDA (METRICS-DATA-FILE-NAME OUTPUT-DIR)

    (* ;; 
  "Read a series of font metrics from the metrics file and translate them into individual .wfm files")

    (* ;; "The file name looks like <family>-<size>-<weight>-<slope>-<expansion>.wfm")

    (* ;; "For example, NOTO-SANS-MONO-40-MEDIUM-REGULAR-REGULAR.wfm")

    (CL:WITH-OPEN-STREAM [IN (OPENSTREAM METRICS-DATA-FILE-NAME 'INPUT NIL '((FORMAT :THROUGH]

           (* ;; "read and check the version, then read the TOC")

           (LET ((VERSION (CHECK-BROWSER-METRICS-FORMAT (READ IN)))
                 (TOC (READ IN)))
                (while (SKIPSEPRS IN)
                   do (LET* ((FONT-MEASUREMENT (READ IN))
                             (FONT-FAMILY (fetch (WEB-FONT-METRICS family) of FONT-MEASUREMENT))
                             (FONT-SIZE (fetch (WEB-FONT-METRICS size) of FONT-MEASUREMENT))
                             (FONT-WEIGHT (fetch (WEB-FONT-METRICS weight) of FONT-MEASUREMENT))
                             (FONT-STYLE (fetch (WEB-FONT-METRICS style) of FONT-MEASUREMENT))
                             (CHARSETS (fetch (WEB-FONT-METRICS charsets) of FONT-MEASUREMENT))
                             (LINE-HEIGHT (COMPUTE-LINE-HEIGHT CHARSETS))
                             (MAX-ASCENT (COMPUTE-MAX-ASCENT CHARSETS))
                             (MAX-DESCENT (COMPUTE-MAX-DESCENT CHARSETS))
                             (FONT-LISP-NAME (MKATOM (fetch (WEB-FONT-METRICS lispName) of 
                                                                                     FONT-MEASUREMENT
                                                            )))
                             (FONT-LISP-FACE (MAPCAR (fetch (WEB-FONT-METRICS lispFace) of 
                                                                                     FONT-MEASUREMENT
                                                            )
                                                    #'MKATOM))
                             (FONT-LISP-SIZE (fetch (WEB-FONT-METRICS lispSize) of FONT-MEASUREMENT))
                             )
                            (CL:FORMAT T 
                                "Font ~s, ~A ~A ~A: height ~d, ascent ~d, descent ~d, ~d charsets~%%"
                                   FONT-FAMILY FONT-SIZE FONT-WEIGHT FONT-STYLE (CP-TO-P LINE-HEIGHT)
                                   (CP-TO-P MAX-ASCENT)
                                   (CP-TO-P MAX-DESCENT)
                                   (LENGTH CHARSETS))

                            (* ;; "write a wfm file to describe the font itself")

                            (WRITE-FONT-METRICS-FILE OUTPUT-DIR FONT-LISP-NAME FONT-LISP-FACE 
                                   FONT-LISP-SIZE LINE-HEIGHT CHARSETS MAX-ASCENT MAX-DESCENT)
                            (for CHARSET in CHARSETS do 
                                                        (* ;; 
                                          "write each charset's metrics as a set of standalone files")

                                                        (WRITE-CHARSET-METRICS-FILE OUTPUT-DIR 
                                                               FONT-LISP-NAME FONT-LISP-SIZE 
                                                               FONT-LISP-FACE CHARSET])
)

(CL:DEFUN WRITE-FONT-METRICS-FILE (OUTPUT-DIR FAMILY FACE SIZE HEIGHT CHARSETS MAX-ASCENT MAX-DESCENT
                                         )
   "Write a description of the font"

   (* ;; "The file name looks like <family>-<size>-<weight>-<slope>-<expansion>.wfm")

   (* ;; "For example, ROBOTO-MONO-10-MEDIUM-REGULAR-REGULAR.wfm")

   [LET* [(WEIGHT (fetch (WEB-FONT-FACE weight) of FACE))
          (SLOPE (fetch (WEB-FONT-FACE slope) of FACE))
          (EXPANSION (fetch (WEB-FONT-FACE expansion) of FACE))
          (FILE-NAME (APPLY #'PACKFILENAME.STRING (APPEND (UNPACKFILENAME.STRING OUTPUT-DIR)
                                                         (LIST 'NAME (MAKE-FONT-METRICS-FILE-NAME
                                                                      FAMILY SIZE WEIGHT SLOPE 
                                                                      EXPANSION]
         (CL:WITH-OPEN-STREAM (OUT (OPENSTREAM FILE-NAME 'OUTPUT 'NEW))
                (PRINT (LIST 'format *BROWSER-FONT-FILE-VERSION*)
                       OUT)
                (PRINT (create WEB-FONT-DESCR
                              name _ FAMILY
                              face _ FACE
                              size _ SIZE
                              height _ HEIGHT
                              maxAscent _ MAX-ASCENT
                              maxDescent _ MAX-DESCENT
                              charsets _ (for CHARSET in CHARSETS collect (fetch (WEB-CHARSET-METRICS
                                                                                  charset)
                                                                             of CHARSET)))
                       OUT)
                (AND NIL (CL:FORMAT T "Wrote font file ~A~%%" FILE-NAME])

(CL:DEFUN WRITE-CHARSET-METRICS-FILE (OUTPUT-DIR FAMILY SIZE FACE CHARSET)
   "Write a file containing a charset's metrics"

   (* ;; "The file name looks like <family>-<size>-<weight>-<slope>-<expansion>-<charset>.wcm")

   (* ;; "For example, ROBOTO-MONO-10-REGULAR-REGULAR-REGULAR-0.wcm")

   [LET* [(WEIGHT (fetch (WEB-FONT-FACE weight) of FACE))
          (SLOPE (fetch (WEB-FONT-FACE slope) of FACE))
          (EXPANSION (fetch (WEB-FONT-FACE expansion) of FACE))
          (CHARSET-NUM (fetch (WEB-CHARSET-METRICS charset) of CHARSET))
          (HEIGHT (fetch (WEB-CHARSET-METRICS height) of CHARSET))
          (MAX-ASCENT (fetch (WEB-CHARSET-METRICS maxAscent) of CHARSET))
          (MAX-DESCENT (fetch (WEB-CHARSET-METRICS maxDescent) of CHARSET))
          (WIDTHS (fetch (WEB-CHARSET-METRICS xccsWidths) of CHARSET))
          (FILE-NAME (APPLY #'PACKFILENAME.STRING (APPEND (UNPACKFILENAME.STRING OUTPUT-DIR)
                                                         (LIST 'NAME
                                                               (MAKE-CHARSET-METRICS-FILE-NAME FAMILY
                                                                      SIZE WEIGHT SLOPE EXPANSION 
                                                                      CHARSET-NUM]
         (CL:WITH-OPEN-STREAM (OUT (OPENSTREAM FILE-NAME 'OUTPUT 'NEW))
                (PRINT (LIST 'format *BROWSER-FONT-FILE-VERSION*)
                       OUT)
                (PRINT CHARSET OUT)
                (AND NIL (CL:FORMAT T "Wrote charset ~A~%%" FILE-NAME])
(DECLARE%: EVAL@COMPILE

(PROPRECORD WEB-FONT-DESCR (name face size height maxAscent maxDescent charsets))

(RECORD WEB-FONT-FACE (weight slope expansion))
)
(DECLARE%: DONTCOPY
  (FILEMAP (NIL (1190 1844 (CREATE-ALL-FONT-METRICS 1190 . 1844)) (1845 5298 (
PROCESS-BROWSER-FONT-METRICS 1855 . 5296)) (5300 7123 (WRITE-FONT-METRICS-FILE 5300 . 7123)) (7125 
8752 (WRITE-CHARSET-METRICS-FILE 7125 . 8752)))))
STOP

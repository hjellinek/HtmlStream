(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)

(FILECREATED " 2-Oct-2024 14:27:42" {DSK}<Users>hjellinek>Projects>TrySVG>XCCS-UNICODE-DUMPER.;1 4753   

      :CHANGES-TO (FNS LOAD-BROWSER-FONT-METRICS)

      :PREVIOUS-DATE "27-Sep-2024 09:44:56" 
{DSK}<Users>hjellinek>Projects>TrySVG>Lisp>XCCS-UNICODE-DUMPER.;13)


(PRETTYCOMPRINT XCCS-UNICODE-DUMPERCOMS)

(RPAQQ XCCS-UNICODE-DUMPERCOMS ((FUNCTIONS DUMP-XCCS-UNICODE-MAPPING SKIP-32-NULL-WIDTHS)
                                (FNS LOAD-BROWSER-FONT-METRICS)
                                (VARIABLES *MIN-XCCS-CODE* *NUM-XCCS-WIDTHS*)))

(CL:DEFUN DUMP-XCCS-UNICODE-MAPPING ()                       (* ; "Edited  2-Sep-2024 16:23 by hdj")
                                                             (* ; "Edited 30-Aug-2024 12:24 by hdj")

   (* ;; "Dump the mapping from XCCS to Unicode character codes as JSON")
                                                             (* ; "Edited 29-Aug-2024 15:30 by hdj")
   (CL:WITH-OPEN-STREAM [OUT (OPENSTREAM "Unicode_to_XCCS.js" 'OUTPUT NIL '((FORMAT :THROUGH]
          (LINELENGTH T OUT)
          (CL:FORMAT OUT "// use a short temp variable name!~%%")
          (CL:FORMAT OUT "const t = [];~%%")
          (LET ((NUM-MAPPINGS 0)
                (MAX-XCCS 0))
               [for U from 32 to 65535 do (LET [(IN-XCCS (CONDITIONS:HANDLER-CASE (UTOXCODE U)
                                                                (INTERLISP-ERROR (E)
                                                                       NIL]
                                               (CL:IF IN-XCCS
                                                   (PROGN (CL:FORMAT OUT "t[~D]=~D;~%%" U IN-XCCS)
                                                          (CL:INCF NUM-MAPPINGS)
                                                          (SETQ MAX-XCCS (MAX MAX-XCCS IN-XCCS))))]
               (CL:FORMAT OUT "const xccs_to_unicode = t;~%%")
               (CL:FORMAT OUT "const max_xccs = ~d;~%%" MAX-XCCS)
               (CL:FORMAT OUT "const num_mappings = ~D;~%%" NUM-MAPPINGS))))

(CL:DEFUN SKIP-32-NULL-WIDTHS (LIST)                         (* ; "Edited  3-Sep-2024 12:49 by hdj")
   [CDDDDR (CDDDDR (CDDDDR (CDDDDR (CDDDDR (CDDDDR (CDDDDR (CDDDDR LIST])
(DEFINEQ

(LOAD-BROWSER-FONT-METRICS
  [LAMBDA (FILE-NAME)                                        (* ; "Edited  3-Sep-2024 12:56 by hdj")
    (CL:WITH-OPEN-STREAM
     [IN (OPENSTREAM FILE-NAME 'INPUT NIL '((FORMAT :THROUGH]
     (LET* ((METRICS (READ IN))
            (OBJECT-NAME (CAR METRICS))
            (USER-AGENT (CADDDR METRICS)))

           (* ;; "CAR = 'metrics.  CADR = list of plist of 'name 'height 'xccsWidths")

           (* ;; "xccsWidths is a list of character widths indexed by XCCS code")

           (COND
              ((NEQ 'metrics OBJECT-NAME)
               (ERROR "Expecting 'metrics'")))
           (CL:FORMAT T "Collected from ~s~%%" USER-AGENT)
           (for FONT-MEASUREMENT in (CADR METRICS)
              collect (LET [(FONT-NAME (LISTGET FONT-MEASUREMENT 'name))
                            (FONT-FAMILY (LISTGET FONT-MEASUREMENT 'family))
                            (FONT-SIZE (LISTGET FONT-MEASUREMENT 'size))
                            (LINE-HEIGHT (LISTGET FONT-MEASUREMENT 'height))
                            (CHAR-WIDTHS (LISTGET FONT-MEASUREMENT 'xccsWidths]
                           (CL:FORMAT T "Font ~s, ~A: height ~d, ~d widths~%%" FONT-FAMILY FONT-SIZE
                                  LINE-HEIGHT (LENGTH CHAR-WIDTHS))
                           (LET ((CODE-TO-WIDTH (ARRAY *NUM-XCCS-WIDTHS* 'FLOATP NIL 0)))
                                (for WIDTH in (SKIP-32-NULL-WIDTHS CHAR-WIDTHS) as XCCS-CODE
                                   from *MIN-XCCS-CODE*
                                   do (if WIDTH
                                          then (SETA CODE-TO-WIDTH (- XCCS-CODE *MIN-XCCS-CODE*)
                                                     WIDTH)))
                                (CL:FORMAT T "  Testing: Char width ' ' = ~d~%%"
                                       (ELT CODE-TO-WIDTH (- (CHARCODE " ")
                                                             *MIN-XCCS-CODE*)))
                                (CONS (CONS FONT-FAMILY FONT-SIZE)
                                      CODE-TO-WIDTH])
)

(CL:DEFCONSTANT *MIN-XCCS-CODE* 32
   "The minimum character code we'll store widths for")

(CL:DEFCONSTANT *NUM-XCCS-WIDTHS* (- 65536 *MIN-XCCS-CODE*)
                                  "Maximum number of widths in a font")
(DECLARE%: DONTCOPY
  (FILEMAP (NIL (632 2158 (DUMP-XCCS-UNICODE-MAPPING 632 . 2158)) (2160 2346 (SKIP-32-NULL-WIDTHS 2160
 . 2346)) (2347 4497 (LOAD-BROWSER-FONT-METRICS 2357 . 4495)))))
STOP

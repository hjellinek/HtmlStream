(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)

(FILECREATED "31-Oct-2024 13:56:16" {DSK}<Users>hjellinek>Projects>TrySVG>Lisp>XCCS-UNICODE-DUMPER.;23 7036   

      :CHANGES-TO (FNS LOAD-BROWSER-FONT-METRICS)

      :PREVIOUS-DATE "29-Oct-2024 15:43:23" 
{DSK}<Users>hjellinek>Projects>TrySVG>Lisp>XCCS-UNICODE-DUMPER.;20)


(PRETTYCOMPRINT XCCS-UNICODE-DUMPERCOMS)

(RPAQQ XCCS-UNICODE-DUMPERCOMS [(FUNCTIONS DUMP-XCCS-UNICODE-MAPPING \HTML.READ-METRICS)
                                (FNS LOAD-BROWSER-FONT-METRICS SKIP-32-NULL-VALUES)
                                (VARIABLES *MIN-XCCS-CODE* *NUM-XCCS-WIDTHS*)
                                (DECLARE%: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS
                                       (ADDVARS (NLAMA)
                                              (NLAML)
                                              (LAMA SKIP-32-NULL-VALUES])

(CL:DEFUN DUMP-XCCS-UNICODE-MAPPING ()                       (* ; "Edited  2-Sep-2024 16:23 by hdj")
                                                             (* ; "Edited 30-Aug-2024 12:24 by hdj")

   (* ;; "Dump the mapping from XCCS to Unicode character codes as JSON")
                                                             (* ; "Edited 29-Aug-2024 15:30 by hdj")
   (CL:WITH-OPEN-STREAM [OUT (OPENSTREAM "Unicode_to_XCCS.js" 'OUTPUT NIL '((FORMAT :THROUGH]
          (LINELENGTH T OUT)
          (CL:FORMAT OUT "// use a short temp variable name!~%%")
          (CL:FORMAT OUT "const t = [];~%%")
          (LET ((NUM-MAPPINGS 0)
                (MAX-XCCS 0))
               [for U from 32 to 65535 do (LET [(IN-XCCS (CONDITIONS:HANDLER-CASE (UTOXCODE U)
                                                                (INTERLISP-ERROR (E)
                                                                       NIL]
                                               (CL:IF IN-XCCS
                                                   (PROGN (CL:FORMAT OUT "t[~D]=~D;~%%" U IN-XCCS)
                                                          (CL:INCF NUM-MAPPINGS)
                                                          (SETQ MAX-XCCS (MAX MAX-XCCS IN-XCCS))))]
               (CL:FORMAT OUT "const xccs_to_unicode = t;~%%")
               (CL:FORMAT OUT "const max_xccs = ~d;~%%" MAX-XCCS)
               (CL:FORMAT OUT "const num_mappings = ~D;~%%" NUM-MAPPINGS))))

(CL:DEFUN \HTML.READ-METRICS (MEASUREMENTS LENGTH)
   "Copy a list of 16-bit measurements into a new ARRAYBLOCK"
   (LET ((RESULT (\ALLOCBLOCK LENGTH UNBOXEDBLOCK.GCT)))
        (for MEASUREMENT in (SKIP-32-NULL-VALUES MEASUREMENTS) as XCCS-CODE from *MIN-XCCS-CODE*
           do (if MEASUREMENT
                  then (\FSETWIDTH RESULT (- XCCS-CODE *MIN-XCCS-CODE*)
                              MEASUREMENT)))
        [if NIL
            then (CL:FORMAT T "  Testing: Char measurement ' ' = ~d~%%" (\FGETWIDTH
                                                                         RESULT
                                                                         (- (CHARCODE " ")
                                                                            *MIN-XCCS-CODE*]

        (* ;; "return the block")

        RESULT))
(DEFINEQ

(LOAD-BROWSER-FONT-METRICS
  [LAMBDA (FILE-NAME)                                        (* ; "Edited  3-Sep-2024 12:56 by hdj")

    (* ;; "Read a series of font metrics from the metrics file as ARRAYBLOCKs")

    (CL:WITH-OPEN-STREAM [IN (OPENSTREAM FILE-NAME 'INPUT NIL '((FORMAT :THROUGH]

           (* ;; "read and check the version, then read the TOC")

           (LET ((VERSION (CHECK-BROWSER-METRICS-FORMAT (READ IN)))
                 (TOC (READ IN)))
                (while (SKIPSEPRS IN)
                   collect (LET ((FONT-MEASUREMENT (READ IN)))

                                (* ;; 
                   "FONT-MEASUREMENT = plist of 'name 'height 'xccsWidths 'xccsAscents 'xccsDescents")

                                (* ;; "xccsWidths is a list of character widths indexed by XCCS code")

                                (* ;; 
                  "xccsAscents and xccsDescents are the ascender and descender heights from baseline")

                                (LET [(FONT-NAME (LISTGET FONT-MEASUREMENT 'name))
                                      (FONT-FAMILY (LISTGET FONT-MEASUREMENT 'family))
                                      (FONT-SIZE (LISTGET FONT-MEASUREMENT 'size))
                                      (FONT-WEIGHT (LISTGET FONT-MEASUREMENT 'weight))
                                      (FONT-STYLE (LISTGET FONT-MEASUREMENT 'style))
                                      (LINE-HEIGHT (LISTGET FONT-MEASUREMENT 'height))
                                      (CHAR-WIDTHS (LISTGET FONT-MEASUREMENT 'xccsWidths))
                                      (MAX-ASCENT (LISTGET FONT-MEASUREMENT 'maxAscent))
                                      (MAX-DESCENT (LISTGET FONT-MEASUREMENT 'maxDescent))
                                      [FONT-LISP-NAME (MKATOM (LISTGET FONT-MEASUREMENT 'lispName]
                                      (FONT-LISP-FACE (MAPCAR (LISTGET FONT-MEASUREMENT 'lispFace)
                                                             #'MKATOM))
                                      (FONT-LISP-SIZE (LISTGET FONT-MEASUREMENT 'lispSize]
                                     (CL:FORMAT T 
                                  "Font ~s, ~A ~A ~A: height ~d, ascent ~d, descent ~d, ~d widths~%%"
                                            FONT-FAMILY FONT-SIZE FONT-WEIGHT FONT-STYLE LINE-HEIGHT
                                            MAX-ASCENT MAX-DESCENT (LENGTH CHAR-WIDTHS))

                                     (* ;; 
                                     "store the widths as 16-bit %"centipoints%" in the ARRAYBLOCK")

                                     (LET ((CODE-TO-WIDTH (\HTML.READ-METRICS CHAR-WIDTHS 
                                                                 *NUM-XCCS-WIDTHS*)))

                                          (* ;; "return this as a structure")

                                          (CONS (LIST FONT-LISP-NAME FONT-LISP-SIZE FONT-LISP-FACE)
                                                (LIST MAX-ASCENT MAX-DESCENT CODE-TO-WIDTH])

(SKIP-32-NULL-VALUES
  [CL:LAMBDA (LIST)
         (CL:BLOCK SKIP-32-NULL-VALUES
             [CDDDDR (CDDDDR (CDDDDR (CDDDDR (CDDDDR (CDDDDR (CDDDDR (CDDDDR LIST])])
)

(CL:DEFCONSTANT *MIN-XCCS-CODE* 32
   "The minimum character code we'll store widths for")

(CL:DEFCONSTANT *NUM-XCCS-WIDTHS* (- 65536 *MIN-XCCS-CODE*)
                                  "Maximum number of widths in a font")
(DECLARE%: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS 

(ADDTOVAR NLAMA )

(ADDTOVAR NLAML )

(ADDTOVAR LAMA SKIP-32-NULL-VALUES)
)
(DECLARE%: DONTCOPY
  (FILEMAP (NIL (933 2459 (DUMP-XCCS-UNICODE-MAPPING 933 . 2459)) (2461 3339 (\HTML.READ-METRICS 2461 . 
3339)) (3340 6628 (LOAD-BROWSER-FONT-METRICS 3350 . 6455) (SKIP-32-NULL-VALUES 6457 . 6626)))))
STOP

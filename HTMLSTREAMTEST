(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)

(FILECREATED "13-Feb-2025 14:44:01" {DSK}<Users>hjellinek>Projects>TrySVG>Lisp>HTMLSTREAMTEST.;28 33685  

      :CHANGES-TO (FUNCTIONS HTMLTEST.SHOW-CHAR-BOUNDS HTMLTEST.TEXT-TWO-FONTS 
                         HTMLTEST.SHOW-TEXT-BOUNDS)

      :PREVIOUS-DATE "29-Jan-2025 17:41:53" 
{DSK}<Users>hjellinek>Projects>TrySVG>Lisp>HTMLSTREAMTEST.;24)


(PRETTYCOMPRINT HTMLSTREAMTESTCOMS)

(RPAQQ HTMLSTREAMTESTCOMS
       ((FUNCTIONS GEN-TEST-BITMAP)
        (FUNCTIONS HTMLTEST.BITBLT HTMLTEST.TALL-BITBLT HTMLTEST.BLTSHADE)
        (FUNCTIONS HTMLTEST.ONE-PAGE-SIMPLE HTMLTEST.ONE-PAGE-WITH-SIMPLE-GRAPHICS 
               HTMLTEST.ONE-PAGE-WITH-CURVE HTMLTEST.TEXT-TWO-FONTS HTMLTEST.TEXT-VERTICAL-OVERFLOW 
               HTMLTEST.TEXT-HORIZONTAL-OVERFLOW HTMLTEST.SPECIAL-TEXT-ENTITIES HTMLTEST.BRIEF-TEXT)
        
        (* ;; "charsets")

        (FUNCTIONS HTMLTEST.FUNNY-CHARS HTMLTEST.UNDEFINED-CHARS)
        
        (* ;; "metrics")

        (FUNCTIONS HTMLTEST.SHOW-TEXT-BOUNDS HTMLTEST.SHOW-CHAR-BOUNDS)
        
        (* ;; "fonts")

        (FUNCTIONS HTMLTEST.NOTO-SANS)
        
        (* ;; "misc")

        (FUNCTIONS WINDOWTEST.SHOW-TEXT-BOUNDS)
        (FUNCTIONS HTMLTEST.TRANSFORM HTMLTEST.TRANSFORM-POINTS)))

(CL:DEFUN GEN-TEST-BITMAP (W H)
   "Generate a test bitmap image"
   (LET* [(BITMAP (BITMAPCREATE W H))
          (STREAM (DSPCREATE BITMAP))
          (FONT-HEIGHT (FONTPROP STREAM 'HEIGHT]
         (FOR X FROM 0 TO W DO (BITMAPBIT BITMAP X 0 1)
                               (BITMAPBIT BITMAP X (- H 1)
                                      1))
         (FOR Y FROM 0 TO H DO (BITMAPBIT BITMAP 0 Y 1)
                               (BITMAPBIT BITMAP (- W 1)
                                      Y 1))
         (MOVETO 2 (- H FONT-HEIGHT)
                STREAM)
         (CL:FORMAT STREAM "~dx~d" W H)
         BITMAP))

(CL:DEFUN HTMLTEST.BITBLT (&OPTIONAL (FILE-NAME "/tmp/bitblt.html"))
   "Test bitblt in a single-page document"
   (CL:WITH-OPEN-STREAM [HTMLSTREAM (OPENHTMLSTREAM FILE-NAME '(TITLE "BitBLT test document"]
          (LET* ((W 400)
                 (H 50)
                 (TEST-BITMAP (GEN-TEST-BITMAP W H)))
                (PRINTOUT T "y1 = " (DSPYPOSITION NIL HTMLSTREAM)
                       T)
                (TERPRI HTMLSTREAM)
                (CL:FORMAT HTMLSTREAM "Here's some text.")
                (PRINTOUT T "y2 = " (DSPYPOSITION NIL HTMLSTREAM)
                       T)
                (TERPRI HTMLSTREAM)
                (BITBLT TEST-BITMAP 0 0 HTMLSTREAM 100 200)
                (MOVETO 40 500 HTMLSTREAM)
                (CL:FORMAT HTMLSTREAM "Second line"))
          FILE-NAME))

(CL:DEFUN HTMLTEST.TALL-BITBLT (&OPTIONAL (FILE-NAME "/tmp/bitblt.html"))
   "Test bitblt in a single-page document"
   (CL:WITH-OPEN-STREAM [HTMLSTREAM (OPENHTMLSTREAM FILE-NAME '(TITLE "BitBLT test document"]
          (LET* ((W 50)
                 (H 400)
                 (TEST-BITMAP (GEN-TEST-BITMAP W H))
                 (SCALE (DSPSCALE NIL HTMLSTREAM)))
                (PRINTOUT T "y1 = " (DSPYPOSITION NIL HTMLSTREAM)
                       T)
                (TERPRI HTMLSTREAM)
                (CL:FORMAT HTMLSTREAM "Here's some text.")
                (PRINTOUT T "y2 = " (DSPYPOSITION NIL HTMLSTREAM)
                       T)
                (TERPRI HTMLSTREAM)
                (BITBLT TEST-BITMAP 0 0 HTMLSTREAM (TIMES 100 SCALE)
                       (TIMES 200 SCALE))
                (MOVETO (TIMES 40 SCALE)
                       (TIMES 100 SCALE)
                       HTMLSTREAM)
                (CL:FORMAT HTMLSTREAM "Second line"))
          FILE-NAME))

(CL:DEFUN HTMLTEST.BLTSHADE (&OPTIONAL (FILE-NAME "/tmp/bltshade.html"))
   "Test BLTSHADE in a single-page document"
   (CL:WITH-OPEN-STREAM [HTMLSTREAM (OPENHTMLSTREAM FILE-NAME '(TITLE "BLTSHADE test document"]
          [LET* ((PAGE-HEIGHT (HTML.INCHES-TO-CENTIPOINTS 11))
                 (PAGE-WIDTH (HTML.INCHES-TO-CENTIPOINTS 8.5))
                 (FONT-HEIGHT (FONTPROP (DSPFONT NIL HTMLSTREAM)
                                     'HEIGHT))
                 (NUM-SHADES 16)
                 (BLT-WIDTH PAGE-WIDTH)
                 (BLT-HEIGHT (IQUOTIENT PAGE-HEIGHT NUM-SHADES))
                 (Y (- PAGE-HEIGHT BLT-HEIGHT))
                 (SHADE-BITS 0))
                (FOR SHADE FROM 0 TO NUM-SHADES
                   DO (LET ((SHADE (MASK.1'S 0 SHADE)))
                           (DRAWPOLYGON (LIST (CONS 0 Y)
                                              (CONS BLT-WIDTH Y)
                                              (CONS BLT-WIDTH (+ Y BLT-HEIGHT))
                                              (CONS 0 (+ Y BLT-HEIGHT)))
                                  T
                                  (DSPSCALE NIL HTMLSTREAM)
                                  NIL HTMLSTREAM)
                           (BLTSHADE SHADE HTMLSTREAM 0 Y BLT-WIDTH BLT-HEIGHT)
                           (MOVETO 0 (+ Y (/ BLT-HEIGHT 2))
                                  HTMLSTREAM)
                           (CL:FORMAT HTMLSTREAM "Shade ~16,'0B" SHADE)
                           (CL:DECF Y BLT-HEIGHT]
          FILE-NAME))

(CL:DEFUN HTMLTEST.ONE-PAGE-SIMPLE (&OPTIONAL (FILE-NAME "/tmp/one-page-simple.html"))
   "Simple text + graphics test for a single-page document"
   (CL:WITH-OPEN-STREAM [HTMLSTREAM (OPENHTMLSTREAM FILE-NAME '(TITLE "One page test document"]
          (FOR I FROM 0 TO 4 DO (MOVETO (ITIMES I 5000)
                                       (ITIMES I 5000)
                                       HTMLSTREAM)
                                (CL:FORMAT HTMLSTREAM "Line ~d  X,Y = ~d,~d" I (DSPXPOSITION NIL 
                                                                                      HTMLSTREAM)
                                       (DSPYPOSITION NIL HTMLSTREAM)))
          FILE-NAME))

(CL:DEFUN HTMLTEST.ONE-PAGE-WITH-SIMPLE-GRAPHICS (&OPTIONAL (FILE-NAME 
                                                                 "/tmp/one-page-simple-graphics.html"
                                                                   ))
   "Simple text + graphics test for a single-page document"
   (CL:WITH-OPEN-STREAM [HTMLSTREAM (OPENHTMLSTREAM FILE-NAME '(TITLE "One page test document"]
          (TERPRI HTMLSTREAM)
          (CL:FORMAT HTMLSTREAM "First line, x = ~d, y = ~d!" (DSPXPOSITION NIL HTMLSTREAM)
                 (DSPYPOSITION NIL HTMLSTREAM))
          (TERPRI HTMLSTREAM)
          (CL:FORMAT HTMLSTREAM "Second line, x = ~d, y = ~d" (DSPXPOSITION NIL HTMLSTREAM)
                 (DSPYPOSITION NIL HTMLSTREAM))
          (MOVETO (P-TO-CP 40)
                 (P-TO-CP 50)
                 HTMLSTREAM)
          (CL:FORMAT HTMLSTREAM "Third line: Moved to ~d, ~d." (DSPXPOSITION NIL HTMLSTREAM)
                 (DSPYPOSITION NIL HTMLSTREAM))
          (DRAWCIRCLE (P-TO-CP 140)
                 (P-TO-CP 150)
                 (P-TO-CP 130)
                 NIL NIL HTMLSTREAM)
          (FILLCIRCLE (P-TO-CP 340)
                 (P-TO-CP 150)
                 (P-TO-CP 130)
                 NIL HTMLSTREAM)
          (for ANGLE from 0 to 359 by 15 do (DRAWELLIPSE (P-TO-CP 200)
                                                   (P-TO-CP 250)
                                                   (P-TO-CP 100)
                                                   (P-TO-CP 180)
                                                   ANGLE NIL NIL HTMLSTREAM))
          (for LINE-Y from (P-TO-CP 450) to (P-TO-CP 550) by (P-TO-CP 10)
             do (DRAWLINE 0 LINE-Y (P-TO-CP 800)
                       LINE-Y
                       (IQUOTIENT (- LINE-Y (P-TO-CP 449))
                              10)
                       NIL HTMLSTREAM))
          (LET* [[POLY-POINTS '((100 . 100)
                                (50 . 125)
                                (150 . 175)
                                (200 . 100)
                                (150 . 50]
                 [STAR-POINTS '((50 . 0)
                                (21 . 90)
                                (98 . 35)
                                (2 . 35)
                                (79 . 90]
                 (TRANSFORMED-POLY-POINTS (HTMLTEST.TRANSFORM-POINTS POLY-POINTS (P-TO-CP -20)
                                                 (P-TO-CP -20)
                                                 (TIMES 3 *CENTIPOINTS-PER-POINT*)
                                                 (TIMES 3 *CENTIPOINTS-PER-POINT*)))
                 (TRANSFORMED-STAR-POINTS (HTMLTEST.TRANSFORM-POINTS STAR-POINTS 0 (P-TO-CP 200)
                                                 (TIMES 3 *CENTIPOINTS-PER-POINT*)
                                                 (TIMES 3 *CENTIPOINTS-PER-POINT*]
                (DRAWPOLYGON POLY-POINTS T `(ROUND 300)
                       '(400 200)
                       HTMLSTREAM)
                (DRAWPOLYGON TRANSFORMED-POLY-POINTS NIL `(ROUND 300)
                       '(400 200)
                       HTMLSTREAM)
                (FILLPOLYGON TRANSFORMED-STAR-POINTS NIL HTMLSTREAM)
                (LET [(CURVE-KNOTS '((1000 . 1000)
                                     (5000 . 5000)
                                     (10000 . 1000)
                                     (15000 . 5000]
                     (DRAWCURVE CURVE-KNOTS NIL NIL NIL HTMLSTREAM)))
          FILE-NAME))

(CL:DEFUN HTMLTEST.ONE-PAGE-WITH-CURVE (&OPTIONAL (FILE-NAME "/tmp/one-page-with-curve.html"))
   (CL:WITH-OPEN-STREAM [HTMLSTREAM (OPENHTMLSTREAM FILE-NAME '(TITLE "Curve test document"]
          (DRAWCURVE (HTMLTEST.TRANSFORM-POINTS '((10 . 10)
                                                  (50 . 50)
                                                  (100 . 10)
                                                  (150 . 50))
                            0 0 *CENTIPOINTS-PER-POINT* *CENTIPOINTS-PER-POINT*)
                 NIL
                 '(ROUND 5)
                 '(1000 1000 1000 2000)
                 HTMLSTREAM)
          FILE-NAME))

(CL:DEFUN HTMLTEST.TEXT-TWO-FONTS (&OPTIONAL (FILE-NAME "/tmp/two-fonts.html"))
   "Output text, change fonts, output more text"
   (CL:WITH-OPEN-STREAM [HTMLSTREAM (OPENHTMLSTREAM FILE-NAME '(TITLE "Two fonts"]
          (CL:FLET [(FONT-SPEC NIL (FONTPROP (DSPFONT NIL HTMLSTREAM)
                                          'SPEC]
                 (LET* ((FIRST-FONT (FONTCREATE 'NOTO-SANS-DISPLAY 10 'REGULAR NIL HTMLSTREAM))
                        (SECOND-FONT (FONTCREATE 'NOTO-SANS 20 'REGULAR NIL HTMLSTREAM))
                        (SECOND-FONT-BOLD (FONTCREATE 'NOTO-SANS 20 '(BOLD REGULAR REGULAR)
                                                 NIL HTMLSTREAM))
                        (SECOND-FONT-ITALIC (FONTCREATE 'NOTO-SANS 20 '(MEDIUM ITALIC REGULAR)
                                                   NIL HTMLSTREAM))
                        (SECOND-FONT-BOLD-ITALIC (FONTCREATE 'NOTO-SANS 20 '(BOLD ITALIC REGULAR)
                                                        NIL HTMLSTREAM)))
                       (CL:FORMAT HTMLSTREAM "This is in the default font, ~s.~%%" (FONT-SPEC))
                       (TERPRI HTMLSTREAM)
                       (DSPFONT FIRST-FONT HTMLSTREAM)
                       (CL:FORMAT HTMLSTREAM "This is in the first font, ~s.~%%" (FONT-SPEC))
                       (TERPRI HTMLSTREAM)
                       (DSPFONT SECOND-FONT HTMLSTREAM)
                       (CL:FORMAT HTMLSTREAM "We just changed the font to ~s.~%%" (FONT-SPEC))
                       (TERPRI HTMLSTREAM)
                       (DSPFONT SECOND-FONT-BOLD HTMLSTREAM)
                       (CL:FORMAT HTMLSTREAM "That font but bold, ~s.~%%" (FONT-SPEC))
                       (TERPRI HTMLSTREAM)
                       (DSPFONT SECOND-FONT-ITALIC HTMLSTREAM)
                       (CL:FORMAT HTMLSTREAM "That font but italic, ~s.~%%" (FONT-SPEC))
                       (TERPRI HTMLSTREAM)
                       (DSPFONT SECOND-FONT-BOLD-ITALIC HTMLSTREAM)
                       (CL:FORMAT HTMLSTREAM "Bold and italic too, ~s.~%%" (FONT-SPEC))
                       (TERPRI HTMLSTREAM)
                       FILE-NAME))))

(CL:DEFUN HTMLTEST.TEXT-VERTICAL-OVERFLOW (&OPTIONAL (FILE-NAME "/tmp/vertical-overflow.html"))
   "Output enough text to force a second page"
   (CL:WITH-OPEN-STREAM [HTMLSTREAM (OPENHTMLSTREAM FILE-NAME '(TITLE "Overflow test document"]
          (for LINE from 0 to 66 do (CL:FORMAT HTMLSTREAM "This is line ~d.  Y position = ~d" LINE
                                           (DSPYPOSITION NIL HTMLSTREAM))
                                    (TERPRI HTMLSTREAM))
          FILE-NAME))

(CL:DEFUN HTMLTEST.TEXT-HORIZONTAL-OVERFLOW (&OPTIONAL (FILE-NAME "/tmp/horizontal-overflow.html"))
   "Output enough text to wrap around the right margin"
   (CL:WITH-OPEN-STREAM [HTMLSTREAM (OPENHTMLSTREAM FILE-NAME '(TITLE 
                                                                  "Horizontal overflow test document"
                                                                      ]
          (for REPETITION from 0 to 50 do (CL:FORMAT HTMLSTREAM 
                                       "#~d: All work and no play makes Jack a dull boy 1234567890! "
                                                 REPETITION))
          (TERPRI HTMLSTREAM)
          (CL:FORMAT HTMLSTREAM "The end!~%%")
          FILE-NAME))

(CL:DEFUN HTMLTEST.SPECIAL-TEXT-ENTITIES (&OPTIONAL (FILE-NAME "/tmp/special-entities.html"))
   "Output enough text to wrap around the right margin"
   (CL:WITH-OPEN-STREAM [HTMLSTREAM (OPENHTMLSTREAM FILE-NAME '(TITLE 
                                                                     "Special entities test document"
                                                                      ]
          (for REPETITION from 0 to 50 do (CL:FORMAT HTMLSTREAM "#~d: All work & no play > All work & all play but < %"neither%"! These will pass through: &#39; &copy; "
                                                 REPETITION))
          (TERPRI HTMLSTREAM)
          (CL:FORMAT HTMLSTREAM "The end!~%%")
          FILE-NAME))

(CL:DEFUN HTMLTEST.BRIEF-TEXT (&OPTIONAL (FILE-NAME "/tmp/brief-text.html"))
   "Output brief text"
   (CL:WITH-OPEN-STREAM [HTMLSTREAM (OPENHTMLSTREAM FILE-NAME '(TITLE 
                                                                  "Horizontal overflow test document"
                                                                      ]
          (CL:FORMAT HTMLSTREAM "Brief text no terpri")
          (CL:FORMAT HTMLSTREAM " more.")
          FILE-NAME))



(* ;; "charsets")


(CL:DEFUN HTMLTEST.FUNNY-CHARS (&OPTIONAL (FILE-NAME "/tmp/funny-chars.html"))
   "Create a document that displays characters from various non-zero charsets"
   (CL:WITH-OPEN-STREAM [HTMLSTREAM (OPENHTMLSTREAM FILE-NAME '(TITLE "Valid charsets test document"]
          (DSPFONT (FONTCREATE 'HELVETICA 10 'MRR 0 'HTML)
                 HTMLSTREAM)
          (LET [(EXAMPLES '(("Charset 0 (Latin)" 0 ("Capital letters" 65 90)
                                   ("Small letters" 97 122))
                            ("Accented Latin 1" 241 ("Capital letters" 33 43)
                                   ("Small letters" 161 171))
                            ("Accented Latin 2" 242 ("Capital letters" 33 43)
                                   ("Small letters" 161 171))
                            ("Greek" 38 ("Capital letters" 65 93)
                                   ("Small letters" 97 125))
                            ("Accented Greek 1" 243 ("A sample" 33 43))
                            ("Accented Greek 2" 244 ("A sample" 33 43))
                            ("Cyrillic" 39 ("Capital letters" 33 65)
                                   ("Small letters" 81 113))
                            ("Runic & Gothic" 41 ("Runes" 33 44)
                                   ("Gothic" 225 230))
                            ("Extended Cyrillic" 42 ("A sample" 46 51))
                            ("Arabic" 224 ("Consonants and vowels" 66 106))
                            ("Extended Arabic" 228 ("Indian numerals" 48 57)
                                   ("Isolated Arabic chars" 74 84))
                            ("Initial, medial, and final Arabic characters" 245 ("A sample" 33 43))
                            ("Hebrew" 225 ("Consonants" 64 93))
                            ("Katakana" 37 ("A sample" 33 54))
                            ("Hiragana and Bo-po-mo-fo" 36 ("A sample" 33 54))
                            ("JIS Level-I Japanese kanji" 48 ("A sample" 33 54))
                            ("JIS Level-I Japanese kanji" 49 ("A sample" 33 54))
                            ("JIS Level-I Japanese kanji" 79 ("A sample" 33 54))
                            ("Misc Japanese Symbols" 116 ("A sample" 34 42))
                            ("Hangul" 227 ("A sample" 193 203))
                            ("Georgian" 228 ("A sample" 33 43))
                            ("Armenian" 228 ("A sample" 161 171))
                            ("Forms" 40 ("Box elements" 35 42)
                                   ("Mosaic tiles" 161 169))
                            ("IPA" 226 ("Schwa assortment" 95 98)
                                   ("Vowels" 81 90)
                                   ("Plosives and fricatives" 162 172))
                            ("Devanagari" 229 ("A sample" 165 174))
                            ("Variant representations for graphic characters" 253 ("A sample" 224 233
                                                                                         ))
                            ("General and technical symbols 3" 235 ("A sample" 33 43))
                            ("General and technical symbols 2" 238 ("A sample" 47 58))
                            ("General and technical symbols 1" 239 ("Random sample" 33 43)
                                   ("Roman numerals" 193 202)
                                   ("Funny" 222 224)
                                   ("Zodiac" 234 251))
                            ("ITC Dingbats 1" 237 ("A sample" 33 44))
                            ("ITC Dingbats 2 and general symbols" 236 ("Hands and scissors" 34 38)
                                   ("Other hands" 117 119)
                                   ("Circled numbers" 184 193))
                            ("Ligatures and field format symbols" 240 ("Fractions" 112 121)
                                   ("Control character names" 168 173)
                                   ("Movement and substitution" 184 199))
                            ("Enclosed numbers and letters" 118 ("A sample" 48 58))
                            ("JIS Level-II Japanese kanji 1" 80 ("A sample" 33 43))
                            ("JIS Level-II Japanese kanji 2" 81 ("A sample" 33 43]
               (CL:FLET [(SHOW-CHAR-RANGE (START END CHARSET)
                                (FOR BASE-CODE FROM START TO END
                                   DO (LET ((CH (LOGOR (LLSH CHARSET 8)
                                                       BASE-CODE)))
                                           (CL:FORMAT HTMLSTREAM "Code 0x~4,'0X = " CH)
                                           (\OUTCHAR HTMLSTREAM CH)
                                           (CL:FORMAT HTMLSTREAM "~%%"]
                      (CL:FORMAT HTMLSTREAM "Text in various character sets.~%%~%%")
                      (for EXAMPLE in EXAMPLES do (LET ((NAME (CAR EXAMPLE))
                                                        (CHARSET (CADR EXAMPLE)))
                                                       (CL:FORMAT HTMLSTREAM 
                                                      "This is #o~8,,'0,r ~:*0x~2,'0X ~:*~d (~A).~%%"
                                                              CHARSET NAME)
                                                       (for RANGE in (CDDR EXAMPLE)
                                                          do (CL:FORMAT HTMLSTREAM "~%%~A:~%%"
                                                                    (CAR RANGE))
                                                             (SHOW-CHAR-RANGE (CADR RANGE)
                                                                    (CADDR RANGE)
                                                                    CHARSET))
                                                       (DSPNEWPAGE HTMLSTREAM)))
                      (CL:FORMAT HTMLSTREAM "Done!~%%")
                      FILE-NAME))))

(CL:DEFUN HTMLTEST.UNDEFINED-CHARS (&OPTIONAL (FILE-NAME "/tmp/undefined-chars.html"))
   "Create a document that tries to display undefined characters from various charsets, real or not"
   (CL:WITH-OPEN-STREAM [HTMLSTREAM (OPENHTMLSTREAM FILE-NAME '(TITLE 
                                                                   "Undefined charsets test document"
                                                                      ]
          (LET ((UNDEFINED-CHARSET 10)
                (START-GIBBERISH 65)
                (END-GIBBERISH 93))
               (CL:FLET [(SHOW-CHAR-RANGE (START END CHARSET)
                                (FOR BASE-CODE FROM START TO END
                                   DO (LET ((CH (LOGOR (LLSH CHARSET 8)
                                                       BASE-CODE)))
                                           (CL:FORMAT HTMLSTREAM "Code 0x~4,'0X = " CH)
                                           (\OUTCHAR HTMLSTREAM CH)
                                           (CL:FORMAT HTMLSTREAM "~%%"]
                      (CL:FORMAT HTMLSTREAM "Here's some text in charset 0.~%%")
                      (CL:FORMAT HTMLSTREAM "And now 0x~2,'0X (Undefined).~%%" UNDEFINED-CHARSET)
                      (CL:FORMAT HTMLSTREAM "Gibberish letters:~%%")
                      (SHOW-CHAR-RANGE START-GIBBERISH END-GIBBERISH UNDEFINED-CHARSET)

                      (* ;; "TODO output REPLACEMENT raw text: '(239 191 189)")

                      (CL:FORMAT HTMLSTREAM "Done!~%%")
                      FILE-NAME))))



(* ;; "metrics")


(CL:DEFUN HTMLTEST.SHOW-TEXT-BOUNDS (&OPTIONAL (FILE-NAME "/tmp/text-bounds.html"))
   "Output text, draw bounds."

   (* ;; "Remember: in SVG, Y = 0 is at the top left; Y increases as you go down the page.")

   (* ;; "We invert the Y coordinate to match Medley:")

   (* ;; "    In Medley, Y = 0 is the bottom left")

   (* ;; "Text is drawn with baseline at current Y position")

   (CL:WITH-OPEN-STREAM [STREAM (OPENHTMLSTREAM FILE-NAME '(TITLE "Text Bounds"]
          (LET ((SAMPLE "All work and no play makes Jack a dull boy. 1234567890!")
                (FONT10 (FONTCREATE 'NOTO-SANS 10 'REGULAR NIL STREAM))
                (FONT12 (FONTCREATE 'NOTO-SANS 12 'REGULAR NIL STREAM))
                (FONT14 (FONTCREATE 'NOTO-SANS 14 'REGULAR NIL STREAM))
                STARTING-X STARTING-Y BASELINE-Y FONT-ASCENT FONT-DESCENT)
               (CL:FLET [(WRITE NIL (LET ((SAMPLE-WIDTH (STRINGWIDTH SAMPLE STREAM)))

                                         (* ;; 
                       "display a string with a corner of a box at its origin, the width of the text")

                                         (TERPRI STREAM)
                                         (SETQ FONT-ASCENT (FONTPROP STREAM 'ASCENT))
                                         (SETQ FONT-DESCENT (FONTPROP STREAM 'DESCENT))
                                         (SETQ STARTING-X (DSPXPOSITION NIL STREAM))
                                         (SETQ STARTING-Y (DSPYPOSITION NIL STREAM))
                                         (CL:FORMAT STREAM "~a~%%" SAMPLE)

                                         (* ;; 
                      "draw from (end-X, baseline-Y) to (start-X, baseline-Y) to (start-X, height-Y)")

                                         (DRAWLINE (+ STARTING-X SAMPLE-WIDTH)
                                                STARTING-Y STARTING-X STARTING-Y 
                                                *CENTIPOINTS-PER-POINT* NIL STREAM)

                                         (* ;; 
                                         "draw from (start-X, descent-Y) to (start-X, ascent-Y)")

                                         (DRAWLINE STARTING-X (- STARTING-Y FONT-DESCENT)
                                                STARTING-X
                                                (+ STARTING-Y FONT-ASCENT)
                                                *CENTIPOINTS-PER-POINT* NIL STREAM)

                                         (* ;; 
                                         "draw a short line at the end, the height of the descent")

                                         (DRAWLINE (+ STARTING-X SAMPLE-WIDTH)
                                                (- STARTING-Y FONT-DESCENT)
                                                (+ STARTING-X SAMPLE-WIDTH)
                                                (+ STARTING-Y FONT-DESCENT)
                                                *CENTIPOINTS-PER-POINT* NIL STREAM)
                                         (TERPRI STREAM)
                                         (TERPRI STREAM)
                                         (TERPRI STREAM]
                      (DSPFONT FONT10 STREAM)
                      (WRITE)
                      (DSPFONT FONT12 STREAM)
                      (WRITE)
                      (DSPFONT FONT14 STREAM)
                      (WRITE))
               FILE-NAME)))

(CL:DEFUN HTMLTEST.SHOW-CHAR-BOUNDS (&OPTIONAL (FILE-NAME "/tmp/char-bounds.html"))
   "Output text, draw bounds for each character."

   (* ;; "Remember: in SVG, Y = 0 is at the top left; Y increases as you go down the page.")

   (* ;; "We invert the Y coordinate to match Medley:")

   (* ;; "    In Medley, Y = 0 is the bottom left")

   (* ;; "Text is drawn with baseline at current Y position")

   (* ;; 
   "TODO The bounding box ends short of the width of the text. the metrics are too small.  WHY?")

   (CL:WITH-OPEN-STREAM [STREAM (OPENHTMLSTREAM FILE-NAME '(TITLE "Character Bounds"]
          (LET ((SAMPLE "All work and no play makes Jack a dull boy. 1234567890!")
                (FONT10 (FONTCREATE 'NOTO-SANS 10 'REGULAR NIL STREAM))
                (FONT14 (FONTCREATE 'NOTO-SANS 14 'REGULAR NIL STREAM))
                (LINEWIDTH (/ *CENTIPOINTS-PER-POINT* 2))
                STARTING-X STARTING-Y BASELINE-Y FONT-ASCENT FONT-DESCENT)
               (CL:FLET [(SAMPLE (FONT)
                                (DSPFONT FONT STREAM)
                                (LET ((SAMPLE-WIDTH (STRINGWIDTH SAMPLE STREAM)))
                                     (TERPRI STREAM)
                                     (SETQ FONT-ASCENT (FONTPROP STREAM 'ASCENT))
                                     (SETQ FONT-DESCENT (FONTPROP STREAM 'DESCENT))
                                     (SETQ STARTING-X (DSPXPOSITION NIL STREAM))
                                     (SETQ STARTING-Y (DSPYPOSITION NIL STREAM))
                                     (CL:FORMAT STREAM "~a~%%" SAMPLE)
                                     (CL:FLET [(DRAWCHARBOX (CH X BASELINE)
                                                      (LET ((WIDTH (CHARWIDTH CH STREAM)))

                                                           (* ;; "draw the descent")

                                                           (DRAWLINE X (- BASELINE FONT-DESCENT)
                                                                  (+ X WIDTH)
                                                                  (- BASELINE FONT-DESCENT)
                                                                  LINEWIDTH NIL STREAM)

                                                           (* ;; "draw the baseline")

                                                           (DRAWLINE X BASELINE (+ X WIDTH)
                                                                  BASELINE LINEWIDTH NIL STREAM)

                                                           (* ;; "draw the left bearing")

                                                           (DRAWLINE X (- BASELINE FONT-DESCENT)
                                                                  X
                                                                  (+ BASELINE FONT-ASCENT)
                                                                  LINEWIDTH NIL STREAM)

                                                           (* ;; "draw the right bearing")

                                                           (DRAWLINE (+ X WIDTH)
                                                                  (- BASELINE FONT-DESCENT)
                                                                  (+ X WIDTH)
                                                                  (+ BASELINE FONT-ASCENT)
                                                                  LINEWIDTH NIL STREAM)

                                                           (* ;; "draw the ascent")

                                                           (DRAWLINE X (+ BASELINE FONT-ASCENT)
                                                                  (+ X WIDTH)
                                                                  (+ BASELINE FONT-ASCENT)
                                                                  LINEWIDTH NIL STREAM)
                                                           (+ X WIDTH]
                                            (for CH instring SAMPLE
                                               do (SETQ STARTING-X (DRAWCHARBOX CH STARTING-X 
                                                                          STARTING-Y)))
                                            (TERPRI STREAM)
                                            (TERPRI STREAM)
                                            (TERPRI STREAM]
                      (SAMPLE FONT10)
                      (SAMPLE FONT14))
               FILE-NAME)))



(* ;; "fonts")


(CL:DEFUN HTMLTEST.NOTO-SANS (&OPTIONAL (FILE-NAME "/tmp/noto-sans.html"))
   "Write simple text to a file using the Noto Sans font, which seems broken somehow."
   (CL:WITH-OPEN-STREAM [HTMLSTREAM (OPENHTMLSTREAM FILE-NAME '(TITLE "Noto Sans test document"]

          (* ;; "The NOTO-SANS 12 font height is 14100.  NOTO-SANS-DISPLAY is 1500!")

          (LET ((FONT (FONTCREATE 'NOTO-SANS 12 'MRR 0 HTMLSTREAM)))
               (CL:FORMAT T "Font family: ~A~%%" (FONTPROP FONT 'FAMILY))
               (DSPFONT FONT HTMLSTREAM)
               (FOR LINE FROM 1 TO 6 DO (CL:FORMAT HTMLSTREAM 
                                    "~d. The quick brown fox jumped over the lazy dog 1234567890.~%%"
                                               LINE)))
          FILE-NAME))



(* ;; "misc")


(CL:DEFUN WINDOWTEST.SHOW-TEXT-BOUNDS (&OPTIONAL REUSE-WINDOW)
   "Output text, draw bounds, dump widths"

   (* ;; "Remember: Y = 0 is at the bottom left; Y decreases as you go down the page.")

   (* ;; "Text is drawn with baseline at current Y position")

   (LET* ((WINDOW (OR REUSE-WINDOW (CREATEW (create REGION
                                                   LEFT _ 610
                                                   BOTTOM _ 10
                                                   WIDTH _ (HTML.INCHES-TO-POINTS 8.5)
                                                   HEIGHT _ (HTML.INCHES-TO-POINTS 11))
                                          "Text Bounds")))
          (STREAM (WINDOWPROP WINDOW 'DSP))
          (SAMPLE "All work and no play makes Jack a dull boy. 1234567890")
          (FONT10 (FONTCREATE 'HELVETICA 10 'REGULAR NIL STREAM))
          (FONT20 (FONTCREATE 'HELVETICA 18 'REGULAR NIL STREAM))
          STARTING-X STARTING-Y BASELINE-Y FONT-HEIGHT SAMPLE-WIDTH)
         (CLEARW WINDOW)

         (* ;; "display a string with a corner of a box at its origin, the width of the text")

         (DSPFONT FONT10 STREAM)
         (TERPRI STREAM)
         (SETQ FONT-HEIGHT (FONTPROP (DSPFONT NIL STREAM)
                                  'HEIGHT))
         (SETQ STARTING-X (DSPXPOSITION NIL STREAM))
         (SETQ STARTING-Y (DSPYPOSITION NIL STREAM))
         (SETQ SAMPLE-WIDTH (STRINGWIDTH SAMPLE (DSPFONT NIL STREAM)))
         (CL:FORMAT STREAM SAMPLE)
         (DRAWPOLYGON (LIST (CONS (+ STARTING-X SAMPLE-WIDTH)
                                  STARTING-Y)
                            (CONS STARTING-X STARTING-Y)
                            (CONS STARTING-X (+ STARTING-Y FONT-HEIGHT)))
                NIL NIL NIL STREAM)
         (TERPRI STREAM)
         (TERPRI STREAM)
         (TERPRI STREAM)))

(CL:DEFUN HTMLTEST.TRANSFORM (PT X-TRANSLATE Y-TRANSLATE X-SCALE Y-SCALE)
   "Move and scale a point"
   (CONS (+ X-TRANSLATE (ITIMES (CAR PT)
                               X-SCALE))
         (+ Y-TRANSLATE (ITIMES (CDR PT)
                               Y-SCALE))))

(CL:DEFUN HTMLTEST.TRANSFORM-POINTS (POINTS X-TRANSLATE Y-TRANSLATE X-SCALE Y-SCALE)
   "Translate and scale a list of points"
   (for PT in POINTS collect (HTMLTEST.TRANSFORM PT X-TRANSLATE Y-TRANSLATE X-SCALE Y-SCALE)))
(DECLARE%: DONTCOPY
  (FILEMAP (NIL (1338 1997 (GEN-TEST-BITMAP 1338 . 1997)) (1999 2809 (HTMLTEST.BITBLT 1999 . 2809)) (
2811 3802 (HTMLTEST.TALL-BITBLT 2811 . 3802)) (3804 5349 (HTMLTEST.BLTSHADE 3804 . 5349)) (5351 6064 (
HTMLTEST.ONE-PAGE-SIMPLE 5351 . 6064)) (6066 9630 (HTMLTEST.ONE-PAGE-WITH-SIMPLE-GRAPHICS 6066 . 9630)
) (9632 10291 (HTMLTEST.ONE-PAGE-WITH-CURVE 9632 . 10291)) (10293 12452 (HTMLTEST.TEXT-TWO-FONTS 10293
 . 12452)) (12454 12964 (HTMLTEST.TEXT-VERTICAL-OVERFLOW 12454 . 12964)) (12966 13714 (
HTMLTEST.TEXT-HORIZONTAL-OVERFLOW 12966 . 13714)) (13716 14461 (HTMLTEST.SPECIAL-TEXT-ENTITIES 13716
 . 14461)) (14463 14931 (HTMLTEST.BRIEF-TEXT 14463 . 14931)) (14959 20872 (HTMLTEST.FUNNY-CHARS 14959
 . 20872)) (20874 22447 (HTMLTEST.UNDEFINED-CHARS 20874 . 22447)) (22474 25901 (
HTMLTEST.SHOW-TEXT-BOUNDS 22474 . 25901)) (25903 30438 (HTMLTEST.SHOW-CHAR-BOUNDS 25903 . 30438)) (
30463 31259 (HTMLTEST.NOTO-SANS 30463 . 31259)) (31283 33146 (WINDOWTEST.SHOW-TEXT-BOUNDS 31283 . 
33146)) (33148 33419 (HTMLTEST.TRANSFORM 33148 . 33419)) (33421 33662 (HTMLTEST.TRANSFORM-POINTS 33421
 . 33662)))))
STOP

(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)

(FILECREATED "14-Nov-2024 16:36:49" {DSK}<Users>hjellinek>Projects>TrySVG>Lisp>HTMLSTREAM.;24 53612  

      :CHANGES-TO (FUNCTIONS HTML.DRAWLINE HTML.FILLPOLYGON HTML.CHARWIDTH \HTML.FONTCREATE 
                         HTML.OUTCHARFN CSS-CLASS-FROM HTML.WRITE-PREFACE \CLEAN-FONT-CACHE 
                         HTML.OUTPUT-TEXT HTML.FONT HTML.LINEFEED HTML.TERPRI \HTML.INIT-IMAGEDATA)
                  (VARS HTMLSTREAMCOMS)
                  (STRUCTURES HTML.FONTINFO)
                  (VARIABLES *WEB-FONT-FAMILIES*)

      :PREVIOUS-DATE "13-Nov-2024 14:13:06" {DSK}<Users>hjellinek>Projects>TrySVG>Lisp>HTMLSTREAM.;16
)


(PRETTYCOMPRINT HTMLSTREAMCOMS)

(RPAQQ HTMLSTREAMCOMS
       ((RECORDS \BEZIER-POINT)
        (FUNCTIONS BEZIER-CONTROL-POINTS-TO-SVG CLOSE-KNOTS COMPUTE-LINE-HEIGHT COMPUTE-MAX-ASCENT 
               COMPUTE-MAX-DESCENT CONVERT-TO-BEZIER HTML.INCHES-TO-POINTS)
        (RECORDS WEB-FONT-METRICS WEB-CHARSET-METRICS)
        (FUNCTIONS MAKE-FONT-METRICS-FILE-NAME MAKE-CHARSET-METRICS-FILE-NAME)
        (VARIABLES *WEB-FONT-DIRECTORY* *DEFAULT-WEB-FONT-METRICS-FILE-NAME* *WEB-FONT-EXPANSIONS* 
               *WEB-FONT-FAMILIES* *WEB-FONT-SIZES* *WEB-FONT-SLOPES* *WEB-FONT-WEIGHTS*)
        (VARIABLES *BROWSER-FONT-FILE-VERSION* *HTML.DEFAULT-PAGE-SIZE* HTML.FONTCREATE.DEVICENAME 
               HTML.IMAGETYPE HTML.STATE.BETWEEN-PAGES HTML.STATE.CLOSED HTML.STATE.NON-TEXT 
               HTML.STATE.NON-TEXT-OUTPUT HTML.STATE.TEXT-OUTPUT HTML.STATES \HTMLSTREAM.FDEV)
        (FUNCTIONS CHECK-BROWSER-METRICS-FORMAT CSS-CLASS-FROM \HTML.READ-CHARSET-METRICS 
               \HTML.READ-FONT-METRICS)
        (STRUCTURES HTML.IMAGEDATA HTML.FONTINFO)
        (FUNCTIONS with-htmldata CHECK-OPEN)
        (FUNCTIONS HTML.OUTPUT-GRAPHICS HTML.OUTPUT-TEXT \HTML.MAYBE-START-PAGE \HTML.END-PAGE 
               HTML.WRITE-PREFACE)
        (FUNCTIONS OPENHTMLSTREAM HTML.BACKCOLOR HTML.BITBLT HTML.BLTSHADE HTML.BOTTOMMARGIN 
               HTML.CHARWIDTH HTML.CLIPPINGREGION HTML.CLOSEFN HTML.COLOR HTML.DRAWCIRCLE 
               HTML.DRAWCURVE HTML.DRAWELLIPSE HTML.DRAWLINE HTML.DRAWPOLYGON HTML.FILLCIRCLE 
               HTML.FILLPOLYGON HTML.FONT HTML.LEFTMARGIN HTML.LINEFEED HTML.MOVETO HTML.NEWPAGE 
               HTML.OPERATION HTML.OUTCHARFN HTML.RESET HTML.RIGHTMARGIN HTML.SCALE HTML.SCALEDBITBLT
               HTML.SPACEFACTOR HTML.STRINGWIDTH HTML.TERPRI HTML.TOPMARGIN HTML.XPOSITION 
               HTML.YPOSITION MAKE-HTML-IMAGETYPE \HTML.FILLCIRCLE \HTML.INIT-IMAGEDATA 
               \HTML.LINEHEIGHT \HTML.SVG-Y \HTMLSTREAM.INIT)
        (FUNCTIONS \HTML.FONTCREATE \HTML.FONTSAVAILABLE \HTML.CREATECHARSET \HTML.CHANGECHARSET)
        (P (\HTMLSTREAM.INIT))
        
        (* ;; "debugging support")

        (FUNCTIONS \CLEAN-FONT-CACHE)))
(DECLARE%: EVAL@COMPILE

(PROPRECORD \BEZIER-POINT (p0 p1 b0 b1))
)

(CL:DEFUN BEZIER-CONTROL-POINTS-TO-SVG (BEZIER-CONTROL-POINTS)
   "Convert the Bezier control points to SVG path format. Return NIL if the list is NIL"
   (if BEZIER-CONTROL-POINTS
       then (LET* [(START-POINT (fetch (\BEZIER-POINT p0) of (CAR BEZIER-CONTROL-POINTS)))
                   (RESULT (CL:FORMAT NIL "M ~d,~d " (CAR START-POINT)
                                  (CDR START-POINT]
                  [for CTRL-PT in (CDR BEZIER-CONTROL-POINTS) first (SETQ RESULT (CONCAT RESULT "C ")
                                                                     )
                     do (LET ((P0 (fetch (\BEZIER-POINT p0) of CTRL-PT))
                              (B0 (fetch (\BEZIER-POINT b0) of CTRL-PT))
                              (B1 (fetch (\BEZIER-POINT b1) of CTRL-PT))
                              (P1 (fetch (\BEZIER-POINT p1) of CTRL-PT)))
                             (SETQ RESULT (CONCAT RESULT (CL:FORMAT NIL "~d,~d ~d,~d ~d,~d "
                                                                (CAR B0)
                                                                (CDR B0)
                                                                (CAR B1)
                                                                (CDR B1)
                                                                (CAR P1)
                                                                (CDR P1]
                  RESULT)))

(CL:DEFUN CLOSE-KNOTS (KNOTS)
   "Create a closed polygon by adding the first point to the end of the list"
   (LET ((FIRST-KNOT (CAR KNOTS)))
        (APPEND KNOTS (LIST FIRST-KNOT))))

(CL:DEFUN COMPUTE-LINE-HEIGHT (CHARSETS)
   "Compute and return the max line height across all the charsets"
   (for CHARSET in CHARSETS largest (fetch (WEB-CHARSET-METRICS height) of CHARSET)
      finally (RETURN $$EXTREME)))

(CL:DEFUN COMPUTE-MAX-ASCENT (CHARSETS)
   "Compute and return the max max-ascent across all the charsets"
   (for CHARSET in CHARSETS largest (fetch (WEB-CHARSET-METRICS maxAscent) of CHARSET)
      finally (RETURN $$EXTREME)))

(CL:DEFUN COMPUTE-MAX-DESCENT (CHARSETS)
   "Compute and return the max max-descent across all the charsets"
   (for CHARSET in CHARSETS largest (fetch (WEB-CHARSET-METRICS maxDescent) of CHARSET)
      finally (RETURN $$EXTREME)))

(CL:DEFUN CONVERT-TO-BEZIER (POINTS)
   "Convert a list of points on a parametric cubic spline to a roughly equivalent set of Bezier control points"
   [LET ((NUM-POINTS (LENGTH POINTS)))
        (for N from 0 to (- NUM-POINTS 2)
           collect (LET* [(P0 (CL:NTH N POINTS))
                          (P1 (CL:NTH (CL:1+ N)
                                     POINTS))
                          [T0 (CONS (FLOAT (/ (- (CAR P1)
                                                 (CAR P0))
                                              3))
                                    (FLOAT (/ (- (CDR P1)
                                                 (CDR P0))
                                              3]
                          [T1 (CONS (FLOAT (/ (- (CAR P1)
                                                 (CAR P0))
                                              -3))
                                    (FLOAT (/ (- (CDR P1)
                                                 (CDR P0))
                                              -3]
                          [B0 (CONS (+ (CAR P0)
                                       (CAR T0))
                                    (+ (CDR P0)
                                       (CDR T0]
                          (B1 (CONS (+ (CAR P1)
                                       (CAR T1))
                                    (+ (CDR P1)
                                       (CDR T1]
                         (create \BEZIER-POINT
                                p0 _ P0
                                b0 _ B0
                                b1 _ B1
                                p1 _ P1])

(CL:DEFUN HTML.INCHES-TO-POINTS (INCHES)
   "Convert inches to points"

   (* ;; "Assume one inch contains 72 points")

   (FIXR (TIMES 72 INCHES)))
(DECLARE%: EVAL@COMPILE

(PROPRECORD WEB-FONT-METRICS (family size weight style height charsets maxAscent maxDescent lispName
                                    lispFace lispSize))

(PROPRECORD WEB-CHARSET-METRICS (charset maxAscent maxDescent height xccsWidths))
)

(CL:DEFUN MAKE-FONT-METRICS-FILE-NAME (FAMILY SIZE WEIGHT SLOPE EXPANSION)
   "Create the name of the file that holds the metrics for the given font"

   (* ;; "The file name looks like <family>-<size>-<weight>-<slope>-<expansion>.wfm")

   (CL:FORMAT NIL "~A-~d-~A-~A-~A.~A" FAMILY SIZE WEIGHT SLOPE EXPANSION *WEB-FONT-METRICS-EXT*))

(CL:DEFUN MAKE-CHARSET-METRICS-FILE-NAME (FAMILY SIZE WEIGHT SLOPE EXPANSION CHARSET-NUM)
   "Create the name of the file that holds the metrics for the given charset"

   (* ;; "The file name looks like <family>-<size>-<weight>-<slope>-<expansion>-<charset>.wcm")

   (CL:FORMAT NIL "~A-~d-~A-~A-~A-~d.~A" FAMILY SIZE WEIGHT SLOPE EXPANSION CHARSET-NUM 
          *WEB-CHARSET-METRICS-EXT*))

(DEFGLOBALVAR *WEB-FONT-DIRECTORY* "."
   "The directory that holds .wfm and .wcm files")

(CL:DEFCONSTANT *DEFAULT-WEB-FONT-METRICS-FILE-NAME* "font-metrics.data"
   "The usual name of the raw font metrics file we get from the browser")

(CL:DEFCONSTANT *WEB-FONT-EXPANSIONS* '(REGULAR)
                                      "The Web font expansions we support")

(CL:DEFCONSTANT *WEB-FONT-FAMILIES* '((ROBOTO . "r")
                                      (ROBOTO-MONO . "rm")
                                      (NOTO-SANS-DISPLAY . "nsd"))
                                    
                              "A-list of supported Web font names, as atoms, with the CSS class name")

(CL:DEFCONSTANT *WEB-FONT-SIZES* '(10 20)
                                 "Sizes of the Web fonts we support, in points")

(CL:DEFCONSTANT *WEB-FONT-SLOPES* '(REGULAR ITALIC)
                                  "The Web font slopes we support")

(CL:DEFCONSTANT *WEB-FONT-WEIGHTS* '(MEDIUM BOLD)
                                   "The supported Web font weights")

(CL:DEFCONSTANT *BROWSER-FONT-FILE-VERSION* 1
   "The current version of the font-metrics.data file")

(CL:DEFCONSTANT *HTML.DEFAULT-PAGE-SIZE*

   (* ;; "the default size of an HTML page, in points")

   (CONS (HTML.INCHES-TO-POINTS 8.5)
         (HTML.INCHES-TO-POINTS 11.0)))

(CL:DEFCONSTANT HTML.FONTCREATE.DEVICENAME 'HTML)

(CL:DEFCONSTANT HTML.IMAGETYPE 'HTML)

(CL:DEFCONSTANT HTML.STATE.BETWEEN-PAGES :HTML.STATE.BETWEEN-PAGES)

(CL:DEFCONSTANT HTML.STATE.CLOSED :HTML.STATE.CLOSED)

(CL:DEFCONSTANT HTML.STATE.NON-TEXT :HTML.STATE.NON-TEXT)

(CL:DEFCONSTANT HTML.STATE.NON-TEXT-OUTPUT :HTML.STATE.NON-TEXT-OUTPUT)

(CL:DEFCONSTANT HTML.STATE.TEXT-OUTPUT :HTML.STATE.TEXT-OUTPUT)

(CL:DEFCONSTANT HTML.STATES '(HTML.STATE.BETWEEN-PAGES HTML.STATE.NON-TEXT-OUTPUT 
                                    HTML.STATE.TEXT-OUTPUT HTML.STATE.CLOSED)
                            "All HTML imagestream states, for informational use.")

(DEFGLOBALVAR \HTMLSTREAM.FDEV "The FDEV for HTML output")

(CL:DEFUN CHECK-BROWSER-METRICS-FORMAT (VERSION)

   (* ;; "check that the version looks like (format <number>)")

   (if (NOT (AND (LISTP VERSION)
                 (EQ 'format (CAR VERSION))
                 (EQUAL (CADR VERSION)
                        *BROWSER-FONT-FILE-VERSION*)))
       then (ERROR "File does not begin with expected format declaration"))
   VERSION)

(CL:DEFUN CSS-CLASS-FROM (FAMILY SIZE FACE)
   "Compute the CSS class names from the FAMILY, SIZE, and FACE"

   (* ;; "the result will look like %"r10 bold italic%" or a variant")

   [LET* [(FONT-CLASS-NAME-ROOT (CDR (FASSOC FAMILY *WEB-FONT-FAMILIES*)))
          [FONT-AND-SIZE-CLASS-NAME (COND
                                       ((NULL FONT-CLASS-NAME-ROOT)
                                        (ERROR "Unknown Web font family" FAMILY))
                                       (T (CONCAT FONT-CLASS-NAME-ROOT SIZE]
          (WEIGHT-CLASS (COND
                           ((EQ (CAR FACE)
                                'BOLD)
                            "bold")
                           (T NIL)))
          (SLOPE-CLASS (COND
                          ((EQ (CADR FACE)
                               'ITALIC)
                           "italic")
                          (T NIL)))
          (SLOPE-AND-WEIGHT-CLASSES (COND
                                       ((AND (NULL WEIGHT-CLASS)
                                             (NULL SLOPE-CLASS))
                                        "")
                                       ((NULL WEIGHT-CLASS)
                                        SLOPE-CLASS)
                                       ((NULL SLOPE-CLASS)
                                        WEIGHT-CLASS)
                                       (T (CONCAT WEIGHT-CLASS " " SLOPE-CLASS]
         (CONCAT FONT-AND-SIZE-CLASS-NAME (COND
                                             ((EQUAL SLOPE-AND-WEIGHT-CLASSES "")
                                              "")
                                             (T (CONCAT " " SLOPE-AND-WEIGHT-CLASSES])

(CL:DEFUN \HTML.READ-CHARSET-METRICS (FAMILY SIZE FACE CHARSET-NUM)
   "Read a file containing a charset's metrics and return the WEB-CHARSET-METRICS"
   (LET* [(WEIGHT (fetch (WEB-FONT-FACE weight) of FACE))
          (SLOPE (fetch (WEB-FONT-FACE slope) of FACE))
          (EXPANSION (fetch (WEB-FONT-FACE expansion) of FACE))
          (FILE-NAME (PACKFILENAME.STRING 'DIRECTORY *WEB-FONT-DIRECTORY* 'NAME
                            (MAKE-CHARSET-METRICS-FILE-NAME FAMILY SIZE WEIGHT SLOPE EXPANSION 
                                   CHARSET-NUM]
         (CL:WITH-OPEN-STREAM (IN (OPENSTREAM FILE-NAME 'INPUT))
                (CHECK-BROWSER-METRICS-FORMAT (READ IN))
                (LET* ((CHARSET (READ IN))
                       (HEIGHT (fetch (WEB-CHARSET-METRICS height) of CHARSET))
                       (MAX-ASCENT (fetch (WEB-CHARSET-METRICS maxAscent) of CHARSET))
                       (MAX-DESCENT (fetch (WEB-CHARSET-METRICS maxDescent) of CHARSET))
                       (WIDTHS (fetch (WEB-CHARSET-METRICS xccsWidths) of CHARSET)))
                      (CL:FORMAT T "charset family: ~A face: ~A size: ~A height: ~A charset: ~d~%%" 
                             FAMILY FACE SIZE HEIGHT CHARSET-NUM)
                      CHARSET))))

(CL:DEFUN \HTML.READ-FONT-METRICS (FAMILY FACE SIZE)
   "Read the font metrics file and return the WEB-FONT-DESCR"
   (LET* [(WEIGHT (fetch (WEB-FONT-FACE weight) of FACE))
          (SLOPE (fetch (WEB-FONT-FACE slope) of FACE))
          (EXPANSION (fetch (WEB-FONT-FACE expansion) of FACE))
          (FILE-NAME (PACKFILENAME.STRING 'DIRECTORY *WEB-FONT-DIRECTORY* 'NAME
                            (MAKE-FONT-METRICS-FILE-NAME FAMILY SIZE WEIGHT SLOPE EXPANSION]
         (CL:WITH-OPEN-STREAM (IN (OPENSTREAM FILE-NAME 'INPUT))
                (CHECK-BROWSER-METRICS-FORMAT (READ IN))
                (LET* ((DESCR (READ IN))
                       (FAMILY (fetch (WEB-FONT-DESCR name) of DESCR))
                       (FACE (fetch (WEB-FONT-DESCR face) of DESCR))
                       (SIZE (fetch (WEB-FONT-DESCR size) of DESCR))
                       (HEIGHT (fetch (WEB-FONT-DESCR height) of DESCR))
                       (MAX-ASCENT (fetch (WEB-FONT-DESCR maxAscent) of DESCR))
                       (MAX-DESCENT (fetch (WEB-FONT-DESCR maxDescent) of DESCR))
                       (CHARSETS (fetch (WEB-FONT-DESCR charsets) of DESCR)))
                      (CL:FORMAT T "font: ~A face: ~A size: ~A height: ~A #charsets: ~d~%%" FAMILY 
                             FACE SIZE HEIGHT MAX-ASCENT MAX-DESCENT CHARSETS)
                      DESCR))))

(CL:DEFSTRUCT (HTML.IMAGEDATA (:CONC-NAME \HTML-))
   "Private data for HTMLSTREAMs"
   BACKING-STREAM
   FONT
   (CHARSET \DEFAULTCHARSET)
   CLIPPING-REGION
   (SPACE-FACTOR 1.0)
   IMAGE-OPERATION BG-COLOR FG-COLOR (SCALE 1.0)
   (PAGE-NUM 0)
   (X-POSITION 0)
   (Y-POSITION 0)
   (LEFT-MARGIN 0)
   (TOP-MARGIN 1024)
   (RIGHT-MARGIN 1024)
   (BOTTOM-MARGIN 0)
   (LINEFEED 12)
   (STATE HTML.STATE.BETWEEN-PAGES)
   PAGE-HEIGHT PAGE-WIDTH TITLE)

(CL:DEFSTRUCT (HTML.FONTINFO (:CONC-NAME \HTMLFONT-))
   "Private data for an HTML FONTDESCRIPTOR"
   (CHARSETS NIL)
   (CSS-CLASS NIL))

(DEFMACRO with-htmldata ((DATA-VAR-NAME STREAM)
                         &BODY
                         (BODY DECLS ENV))
   `(LET [(,DATA-VAR-NAME (fetch (STREAM IMAGEDATA) of ,STREAM]
         ,@DECLS
         ,@BODY))

(DEFMACRO CHECK-OPEN (STREAM)
   `[with-htmldata (DATA ,STREAM)
           (COND
              ((EQ (\HTML-STATE DATA)
                   HTML.STATE.CLOSED)
               (ERROR "HTMLSTREAM is in state CLOSED"])

(CL:DEFUN HTML.OUTPUT-GRAPHICS (STREAM)
   "We're going to do some graphics now"
   (with-htmldata (DATA STREAM)
          (\HTML.MAYBE-START-PAGE DATA STREAM)
          (SELECTC (\HTML-STATE DATA)
              (HTML.STATE.NON-TEXT-OUTPUT                    (* ; "this is the state we need")
                   )
              (HTML.STATE.TEXT-OUTPUT                        (* ; "end the text section")
                   (printout (\HTML-BACKING-STREAM DATA)
                          "</text>" T))
              NIL)

          (* ;; "finally")

          (CL:SETF (\HTML-STATE DATA)
                 HTML.STATE.NON-TEXT-OUTPUT)))

(CL:DEFUN HTML.OUTPUT-TEXT (STREAM)
   "We're being asked to write text"
   (with-htmldata (DATA STREAM)
          (\HTML.MAYBE-START-PAGE DATA STREAM)
          (LET [(FONT-DATA (fetch (FONTDESCRIPTOR OTHERDEVICEFONTPROPS) of (\HTML-FONT DATA]
               (SELECTC (\HTML-STATE DATA)
                   ((LIST HTML.STATE.NON-TEXT-OUTPUT HTML.STATE.BETWEEN-PAGES) 
                                                             (* ; "start a new text section")
                        (printout (\HTML-BACKING-STREAM DATA)
                               "<text class='"
                               (\HTMLFONT-CSS-CLASS FONT-DATA)
                               "' x="
                               (\HTML-X-POSITION DATA)
                               " y="
                               (\HTML.SVG-Y DATA (- (\HTML-Y-POSITION DATA)
                                                    (\HTML.LINEHEIGHT STREAM)))
                               ">" T))
                   (HTML.STATE.TEXT-OUTPUT                   (* ; "continue this text section")
                        )
                   NIL)

               (* ;; "finally")

               (CL:SETF (\HTML-STATE DATA)
                      HTML.STATE.TEXT-OUTPUT))))

(CL:DEFUN \HTML.MAYBE-START-PAGE (DATA STREAM)

   (* ;; "We're going to do output of some sort, so start an SVG stanza if necessary")

   [with-htmldata (DATA STREAM)
          (if (EQ (\HTML-STATE DATA)
                  HTML.STATE.BETWEEN-PAGES)
              then (LET [(BACKING (\HTML-BACKING-STREAM DATA))
                         [PAGE-WIDTH (IABS (- (\HTML-RIGHT-MARGIN DATA)
                                              (\HTML-LEFT-MARGIN DATA]
                         (PAGE-HEIGHT (IABS (- (\HTML-BOTTOM-MARGIN DATA)
                                               (\HTML-TOP-MARGIN DATA]
                        (CL:FORMAT BACKING 
                               "<svg width=%"~d%" height=%"~d%" viewBox=%"~d ~d ~d ~d%">~%%" 
                               PAGE-WIDTH PAGE-HEIGHT (\HTML-LEFT-MARGIN DATA)
                               (\HTML-BOTTOM-MARGIN DATA)
                               PAGE-WIDTH PAGE-HEIGHT)
                        (CL:SETF (\HTML-X-POSITION DATA)
                               (\HTML-LEFT-MARGIN DATA))
                        (CL:SETF (\HTML-Y-POSITION DATA)
                               (\HTML-TOP-MARGIN DATA])

(CL:DEFUN \HTML.END-PAGE (DATA STREAM)
   "End the current page"
   (if (EQ (\HTML-STATE DATA)
           HTML.STATE.TEXT-OUTPUT)
       then (HTML.OUTPUT-GRAPHICS STREAM))
   (CL:INCF (\HTML-PAGE-NUM DATA))
   (HTML.RESET STREAM)
   (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
        (CL:FORMAT BACKING "</svg>~%%"))
   (CL:SETF (\HTML-STATE DATA)
          HTML.STATE.BETWEEN-PAGES))

(CL:DEFUN HTML.WRITE-PREFACE (STREAM)
   "Write the preamble to the file: <html><head>... etc."
   (with-htmldata (DATA STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA))
                (TITLE (\HTML-TITLE DATA)))
               (printout BACKING "<!DOCTYPE HTML>" T)
               (printout BACKING "<html>" T)
               (printout BACKING "<head>" T)
               (printout BACKING "<title>" TITLE "</title>" T)
               (printout BACKING "<link rel=%"preconnect%" href=%"https://fonts.googleapis.com%">" T)
               (printout BACKING 
                      "<link rel=%"preconnect%" href=%"https://fonts.gstatic.com%" crossorigin>" T)
               (printout BACKING "<link href=%"https://fonts.googleapis.com/css2?family=Noto+Sans+Display&family=Roboto&family=Roboto+Mono&display=swap%" rel=%"stylesheet%">"
                      T)
               (printout BACKING "<script>" T)
               (printout BACKING "    const fontSpecs = [" T)
               (printout BACKING "            {family: %"Roboto Mono%", size: %"10pt%"}," T)
               (printout BACKING "            {family: %"Noto Sans Display%", size: %"10pt%"}," T)
               (printout BACKING "            {family: %"Roboto%", size: %"10pt%"}," T)
               (printout BACKING "            {family: %"Roboto Mono%", size: %"20pt%"}," T)
               (printout BACKING "            {family: %"Noto Sans Display%", size: %"20pt%"}," T)
               (printout BACKING "            {family: %"Roboto%", size: %"20pt%"}," T)
               (printout BACKING "    ];" T T)
               (printout BACKING "    function fontFromSpec(font) {" T 
                      "        return font.size + %" %" + font.family;" T "    }" T T)
               (printout BACKING "    const fontLoadPromises = [];" T T)
               (printout BACKING "    for (const spec of fontSpecs) {" T 
                      "        fontLoadPromises.push(document.fonts.load(fontFromSpec(spec)));" T 
                      "    }" T T)
               (printout BACKING 
                  "    Promise.all(fontLoadPromises).then(_ => { console.log('All fonts loaded');});"
                      T)
               (printout BACKING "</script>" T)
               (printout BACKING "<style>" T)

               (* ;; "all space chars in text blocks are significant:")

               (printout BACKING "text { white-space: pre; }" T)
               (printout BACKING ".nsd10 { font-family: 'Noto Sans Display'; font-size: 10pt }" T)
               (printout BACKING ".nsd20 { font-family: 'Noto Sans Display'; font-size: 20pt }" T)
               (printout BACKING ".nsd30 { font-family: 'Noto Sans Display'; font-size: 30pt }" T)
               (printout BACKING ".nsd40 { font-family: 'Noto Sans Display'; font-size: 40pt }" T)
               (printout BACKING ".rm10 { font-family: 'Roboto Mono'; font-size: 10pt }" T)
               (printout BACKING ".rm20 { font-family: 'Roboto Mono'; font-size: 20pt }" T)
               (printout BACKING ".rm30 { font-family: 'Roboto Mono'; font-size: 30pt }" T)
               (printout BACKING ".rm40 { font-family: 'Roboto Mono'; font-size: 40pt }" T)
               (printout BACKING ".r10 { font-family: 'Roboto'; font-size: 10pt }" T)
               (printout BACKING ".r20 { font-family: 'Roboto'; font-size: 20pt }" T)
               (printout BACKING ".r30 { font-family: 'Roboto'; font-size: 30pt }" T)
               (printout BACKING ".r40 { font-family: 'Roboto'; font-size: 40pt }" T)
               (printout BACKING ".bold { font-weight: bold }" T)
               (printout BACKING ".italic { font-style: italic }" T)
               (printout BACKING "</style>" T)
               (printout BACKING "</head>" T)
               (printout BACKING "<body>" T)
               BACKING)))

(CL:DEFUN OPENHTMLSTREAM (FILENAME &OPTIONAL OPTIONS)
   "Open and return an HTML imagestream"
   (LET* ((TITLE (OR (LISTGET OPTIONS 'TITLE)
                     FILENAME))
          (REGION (OR (LISTGET OPTIONS 'REGION)
                      *HTML.DEFAULT-PAGE-SIZE*))
          [BACKING (OPENSTREAM FILENAME 'OUTPUT NIL '((FORMAT :UTF-8]
          (IMAGEOPS (create IMAGEOPS))
          (IMAGEDATA (MAKE-HTML.IMAGEDATA :BACKING-STREAM BACKING :TITLE TITLE :PAGE-WIDTH
                            (CAR REGION)
                            :PAGE-HEIGHT
                            (CDR REGION)))
          (HTMLSTREAM (create STREAM
                             FULLFILENAME _ (FULLNAME BACKING)
                             DEVICE _ \HTMLSTREAM.FDEV
                             ACCESS _ 'OUTPUT
                             OUTCHARFN _ #'HTML.OUTCHARFN
                             STRMBOUTFN _ #'\BUFFERED.BOUT   (* ; "is this right?")
                             IMAGEOPS _ IMAGEOPS
                             USERCLOSEABLE _ T
                             USERVISIBLE _ T
                             IMAGEDATA _ IMAGEDATA)))

         (* ;; "Make the backing file invisible")

         (replace (STREAM USERVISIBLE) of BACKING with NIL)

         (* ;; "install our OUTCHARFN. you can't do this in the create.")

         (replace (STREAM OUTCHARFN) of HTMLSTREAM with #'HTML.OUTCHARFN)

         (* ;; "replace (do not smash!) the stream's IMAGEOPS with ours")

         (replace IMAGEOPS of HTMLSTREAM with IMAGEOPS)

         (* ;; "Set the informational fields")

         (replace IMFONTCREATE of IMAGEOPS with HTML.FONTCREATE.DEVICENAME)
         (replace IMAGETYPE of IMAGEOPS with HTML.IMAGETYPE)

         (* ;; "Set the functions")

         (replace IMCLOSEFN of IMAGEOPS with #'HTML.CLOSEFN)
         (replace IMDRAWLINE of IMAGEOPS with #'HTML.DRAWLINE)
         (replace IMDRAWCURVE of IMAGEOPS with #'HTML.DRAWCURVE)
         (replace IMDRAWCIRCLE of IMAGEOPS with #'HTML.DRAWCIRCLE)
         (replace IMDRAWELLIPSE of IMAGEOPS with #'HTML.DRAWELLIPSE)
         (replace IMFILLPOLYGON of IMAGEOPS with #'HTML.FILLPOLYGON)
         (replace IMDRAWPOLYGON of IMAGEOPS with #'HTML.DRAWPOLYGON)
         (replace IMFILLCIRCLE of IMAGEOPS with #'HTML.FILLCIRCLE)
         (replace IMBLTSHADE of IMAGEOPS with #'HTML.BLTSHADE)
         (replace IMBITBLT of IMAGEOPS with #'HTML.BITBLT)
         (replace IMSCALEDBITBLT of IMAGEOPS with #'HTML.SCALEDBITBLT)
         (replace IMMOVETO of IMAGEOPS with #'HTML.MOVETO)
         (replace IMSTRINGWIDTH of IMAGEOPS with #'HTML.STRINGWIDTH)
         (replace IMCHARWIDTH of IMAGEOPS with #'HTML.CHARWIDTH)
         (replace IMNEWPAGE of IMAGEOPS with #'HTML.NEWPAGE)
         (replace IMTERPRI of IMAGEOPS with #'HTML.TERPRI)
         (replace IMRESET of IMAGEOPS with #'HTML.RESET)
         (replace IMCLIPPINGREGION of IMAGEOPS with #'HTML.CLIPPINGREGION)
         (replace IMXPOSITION of IMAGEOPS with #'HTML.XPOSITION)
         (replace IMYPOSITION of IMAGEOPS with #'HTML.YPOSITION)
         (replace IMFONT of IMAGEOPS with #'HTML.FONT)
         (replace IMLEFTMARGIN of IMAGEOPS with #'HTML.LEFTMARGIN)
         (replace IMRIGHTMARGIN of IMAGEOPS with #'HTML.RIGHTMARGIN)
         (replace IMTOPMARGIN of IMAGEOPS with #'HTML.TOPMARGIN)
         (replace IMBOTTOMMARGIN of IMAGEOPS with #'HTML.BOTTOMMARGIN)
         (replace IMLINEFEED of IMAGEOPS with #'HTML.LINEFEED)
         (replace IMSCALE of IMAGEOPS with #'HTML.SCALE)
         (replace IMSPACEFACTOR of IMAGEOPS with #'HTML.SPACEFACTOR)
         (replace IMOPERATION of IMAGEOPS with #'HTML.OPERATION)
         (replace IMBACKCOLOR of IMAGEOPS with #'HTML.BACKCOLOR)
         (replace IMCOLOR of IMAGEOPS with #'HTML.COLOR)

         (* ;; "Maybe implement these later:")

         (replace IMWRITEPIXEL of IMAGEOPS with #'NILL)
         (replace IMROTATE of IMAGEOPS with #'NILL)
         (replace IMDRAWARC of IMAGEOPS with #'NILL)
         (replace IMTRANSLATE of IMAGEOPS with #'NILL)
         (replace IMSCALE2 of IMAGEOPS with #'NILL)
         (replace IMPUSHSTATE of IMAGEOPS with #'NILL)
         (replace IMPOPSTATE of IMAGEOPS with #'NILL)
         (replace IMDEFAULTSTATE of IMAGEOPS with #'NILL)
         (replace IMCHARWIDTHY of IMAGEOPS with #'NILL)
         (replace IMBITMAPSIZE of IMAGEOPS with #'NILL)

         (* ;; "we can init the font now that the IMAGEOPS are complete")

         (LET* [(USER-FONT (LISTGET OPTIONS 'FONT))
                (DEFAULTFONT (if USER-FONT
                                 then (\COERCEFONTDESC USER-FONT HTMLSTREAM)
                               else (FONTCREATE 'NOTO-SANS-DISPLAY 10 'MRR 0 'HTML]

               (* ;; "Finish initializing the IMAGEDATA")

               (\HTML.INIT-IMAGEDATA HTMLSTREAM DEFAULTFONT)

               (* ;; "write the preface")

               (HTML.WRITE-PREFACE HTMLSTREAM)

               (* ;; "return the stream")

               HTMLSTREAM)))

(CL:DEFUN HTML.BACKCOLOR (STREAM NEW-COLOR)
   (printout T "HTML.BACKCOLOR" T)
   (CHECK-OPEN STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-BG-COLOR DATA)))
               (COND
                  (NEW-COLOR (CL:SETF (\HTML-BG-COLOR DATA)
                                    NEW-COLOR)))
               OLD-VALUE)))

(CL:DEFUN HTML.BITBLT (SOURCEBITMAP SOURCELEFFT SOURCEBOTTOM STREAM DESTINATIONLEFT DESTINATIONBOTTOM
                             WIDTH HEIGHT SOURCETYPE OPERATION TEXTURE CLIPPINGREGION 
                             CLIPPEDSOURCELEFT CLIPPEDSOURCEBOTTOM)
   (printout T "HTML.BITBLT" T))

(CL:DEFUN HTML.BLTSHADE (TEXTURE STREAM DESTINATIONLEFT DESTINATIONBOTTOM WIDTH HEIGHT OPERATION 
                               CLIPPINGREGION)
   (printout T "HTML.BLTSHADE" T))

(CL:DEFUN HTML.BOTTOMMARGIN (STREAM NEW-BOTTOM-MARGIN)
   (printout T "HTML.BOTTOMMARGIN")
   (CHECK-OPEN STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-BOTTOM-MARGIN DATA)))
               (if NEW-BOTTOM-MARGIN
                   then (CL:SETF (\HTML-BOTTOM-MARGIN DATA)
                               NEW-BOTTOM-MARGIN))
               OLD-VALUE)))

(CL:DEFUN HTML.CHARWIDTH (STREAM CHCODE)
   "Character width accessor that obeys space-factors"
   (with-htmldata (DATA STREAM)
          (LET ((CHAR-WIDTH (\FGETCHARWIDTH (\HTML-FONT DATA)
                                   CHCODE))
                (SPACE-FACTOR (\HTML-SPACE-FACTOR DATA)))
               (if (AND (= CHCODE (CHARCODE SPACE))
                        (NOT (= SPACE-FACTOR 1.0)))
                   then (FTIMES SPACE-FACTOR CHAR-WIDTH)
                 else CHAR-WIDTH))))

(CL:DEFUN HTML.CLIPPINGREGION (STREAM NEW-REGION)
   (printout T "HTML.CLIPPINGREGION")
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-CLIPPING-REGION DATA)))
               (COND
                  (NEW-REGION (CL:SETF (\HTML-CLIPPING-REGION DATA)
                                     NEW-REGION)))
               OLD-VALUE)))

(CL:DEFUN HTML.CLOSEFN (STREAM)
   (printout T "HTML.CLOSEFN" T)
   (with-htmldata (DATA STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA)))

               (* ;; " TODO close any open sections (e.g., text)")

               (if (EQ (\HTML-STATE DATA)
                       HTML.STATE.TEXT-OUTPUT)
                   then (HTML.OUTPUT-GRAPHICS STREAM))
               (printout BACKING T "</svg>" T "</body>" T "</html>" T)
               (CLOSEF BACKING)
               (CL:SETF (\HTML-STATE DATA)
                      HTML.STATE.CLOSED))))

(CL:DEFUN HTML.COLOR (STREAM NEW-COLOR)
   (printout T "HTML.COLOR")
   (CHECK-OPEN STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-FG-COLOR DATA)))
               (COND
                  (NEW-COLOR (CL:SETF (\HTML-FG-COLOR DATA)
                                    NEW-COLOR)))
               OLD-VALUE)))

(CL:DEFUN HTML.DRAWCIRCLE (STREAM CENTERX CENTERY RADIUS BRUSH DASHING)
   "Draw a circle"

   (* ;; "TODO implement BRUSH and DASHING")

   (\HTML.FILLCIRCLE STREAM CENTERX CENTERY RADIUS "transparent"))

(CL:DEFUN HTML.DRAWCURVE (STREAM KNOTS CLOSED BRUSH DASHING)
   "Draw a parametric cubic spline curve"

   (* ;; "TODO ignore BRUSH and DASHING for now")

   (* ;; "SVG can draw curves in 3 representations, quadratic Bezier, cubic Bezier, or elliptical arcs.  We will convert KNOTS to cubic Bezier control points.")

   (printout T "HTML.DRAWCURVE" T)
   (CHECK-OPEN STREAM)
   [with-htmldata (DATA STREAM)
          (HTML.OUTPUT-GRAPHICS STREAM)
          (LET [(BACKING (\HTML-BACKING-STREAM DATA))
                (BEZIER-CONTROL-POINTS (CONVERT-TO-BEZIER (if CLOSED
                                                              then (CLOSE-KNOTS KNOTS)
                                                            else KNOTS]
               (CL:FORMAT BACKING "<path fill='none' stroke='black' d='~A' />~%%" (
                                                                         BEZIER-CONTROL-POINTS-TO-SVG
                                                                                   
                                                                                BEZIER-CONTROL-POINTS
                                                                                   ])

(CL:DEFUN HTML.DRAWELLIPSE (STREAM CENTERX CENTERY SEMIMINORRADIUS SEMIMAJORRADIUS ORIENTATION BRUSH
                                  DASHING)
   "Draw an ellipse"

   (* ;; "TODO implement BRUSH and DASHING")

   [with-htmldata (DATA STREAM)
          (HTML.OUTPUT-GRAPHICS STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
               (CL:FORMAT BACKING "<ellipse cx=%"~d%" cy=%"~d%" rx=%"~d%" ry=%"~d%" transform=%"rotate(~d,~d,~d)%" fill=%"transparent%" stroke=%"black%" stroke-width=%"1%"/>~%%"
                      CENTERX (\HTML.SVG-Y DATA CENTERY)
                      SEMIMAJORRADIUS SEMIMINORRADIUS (- ORIENTATION)
                      CENTERX
                      (\HTML.SVG-Y DATA CENTERY])

(CL:DEFUN HTML.DRAWLINE (STREAM X1 Y1 X2 Y2 WIDTH OPERATION COLOR DASHING)
   "Draw a line"

   (* ;; "TODO implement OPERATION, COLOR, and DASHING")

   (with-htmldata (DATA STREAM)
          (HTML.OUTPUT-GRAPHICS STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
               (CL:FORMAT BACKING 
            "<line x1=%"~d%" y1=%"~d%" x2=%"~d%" y2=%"~d%" stroke=%"black%" stroke-width=%"~d%"/>~%%"
                      X1 (\HTML.SVG-Y DATA Y1)
                      X2
                      (\HTML.SVG-Y DATA Y2)
                      (OR WIDTH 1)))
          (HTML.MOVETO STREAM X2 Y2)))

(CL:DEFUN HTML.DRAWPOLYGON (STREAM POINTS CLOSED BRUSH DASHING)
   "Draw an open or closed polygon"

   (* ;; "TODO implement BRUSH and DASHING")

   (CHECK-OPEN STREAM)
   (HTML.OUTPUT-GRAPHICS STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA))
                (DRAWING-TYPE (if CLOSED
                                  then "polygon"
                                else "polyline")))
               (CL:FORMAT BACKING "<~a fill=%"none%" stroke=%"black%" stroke-width=%"1%" points=%"" 
                      DRAWING-TYPE)
               [for POINT in POINTS do (CL:FORMAT BACKING "~d,~d " (CAR POINT)
                                              (\HTML.SVG-Y DATA (CDR POINT]
               (CL:FORMAT BACKING "%"/>~%%"))))

(CL:DEFUN HTML.FILLCIRCLE (STREAM CENTERX CENTERY RADIUS TEXTURE)

   (* ;; "TODO implement TEXTURE")

   (\HTML.FILLCIRCLE STREAM CENTERX CENTERY RADIUS "black"))

(CL:DEFUN HTML.FILLPOLYGON (STREAM POINTS TEXTURE OPERATION WINDING-NUMBER)
   "Fill a closed polygon"

   (* ;; "TODO implement TEXTURE, OPERATION")

   (CHECK-OPEN STREAM)
   (HTML.OUTPUT-GRAPHICS STREAM)
   (with-htmldata (DATA STREAM)
          (LET [(BACKING (\HTML-BACKING-STREAM DATA))
                (FILL-RULE (COND
                              ((ZEROP WINDING-NUMBER)
                               "nonzero")
                              (T "evenodd"]
               (CL:FORMAT BACKING 
             "<polygon fill=%"black%" fill-rule=%"~A%" stroke=%"black%" stroke-width=%"1%" points=%""
                      FILL-RULE)
               [for POINT in POINTS do (CL:FORMAT BACKING "~d,~d " (CAR POINT)
                                              (\HTML.SVG-Y DATA (CDR POINT]
               (CL:FORMAT BACKING "%"/>~%%"))))

(CL:DEFUN HTML.FONT (STREAM NEW-FONT)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-FONT DATA)))
               (COND
                  (NEW-FONT                                  (* ; 
  "NEW-FONT might be a FONTDESCRIPTOR or a list of properties to apply to the current FONTDESCRIPTOR")
                         (SETQ NEW-FONT (OR (\COERCEFONTDESC NEW-FONT STREAM T)
                                            [FONTCOPY OLD-VALUE `(NOERROR T ,@NEW-FONT]
                                            (ERROR "Font not found or illegal parameter")))
                         (CL:SETF (\HTML-FONT DATA)
                                NEW-FONT)
                         (HTML.OUTPUT-GRAPHICS STREAM)))
               OLD-VALUE)))

(CL:DEFUN HTML.LEFTMARGIN (STREAM NEW-LEFT-MARGIN)
   (printout T "HTML.LEFTMARGIN" T)
   (CHECK-OPEN STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-LEFT-MARGIN DATA)))
               (COND
                  (NEW-LEFT-MARGIN (CL:SETF (\HTML-LEFT-MARGIN DATA)
                                          NEW-LEFT-MARGIN)))
               OLD-VALUE)))

(CL:DEFUN HTML.LINEFEED (STREAM NEW-DELTA)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-LINEFEED DATA)))
               (COND
                  (NEW-DELTA (CL:SETF (\HTML-LINEFEED DATA)
                                    NEW-DELTA)))
               OLD-VALUE)))

(CL:DEFUN HTML.MOVETO (STREAM X Y)
   "Move to X, Y"
   (printout T "HTML.MOVETO" T)
   (HTML.OUTPUT-GRAPHICS STREAM)
   (with-htmldata (DATA STREAM)
          (CL:SETF (\HTML-X-POSITION DATA)
                 X)
          (CL:SETF (\HTML-Y-POSITION DATA)
                 Y)))

(CL:DEFUN HTML.NEWPAGE (STREAM)
   (printout T "HTML.NEWPAGE" T))

(CL:DEFUN HTML.OPERATION (STREAM NEW-OPERATION)
   (printout T "HTML.OPERATION" T)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-IMAGE-OPERATION DATA)))
               (COND
                  (NEW-OPERATION (CL:SETF (\HTML-IMAGE-OPERATION DATA)
                                        NEW-OPERATION)))
               OLD-VALUE)))

(CL:DEFUN HTML.OUTCHARFN (STREAM CHCODE)
   "Write a character, which may cause us to write other markup first"
   (CHECK-OPEN STREAM)

   (* ;; "TODO keep track of the current charset in the imagedata")

   (* ;; 
   "Fetch the CHARSETINFO for a given charset from a FONTDESCRIPTOR by calling \GETCHARSETINFO.")

   [with-htmldata (DATA STREAM)
          (LET ((CHARSET (\CHARSET CHCODE))
                (CHAR8CODE (\CHAR8CODE CHCODE))
                (CURRENT-CHARSET (\HTML-CHARSET DATA))
                (BACKING (\HTML-BACKING-STREAM DATA)))
               (HTML.OUTPUT-TEXT STREAM)
               (if (NEQ CHARSET (\HTML-CHARSET DATA))
                   then (\HTML.CHANGECHARSET DATA CHARSET))
               (SELECTC CHCODE
                   ((CHARCODE ^J)                            (* ; "handle LF")
                        (HTML.TERPRI STREAM))
                   ((CHARCODE ^M)                            (* ; "handle CR")
                        (HTML.TERPRI STREAM))
                   ((CHARCODE ^L) 
                        (printout T "new page" T)            (* ; "handle pagefeed")
                        (HTML.NEWPAGE STREAM))
                   (LET* ((CHAR-WIDTH (HTML.CHARWIDTH STREAM CHCODE))
                          (NEW-X-POSITION (+ (\HTML-X-POSITION DATA)
                                             CHAR-WIDTH)))
                         (if (> NEW-X-POSITION (\HTML-RIGHT-MARGIN DATA))
                             then (HTML.TERPRI STREAM)
                           else (CL:SETF (\HTML-X-POSITION DATA)
                                       NEW-X-POSITION))
                         (HTML.OUTPUT-TEXT STREAM)
                         (SELECTC CHCODE
                             ((CHARCODE &) 
                                  (CL:FORMAT BACKING "&amp;"))
                             ((CHARCODE <) 
                                  (CL:FORMAT BACKING "&lt;"))
                             (\OUTCHAR BACKING CHCODE])

(CL:DEFUN HTML.RESET (STREAM)
   (printout T "HTML.RESET" T)
   (with-htmldata (DATA STREAM)
          (CL:SETF (\HTML-X-POSITION DATA)
                 (\HTML-LEFT-MARGIN DATA))
          (CL:SETF (\HTML-Y-POSITION DATA)
                 (\HTML-TOP-MARGIN DATA))
          (CL:SETF (\HTML-STATE DATA)
                 HTML.STATE.NON-TEXT-OUTPUT)))

(CL:DEFUN HTML.RIGHTMARGIN (STREAM NEW-RIGHT-MARGIN)
   (printout T "HTML.RIGHTMARGIN" T)
   (CHECK-OPEN STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-RIGHT-MARGIN DATA)))
               (COND
                  (NEW-RIGHT-MARGIN (CL:SETF (\HTML-RIGHT-MARGIN DATA)
                                           NEW-RIGHT-MARGIN)))
               OLD-VALUE)))

(CL:DEFUN HTML.SCALE (STREAM NEW-SCALE)
   (printout T "HTML.SCALE" T)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-SCALE DATA)))
               (COND
                  (NEW-SCALE (CL:SETF (\HTML-SCALE DATA)
                                    NEW-SCALE)))
               OLD-VALUE)))

(CL:DEFUN HTML.SCALEDBITBLT (SOURCEBITMAP SOURCELEFFT SOURCEBOTTOM STREAM DESTINATIONLEFT 
                                   DESTINATIONBOTTOM WIDTH HEIGHT SOURCETYPE OPERATION TEXTURE 
                                   CLIPPINGREGION CLIPPEDSOURCELEFT CLIPPEDSOURCEBOTTOM SCALE)
   (printout T "HTML.SCALEDBITBLT" T))

(CL:DEFUN HTML.SPACEFACTOR (STREAM NEW-FACTOR)
   (printout T "HTML.SPACEFACTOR" T)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-SPACE-FACTOR DATA)))
               (COND
                  (NEW-FACTOR (CL:SETF (\HTML-SPACE-FACTOR DATA)
                                     NEW-FACTOR)))
               OLD-VALUE)))

(CL:DEFUN HTML.STRINGWIDTH (STREAM STR RDTBL)
   (printout T "HTML.STRINGWIDTH" T)
   0)

(CL:DEFUN HTML.TERPRI (STREAM)
   "Do a newline"
   (CHECK-OPEN STREAM)
   [with-htmldata (DATA STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
               (CL:SETF (\HTML-X-POSITION DATA)
                      (\HTML-LEFT-MARGIN DATA))
               (CL:DECF (\HTML-Y-POSITION DATA)
                      (\HTML-LINEFEED DATA))

               (* ;; "if Y-POSITION overflowed BOTTOM-MARGIN, start a new page")

               (if (< (\HTML-Y-POSITION DATA)
                      (\HTML-BOTTOM-MARGIN DATA))
                   then (\HTML.END-PAGE DATA STREAM)
                 else (HTML.OUTPUT-GRAPHICS STREAM])

(CL:DEFUN HTML.TOPMARGIN (STREAM NEW-TOP-MARGIN)
   (printout T "HTML.TOPMARGIN" T)
   (CHECK-OPEN STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-TOP-MARGIN DATA)))
               (COND
                  (NEW-TOP-MARGIN (CL:SETF (\HTML-TOP-MARGIN DATA)
                                         NEW-TOP-MARGIN)))
               OLD-VALUE)))

(CL:DEFUN HTML.XPOSITION (STREAM NEW-X-POSITION)
   (CHECK-OPEN STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-X-POSITION DATA)))
               (COND
                  (NEW-X-POSITION (CL:SETF (\HTML-X-POSITION DATA)
                                         NEW-X-POSITION)))
               OLD-VALUE)))

(CL:DEFUN HTML.YPOSITION (STREAM NEW-Y-POSITION)
   (CHECK-OPEN STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-Y-POSITION DATA)))
               (COND
                  (NEW-Y-POSITION (CL:SETF (\HTML-Y-POSITION DATA)
                                         NEW-Y-POSITION)))
               OLD-VALUE)))

(CL:DEFUN MAKE-HTML-IMAGETYPE ()
   "Return the IMAGETYPE descriptor for HTML streams."
   `((OPENSTREAM OPENHTMLSTREAM)
     (FONTCREATE \HTML.FONTCREATE)
     (FONTSAVAILABLE \HTML.FONTSAVAILABLE)
     (CREATECHARSET \HTML.CREATECHARSET)))

(CL:DEFUN \HTML.FILLCIRCLE (STREAM CENTERX CENTERY RADIUS COLOR-NAME)

   (* ;; "common code underlying HTML.FILLCIRCLE and HTML.DRAWCIRCLE")

   (with-htmldata (DATA STREAM)
          (HTML.OUTPUT-GRAPHICS STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
               (CL:FORMAT BACKING 
          "<circle cx=%"~d%" cy=%"~d%" r=%"~d%" fill=%"~a%" stroke=%"black%" stroke-width=%"1%"/>~%%"
                      CENTERX (\HTML.SVG-Y DATA CENTERY)
                      RADIUS COLOR-NAME))
          (HTML.MOVETO STREAM CENTERX CENTERY)))

(CL:DEFUN \HTML.INIT-IMAGEDATA (HTMLSTREAM FONT)
   "Finish initializing the stream's IMAGEDATA"
   (with-htmldata (DATA HTMLSTREAM)

          (* ;; "set the font and linefeed delta")

          (CL:SETF (\HTML-FONT DATA)
                 FONT)
          (CL:SETF (\HTML-LINEFEED DATA)
                 (FONTPROP FONT 'HEIGHT))

          (* ;; "set the margins")

          (CL:SETF (\HTML-LEFT-MARGIN DATA)
                 0)
          (CL:SETF (\HTML-RIGHT-MARGIN DATA)
                 (\HTML-PAGE-WIDTH DATA))
          (CL:SETF (\HTML-TOP-MARGIN DATA)
                 (\HTML-PAGE-HEIGHT DATA))
          (CL:SETF (\HTML-BOTTOM-MARGIN DATA)
                 0)
          (CL:SETF (\HTML-Y-POSITION DATA)
                 (\HTML-TOP-MARGIN DATA))))

(CL:DEFUN \HTML.LINEHEIGHT (STREAM)

   (* ;; "TODO implement this")

   12)

(CL:DEFUN \HTML.SVG-Y (DATA MEDLEY-Y)
   "Return the SVG Y-coordinate for a Medley Y coordinate"
   (- (\HTML-TOP-MARGIN DATA)
      MEDLEY-Y))

(CL:DEFUN \HTMLSTREAM.INIT ()

   (* ;; "Initialize the HTMLSTREAM world")

   (DECLARE (GLOBALVARS \HTMLSTREAM.FDEV IMAGESTREAMTYPES *DEFAULT-EXTERNALFORMAT*))
   (SETQ \HTMLSTREAM.FDEV (create FDEV
                                 DEVICENAME _ (LIST 'HTML 'DOCUMENT)
                                 CLOSEFILE _ #'NILL
                                 BOUT _ #'NILL))

   (* ;; "update IMAGESTREAMTYPES")

   (PUTASSOC HTML.FONTCREATE.DEVICENAME (MAKE-HTML-IMAGETYPE)
          IMAGESTREAMTYPES))

(CL:DEFUN \HTML.FONTCREATE (FAMILY SIZE FACE ROTATION DEVICE CHARSET)
   "Create a font for the HTML device"

   (* ;; "FAMILY must be a litatom")

   (* ;; "SIZE is a positive integer number of printer's points")

   (* ;; "FACE = (WEIGHT SLOPE EXPANSION)")

   (* ;; "    WEIGHT = one of BOLD, MEDIUM, LIGHT")

   (* ;; "    SLOPE = one of ITALIC or REGULAR")

   (* ;; "    EXPANSION = one of REGULAR, COMPRESSED, EXPANDED")

   (* ;; "CHARSET is a positive integer or NIL")

   (DECLARE (GLOBALVARS \DEFAULTCHARSET))
   (CL:FORMAT T "\HTML.FONTCREATE ~a ~a ~a ~a ~a ~a~%%" FAMILY SIZE FACE ROTATION DEVICE CHARSET)

   (* ;; 
   "TODO consider handling requests where SIZE is out of range by clamping to the closest valid size")

   (if (NEQ ROTATION 0)
       then (ERROR "We only support ROTATION = 0"))
   (LET* [(FONT-DESCR (\HTML.READ-FONT-METRICS FAMILY FACE SIZE))
          (PRIVATE-FONT-INFO (MAKE-HTML.FONTINFO :CHARSETS (fetch (WEB-FONT-DESCR charsets)
                                                              of FONT-DESCR)
                                    :CSS-CLASS
                                    (CSS-CLASS-FROM FAMILY SIZE FACE]

         (* ;; "also read the metrics for charset CHARSET")

         (AND FONT-DESCR
              (LET* ((CHARSET-DESCR (\HTML.READ-CHARSET-METRICS FAMILY SIZE FACE CHARSET))
                     (CHARSET0-WIDTHS (fetch (WEB-CHARSET-METRICS xccsWidths) of CHARSET-DESCR))
                     (FD (create FONTDESCRIPTOR
                                FONTDEVICE _ DEVICE
                                FONTFAMILY _ FAMILY
                                FONTSIZE _ SIZE
                                FONTFACE _ FACE
                                \SFAscent _ (CENTIPOINTS-TO-POINTS (fetch (WEB-FONT-METRICS maxAscent
                                                                                 ) of FONT-DESCR))
                                \SFDescent _ (CENTIPOINTS-TO-POINTS (fetch (WEB-FONT-METRICS 
                                                                                  maxDescent)
                                                                       of FONT-DESCR))
                                \SFHeight _ (CENTIPOINTS-TO-POINTS (fetch (WEB-FONT-METRICS height)
                                                                      of FONT-DESCR))
                                ROTATION _ 0
                                FONTDEVICESPEC _ (LIST FAMILY SIZE FACE ROTATION DEVICE)
                                \SFFACECODE _ (\FACECODE FACE)
                                OTHERDEVICEFONTPROPS _ PRIVATE-FONT-INFO))
                     (CSINFO (\CREATECHARSET CHARSET FD T)))
                    (for WIDTH in CHARSET0-WIDTHS as CH from 0 to \MAXTHINCHAR
                       do (\FSETWIDTH (fetch (CHARSETINFO WIDTHS) of CSINFO)
                                 CH
                                 (CENTIPOINTS-TO-POINTS WIDTH)))
                    FD))))

(CL:DEFUN \HTML.FONTSAVAILABLE (FAMILY SIZE FACE ROTATION DEVICE)
   "Search for matching fonts for the HTML device"

   (* ;; "any of the fields can be '*.  Ignore ROTATION. FACE = (WEIGHT SLOPE EXPANSION)")

   (* ;; "return a list of fontspecs")
                                                             (* ; "")
   (CL:FORMAT T "\HTML.FONTSAVAILABLE ~a ~a ~a ~a ~a~%%" FAMILY SIZE FACE ROTATION DEVICE 
          *WEB-FONT-METRICS-EXT*)
   (LET* ((FACE-AS-LIST (\FONTFACE FACE))
          (WEIGHT (fetch (WEB-FONT-FACE weight) of FACE-AS-LIST))
          (SLOPE (fetch (WEB-FONT-FACE slope) of FACE-AS-LIST))
          (EXPANSION (fetch (WEB-FONT-FACE expansion) of FACE-AS-LIST))
          (FILE-NAME (MAKE-FONT-METRICS-FILE-NAME FAMILY SIZE WEIGHT SLOPE EXPANSION)))

         (* ;; "TODO: enumerate!")

         FILE-NAME))

(CL:DEFUN \HTML.CREATECHARSET (FAMILY SIZE FACE ROTATION DEVICE CHARSET FONTDESC NOSLUG?)
   (CL:FORMAT T 
          "\HTML.CREATECHARSET fam ~a size ~a face ~a rot ~a dev ~a charset ~a desc ~a NOSLUG? ~a~%%"
          FAMILY SIZE FACE ROTATION DEVICE CHARSET FONTDESC NOSLUG?)
   (LET* ((CSINFO (create CHARSETINFO
                         OFFSETS _ NIL))
          (WIDTHS (fetch (CHARSETINFO WIDTHS) of CSINFO)))

         (* ;; "Make imagewidths point to widths.  Shouldn't matter to anyone, since imagewidths really has to do with bitmaps etc.  But...")

         (replace (CHARSETINFO IMAGEWIDTHS) of CSINFO with WIDTHS)

         (* ;; "TODO look up the appropriate .wcm file and load it into CSINFO")

         (CL:UNLESS (EQ CHARSET 0)
             (for I (AVGCHARWIDTH _ (CHARWIDTH (CHARCODE A)
                                           FONTDESC)) from 0 to 255
                first (CL:WHEN (EQ 0 AVGCHARWIDTH)

                          (* ;; 
    "This is what \AVGCHARWIDTH in FONT does, but we don't have it here.  Just to be extremely safe.")

                          [SETQ AVGCHARWIDTH (MAX 1 (FIXR (FTIMES 0.6 (FONTPROP FONTDESC 'HEIGHT])
                do (\FSETWIDTH WIDTHS I AVGCHARWIDTH)))
         CSINFO))

(CL:DEFUN \HTML.CHANGECHARSET (DATA CHARSET)
   "Set the new character set, creating the charset info if necessary"
   (LET* ((FONT (\HTML-FONT DATA))
          (CSINFO (\GETCHARSETINFO CHARSET FONT)))
         (CL:SETF (\HTML-CHARSET DATA)
                CHARSET)))

(\HTMLSTREAM.INIT)



(* ;; "debugging support")


(CL:DEFUN \CLEAN-FONT-CACHE ()
   "Remove all HTML fonts from \FONTSINCORE"
   (DECLARE (GLOBALVARS \FONTSINCORE))
   (LET [(FAMILIES (MAPCAR *WEB-FONT-FAMILIES* #'(LAMBDA (FAMILY)
                                                   (CAR FAMILY]
        (CL:LABELS [(CLEAN (LIST)
                           (if (NULL LIST)
                               then NIL
                             else (LET ((ELEMENT (CAR LIST)))
                                       (if (MEMB (CAR ELEMENT)
                                                 FAMILIES)
                                           then (CLEAN (CDR LIST))
                                         else (CONS ELEMENT (CLEAN (CDR LIST]
               (SETQ \FONTSINCORE (CLEAN \FONTSINCORE))
               NIL)))
(DECLARE%: DONTCOPY
  (FILEMAP (NIL (2961 4448 (BEZIER-CONTROL-POINTS-TO-SVG 2961 . 4448)) (4450 4639 (CLOSE-KNOTS 4450 . 
4639)) (4641 4896 (COMPUTE-LINE-HEIGHT 4641 . 4896)) (4898 5154 (COMPUTE-MAX-ASCENT 4898 . 5154)) (
5156 5415 (COMPUTE-MAX-DESCENT 5156 . 5415)) (5417 7076 (CONVERT-TO-BEZIER 5417 . 7076)) (7078 7234 (
HTML.INCHES-TO-POINTS 7078 . 7234)) (7511 7854 (MAKE-FONT-METRICS-FILE-NAME 7511 . 7854)) (7856 8256 (
MAKE-CHARSET-METRICS-FILE-NAME 7856 . 8256)) (10388 10777 (CHECK-BROWSER-METRICS-FORMAT 10388 . 10777)
) (10779 12471 (CSS-CLASS-FROM 10779 . 12471)) (12473 13804 (\HTML.READ-CHARSET-METRICS 12473 . 13804)
) (13806 15263 (\HTML.READ-FONT-METRICS 13806 . 15263)) (15864 16096 (with-htmldata 15864 . 16096)) (
16098 16318 (CHECK-OPEN 16098 . 16318)) (16320 16977 (HTML.OUTPUT-GRAPHICS 16320 . 16977)) (16979 
18249 (HTML.OUTPUT-TEXT 16979 . 18249)) (18251 19427 (\HTML.MAYBE-START-PAGE 18251 . 19427)) (19429 
19836 (\HTML.END-PAGE 19429 . 19836)) (19838 23675 (HTML.WRITE-PREFACE 19838 . 23675)) (23677 29269 (
OPENHTMLSTREAM 23677 . 29269)) (29271 29625 (HTML.BACKCOLOR 29271 . 29625)) (29627 29920 (HTML.BITBLT 
29627 . 29920)) (29922 30105 (HTML.BLTSHADE 29922 . 30105)) (30107 30504 (HTML.BOTTOMMARGIN 30107 . 
30504)) (30506 31015 (HTML.CHARWIDTH 30506 . 31015)) (31017 31370 (HTML.CLIPPINGREGION 31017 . 31370))
 (31372 31950 (HTML.CLOSEFN 31372 . 31950)) (31952 32296 (HTML.COLOR 31952 . 32296)) (32298 32514 (
HTML.DRAWCIRCLE 32298 . 32514)) (32516 33754 (HTML.DRAWCURVE 32516 . 33754)) (33756 34503 (
HTML.DRAWELLIPSE 33756 . 34503)) (34505 35139 (HTML.DRAWLINE 34505 . 35139)) (35141 35958 (
HTML.DRAWPOLYGON 35141 . 35958)) (35960 36135 (HTML.FILLCIRCLE 35960 . 36135)) (36137 37011 (
HTML.FILLPOLYGON 36137 . 37011)) (37013 37779 (HTML.FONT 37013 . 37779)) (37781 38167 (HTML.LEFTMARGIN
 37781 . 38167)) (38169 38460 (HTML.LINEFEED 38169 . 38460)) (38462 38751 (HTML.MOVETO 38462 . 38751))
 (38753 38822 (HTML.NEWPAGE 38753 . 38822)) (38824 39181 (HTML.OPERATION 38824 . 39181)) (39183 41230 
(HTML.OUTCHARFN 39183 . 41230)) (41232 41588 (HTML.RESET 41232 . 41588)) (41590 41984 (
HTML.RIGHTMARGIN 41590 . 41984)) (41986 42299 (HTML.SCALE 41986 . 42299)) (42301 42625 (
HTML.SCALEDBITBLT 42301 . 42625)) (42627 42970 (HTML.SPACEFACTOR 42627 . 42970)) (42972 43064 (
HTML.STRINGWIDTH 42972 . 43064)) (43066 43734 (HTML.TERPRI 43066 . 43734)) (43736 44114 (
HTML.TOPMARGIN 43736 . 44114)) (44116 44459 (HTML.XPOSITION 44116 . 44459)) (44461 44804 (
HTML.YPOSITION 44461 . 44804)) (44806 45051 (MAKE-HTML-IMAGETYPE 44806 . 45051)) (45053 45631 (
\HTML.FILLCIRCLE 45053 . 45631)) (45633 46404 (\HTML.INIT-IMAGEDATA 45633 . 46404)) (46406 46490 (
\HTML.LINEHEIGHT 46406 . 46490)) (46492 46639 (\HTML.SVG-Y 46492 . 46639)) (46641 47163 (
\HTMLSTREAM.INIT 46641 . 47163)) (47165 50272 (\HTML.FONTCREATE 47165 . 50272)) (50274 51155 (
\HTML.FONTSAVAILABLE 50274 . 51155)) (51157 52455 (\HTML.CREATECHARSET 51157 . 52455)) (52457 52728 (
\HTML.CHANGECHARSET 52457 . 52728)) (52789 53589 (\CLEAN-FONT-CACHE 52789 . 53589)))))
STOP

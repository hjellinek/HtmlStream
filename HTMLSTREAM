(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)

(FILECREATED "26-Jan-2025 13:53:23" {DSK}<Users>hjellinek>Projects>TrySVG>Lisp>HTMLSTREAM.;21 65754  

      :CHANGES-TO (FUNCTIONS HTML.WRITE-PREFACE HTML.OUTCHARFN HTML.CHARWIDTH)

      :PREVIOUS-DATE "24-Jan-2025 16:38:32" {DSK}<Users>hjellinek>Projects>TrySVG>Lisp>HTMLSTREAM.;19
)


(PRETTYCOMPRINT HTMLSTREAMCOMS)

(RPAQQ HTMLSTREAMCOMS
       ((FILES XCCS-UNICODE-DUMPER BASE64 U-PNG)
        (VARIABLES *CENTIPOINTS-PER-POINT*)
        (RECORDS \BEZIER-POINT WEB-FONT-METRICS WEB-CHARSET-METRICS)
        (FUNCTIONS BEZIER-CONTROL-POINTS-TO-SVG CLOSE-KNOTS COMPUTE-LINE-HEIGHT COMPUTE-MAX-ASCENT 
               COMPUTE-MAX-DESCENT CONVERT-TO-BEZIER HTML.INCHES-TO-POINTS HTML.INCHES-TO-CENTIPOINTS
               CP-TO-P ICP-TO-P P-TO-CP PIXEL-TO-PT PT-TO-PIXEL \HTML.SVG-Y)
        (FUNCTIONS MAKE-FONT-METRICS-FILE-NAME MAKE-CHARSET-METRICS-FILE-NAME)
        (VARIABLES *WEB-FONT-DIRECTORY* *WEB-FONT-MAPPINGS* *DEFAULT-WEB-FONT-METRICS-FILE-NAME* 
               *WEB-FONT-EXPANSIONS* *WEB-FONT-FAMILIES* *WEB-FONT-FAMILY-NAMES* *WEB-FONT-SIZES* 
               *WEB-FONT-SLOPES* *WEB-FONT-WEIGHTS* *WEB-CHARSET-METRICS-EXT* 
               *WEB-CHARSET-METRICS-DOT-EXT* *WEB-FONT-METRICS-EXT* *WEB-FONT-METRICS-DOT-EXT*)
        (VARIABLES *BROWSER-FONT-FILE-VERSION* *HTML.DEFAULT-PAGE-SIZE* HTML.FONTCREATE.DEVICENAME 
               HTML.IMAGETYPE HTML.STATE.BETWEEN-PAGES HTML.STATE.CLOSED HTML.STATE.NON-TEXT 
               HTML.STATE.NON-TEXT-OUTPUT HTML.STATE.TEXT-OUTPUT HTML.STATES \HTMLSTREAM.FDEV 
               *XCCS-KNOWN-CHARSETS* *XCCS-UNDEFINED-CHARCODE*)
        (FUNCTIONS CHECK-BROWSER-METRICS-FORMAT CSS-CLASS-FROM \HTML.READ-FONT-METRICS 
               \HTML.READ-CHARSET-METRICS)
        (STRUCTURES HTML.IMAGEDATA HTML.FONTINFO)
        (FUNCTIONS with-htmldata)
        (FUNCTIONS HTML.OUTPUT-GRAPHICS HTML.OUTPUT-TEXT \HTML.MAYBE-START-PAGE \HTML.END-PAGE 
               HTML.WRITE-PREFACE)
        (FUNCTIONS OPENHTMLSTREAM HTML.BACKCOLOR HTML.BITBLT HTML.BLTSHADE HTML.BOTTOMMARGIN 
               HTML.CHARWIDTH HTML.CLIPPINGREGION HTML.CLOSEFN HTML.COLOR HTML.DRAWCIRCLE 
               HTML.DRAWCURVE HTML.DRAWELLIPSE HTML.DRAWLINE HTML.DRAWPOLYGON HTML.FILLCIRCLE 
               HTML.FILLPOLYGON HTML.FONT HTML.LEFTMARGIN HTML.LINEFEED HTML.MOVETO HTML.NEWPAGE 
               HTML.OPERATION HTML.OUTCHARFN HTML.RESET HTML.RIGHTMARGIN HTML.SCALE HTML.SCALEDBITBLT
               HTML.SPACEFACTOR HTML.TERPRI HTML.TOPMARGIN HTML.XPOSITION HTML.YPOSITION 
               MAKE-HTML-IMAGETYPE \HTML.FILLCIRCLE \HTML.INIT-IMAGEDATA \HTMLSTREAM.INIT)
        (FUNCTIONS WRITE-BASE64-PNG CONVERT-TO-PNG-BASE64)
        (FUNCTIONS \HTML.FONTCREATE \HTML.FONTSAVAILABLE \HTML.CREATECHARSET \HTML.CHANGECHARSET 
               MAKE-CHARSET-BIT-ARRAY KNOWN-CHARSET? \HTML.WARN-CHARSET)
        (P (\HTMLSTREAM.INIT))
        
        (* ;; "PRINTFILETYPES-related")

        (VARIABLES *HTML-FILE-EXTENSIONS* *HTML-FINGERPRINTS*)
        (FUNCTIONS HTMLFILEP MAKE-HTML-FROM-TEXT MAKE-HTML-FROM-TEDIT)
        [ADDVARS (PRINTFILETYPES (HTML (TEST HTMLFILEP)
                                       (EXTENSION (HTML))
                                       (CONVERSION (TEXT MAKE-HTML-FROM-TEXT TEDIT 
                                                         MAKE-HTML-FROM-TEDIT]
        
        (* ;; "debugging support")

        (FUNCTIONS \CLEAN-FONT-CACHE DO-NOT)))

(FILESLOAD XCCS-UNICODE-DUMPER BASE64 U-PNG)

(CL:DEFCONSTANT *CENTIPOINTS-PER-POINT* 100
   "There are 100 centipoints per point, by definition and by golly!")
(DECLARE%: EVAL@COMPILE

(PROPRECORD \BEZIER-POINT (p0 p1 b0 b1))

(PROPRECORD WEB-FONT-METRICS (family size weight style height charsets maxAscent maxDescent lispName
                                    lispFace lispSize))

(PROPRECORD WEB-CHARSET-METRICS (charset maxAscent maxDescent height xccsWidths))
)

(CL:DEFUN BEZIER-CONTROL-POINTS-TO-SVG (BEZIER-CONTROL-POINTS)
   "Convert the Bezier control points to SVG path format. Return NIL if the list is NIL"
   (if BEZIER-CONTROL-POINTS
       then (LET* [(START-POINT (fetch (\BEZIER-POINT p0) of (CAR BEZIER-CONTROL-POINTS)))
                   (RESULT (CL:FORMAT NIL "M ~d,~d " (CAR START-POINT)
                                  (CDR START-POINT]
                  [for CTRL-PT in (CDR BEZIER-CONTROL-POINTS) first (SETQ RESULT (CONCAT RESULT "C ")
                                                                     )
                     do (LET ((P0 (fetch (\BEZIER-POINT p0) of CTRL-PT))
                              (B0 (fetch (\BEZIER-POINT b0) of CTRL-PT))
                              (B1 (fetch (\BEZIER-POINT b1) of CTRL-PT))
                              (P1 (fetch (\BEZIER-POINT p1) of CTRL-PT)))
                             (SETQ RESULT (CONCAT RESULT (CL:FORMAT NIL "~d,~d ~d,~d ~d,~d "
                                                                (CAR B0)
                                                                (CDR B0)
                                                                (CAR B1)
                                                                (CDR B1)
                                                                (CAR P1)
                                                                (CDR P1]
                  RESULT)))

(CL:DEFUN CLOSE-KNOTS (KNOTS)
   "Create a closed polygon by adding the first point to the end of the list"
   (LET ((FIRST-KNOT (CAR KNOTS)))
        (APPEND KNOTS (LIST FIRST-KNOT))))

(CL:DEFUN COMPUTE-LINE-HEIGHT (CHARSETS)
   "Compute and return the max line height across all the charsets"
   (for CHARSET in CHARSETS largest (fetch (WEB-CHARSET-METRICS height) of CHARSET)
      finally (RETURN $$EXTREME)))

(CL:DEFUN COMPUTE-MAX-ASCENT (CHARSETS)
   "Compute and return the max max-ascent across all the charsets"
   (for CHARSET in CHARSETS largest (fetch (WEB-CHARSET-METRICS maxAscent) of CHARSET)
      finally (RETURN $$EXTREME)))

(CL:DEFUN COMPUTE-MAX-DESCENT (CHARSETS)
   "Compute and return the max max-descent across all the charsets"
   (for CHARSET in CHARSETS largest (fetch (WEB-CHARSET-METRICS maxDescent) of CHARSET)
      finally (RETURN $$EXTREME)))

(CL:DEFUN CONVERT-TO-BEZIER (POINTS)
   "Convert a list of points on a parametric cubic spline to a roughly equivalent set of Bezier control points"
   [LET ((NUM-POINTS (LENGTH POINTS)))
        (for N from 0 to (- NUM-POINTS 2)
           collect (LET* [(P0 (CL:NTH N POINTS))
                          (P1 (CL:NTH (CL:1+ N)
                                     POINTS))
                          [T0 (CONS (FLOAT (/ (- (CAR P1)
                                                 (CAR P0))
                                              3))
                                    (FLOAT (/ (- (CDR P1)
                                                 (CDR P0))
                                              3]
                          [T1 (CONS (FLOAT (/ (- (CAR P1)
                                                 (CAR P0))
                                              -3))
                                    (FLOAT (/ (- (CDR P1)
                                                 (CDR P0))
                                              -3]
                          [B0 (CONS (+ (CAR P0)
                                       (CAR T0))
                                    (+ (CDR P0)
                                       (CDR T0]
                          (B1 (CONS (+ (CAR P1)
                                       (CAR T1))
                                    (+ (CDR P1)
                                       (CDR T1]
                         (create \BEZIER-POINT
                                p0 _ P0
                                b0 _ B0
                                b1 _ B1
                                p1 _ P1])

(CL:DEFUN HTML.INCHES-TO-POINTS (INCHES)
   "Convert inches to points"

   (* ;; "Assume one inch contains 72 points")

   (FIXR (TIMES 72 INCHES)))

(CL:DEFUN HTML.INCHES-TO-CENTIPOINTS (INCHES)
   (FIXR (TIMES 72 *CENTIPOINTS-PER-POINT* INCHES)))

(DEFMACRO CP-TO-P (CENTIPOINTS)
   `(FQUOTIENT ,CENTIPOINTS *CENTIPOINTS-PER-POINT*))

(DEFMACRO ICP-TO-P (CENTIPOINTS)

   (* ;; "convert centipoints to an integer number of points")

   `(FIXR (FQUOTIENT ,CENTIPOINTS *CENTIPOINTS-PER-POINT*)))

(DEFMACRO P-TO-CP (POINTS)
   `(FTIMES ,POINTS *CENTIPOINTS-PER-POINT*))

(CL:DEFUN PIXEL-TO-PT (PIXELS)
   "Convert some number of pixels to that number of points"

   (* ;; "96 pixels = 72 points")

   (FTIMES 0.75 PIXELS))

(CL:DEFUN PT-TO-PIXEL (POINTS)
   "Convert some number of points to that number of pixels"

   (* ;; "96 pixels = 72 points")

   (FTIMES 1.333 POINTS))

(CL:DEFUN \HTML.SVG-Y (DATA MEDLEY-Y)
   "Return the SVG Y-coordinate for a Medley Y coordinate"
   (- (\HTML-PAGE-HEIGHT DATA)
      MEDLEY-Y))

(CL:DEFUN MAKE-FONT-METRICS-FILE-NAME (FAMILY SIZE WEIGHT SLOPE EXPANSION)
   "Create the name of the file that holds the metrics for the given font"

   (* ;; "The file name looks like <family>-<size>-<weight>-<slope>-<expansion>.wfm")

   (CL:FORMAT NIL "~A-~d-~A-~A-~A.~A" FAMILY SIZE WEIGHT SLOPE EXPANSION *WEB-FONT-METRICS-EXT*))

(CL:DEFUN MAKE-CHARSET-METRICS-FILE-NAME (FAMILY SIZE WEIGHT SLOPE EXPANSION CHARSET-NUM)
   "Create the name of the file that holds the metrics for the given charset"

   (* ;; "The file name looks like <family>-<size>-<weight>-<slope>-<expansion>-<charset>.wcm")

   (CL:FORMAT NIL "~A-~d-~A-~A-~A-~d.~A" FAMILY SIZE WEIGHT SLOPE EXPANSION CHARSET-NUM 
          *WEB-CHARSET-METRICS-EXT*))

(DEFGLOBALVAR *WEB-FONT-DIRECTORY* "."
   "The directory that holds .wfm and .wcm files")

(DEFGLOBALVAR *WEB-FONT-MAPPINGS*
   '((HELVETICA . NOTO-SANS)
     (HELVETICAD . NOTO-SANS-DISPLAY)
     (TIMESROMAN . NOTO-SERIF)
     (TIMESROMAND . NOTO-SERIF-DISPLAY)
     (COURIER . NOTO-SANS-MONO)
     (GACHA . NOTO-SANS-MONO)
     (CLASSIC . NOTO-SERIF)
     (MODERN . NOTO-SANS)
     (CREAM . NOTO-SANS)
     (TERMINAL . NOTO-SANS-MONO)
     (LOGO . NOTO-SANS-MONO)
     (OPTIMA . NOTO-SERIF)
     (TITAN . NOTO-SANS-MONO))
   "Map common font families to Web font families")

(CL:DEFCONSTANT *DEFAULT-WEB-FONT-METRICS-FILE-NAME* "font-metrics.data"
   "The usual name of the raw font metrics file we get from the browser")

(CL:DEFCONSTANT *WEB-FONT-EXPANSIONS* '(REGULAR)
                                      "The Web font expansions we support")

(CL:DEFCONSTANT *WEB-FONT-FAMILIES* '((NOTO-SANS . "ns")
                                      (NOTO-SANS-MONO . "nsm")
                                      (NOTO-SANS-DISPLAY . "nsd")
                                      (NOTO-SERIF . "nsf"))
                                    
                              "A-list of supported Web font names, as atoms, with the CSS class name")

(CL:DEFCONSTANT *WEB-FONT-FAMILY-NAMES* '("Noto Sans" "Noto Sans Mono" "Noto Sans Display" 
                                                "Noto Serif")

                                        (* ;; "keep this synchronized with *WEB-FONT-FAMILIES*")

                                        
                               "The names of the font families we're using, suitable for use in CSS.")

(CL:DEFCONSTANT *WEB-FONT-SIZES* '(8 10 12 14 16 18 20 24 32 40 92)
                                 "Sizes of the Web fonts we support, in points")

(CL:DEFCONSTANT *WEB-FONT-SLOPES* '(REGULAR ITALIC)
                                  "The Web font slopes we support")

(CL:DEFCONSTANT *WEB-FONT-WEIGHTS* '(MEDIUM BOLD)
                                   "The supported Web font weights")

(CL:DEFCONSTANT *WEB-CHARSET-METRICS-EXT* "wcm"
   "The filename extension for files that describe a charset's metrics")

(CL:DEFCONSTANT *WEB-CHARSET-METRICS-DOT-EXT* (CONCAT "." *WEB-CHARSET-METRICS-EXT*)
                                              
       "The filename extension for files that describe a charset's metrics, prepended with a dot (.)")

(CL:DEFCONSTANT *WEB-FONT-METRICS-EXT* "wfm"
   "The file extension for a web font metrics file")

(CL:DEFCONSTANT *WEB-FONT-METRICS-DOT-EXT* (CONCAT "." *WEB-FONT-METRICS-EXT*)
                                           
                           "The file extension for a web font metrics file, prepended with a dot (.)")

(CL:DEFCONSTANT *BROWSER-FONT-FILE-VERSION* 1
   "The current version of the font-metrics.data file")

(CL:DEFCONSTANT *HTML.DEFAULT-PAGE-SIZE*

   (* ;; "the default size of an HTML page, in centipoints")

   (CONS (HTML.INCHES-TO-CENTIPOINTS 8.5)
         (HTML.INCHES-TO-CENTIPOINTS 11.0)))

(CL:DEFCONSTANT HTML.FONTCREATE.DEVICENAME 'HTML)

(CL:DEFCONSTANT HTML.IMAGETYPE 'HTML)

(CL:DEFCONSTANT HTML.STATE.BETWEEN-PAGES :HTML.STATE.BETWEEN-PAGES)

(CL:DEFCONSTANT HTML.STATE.CLOSED :HTML.STATE.CLOSED)

(CL:DEFCONSTANT HTML.STATE.NON-TEXT :HTML.STATE.NON-TEXT)

(CL:DEFCONSTANT HTML.STATE.NON-TEXT-OUTPUT :HTML.STATE.NON-TEXT-OUTPUT)

(CL:DEFCONSTANT HTML.STATE.TEXT-OUTPUT :HTML.STATE.TEXT-OUTPUT)

(CL:DEFCONSTANT HTML.STATES '(HTML.STATE.BETWEEN-PAGES HTML.STATE.NON-TEXT-OUTPUT 
                                    HTML.STATE.TEXT-OUTPUT HTML.STATE.CLOSED)
                            "All HTML imagestream states, for informational use.")

(DEFGLOBALVAR \HTMLSTREAM.FDEV "The FDEV for HTML output")

(CL:DEFCONSTANT *XCCS-KNOWN-CHARSETS*
   '(0 33 34 35 36 37 38 39 40 224 225 226 227 228 238 239 240 241)
   "The set of defined XCCS character sets")

(CL:DEFCONSTANT *XCCS-UNDEFINED-CHARCODE* 61639
   "XCCS defines 0xF0C7 (61639) as 'Replacement symbol (for undefined code points)'")

(CL:DEFUN CHECK-BROWSER-METRICS-FORMAT (VERSION)

   (* ;; "check that the version looks like (format <number>)")

   (if (NOT (AND (LISTP VERSION)
                 (EQ 'format (CAR VERSION))
                 (EQUAL (CADR VERSION)
                        *BROWSER-FONT-FILE-VERSION*)))
       then (ERROR "File does not begin with expected format declaration"))
   VERSION)

(CL:DEFUN CSS-CLASS-FROM (FAMILY SIZE FACE)
   "Compute the CSS class names from the FAMILY, SIZE, and FACE"

   (* ;; "the result will look like %"nsd10 bold italic%" or a variant")

   [LET* [(FONT-CLASS-NAME-ROOT (CDR (FASSOC FAMILY *WEB-FONT-FAMILIES*)))
          [FONT-AND-SIZE-CLASS-NAME (COND
                                       ((NULL FONT-CLASS-NAME-ROOT)
                                        (ERROR "Unknown Web font family" FAMILY))
                                       (T (CONCAT FONT-CLASS-NAME-ROOT SIZE]
          (WEIGHT-CLASS (COND
                           ((EQ (CAR FACE)
                                'BOLD)
                            "bold")
                           (T NIL)))
          (SLOPE-CLASS (COND
                          ((EQ (CADR FACE)
                               'ITALIC)
                           "italic")
                          (T NIL)))
          (SLOPE-AND-WEIGHT-CLASSES (COND
                                       ((AND (NULL WEIGHT-CLASS)
                                             (NULL SLOPE-CLASS))
                                        "")
                                       ((NULL WEIGHT-CLASS)
                                        SLOPE-CLASS)
                                       ((NULL SLOPE-CLASS)
                                        WEIGHT-CLASS)
                                       (T (CONCAT WEIGHT-CLASS " " SLOPE-CLASS]
         (CONCAT FONT-AND-SIZE-CLASS-NAME (COND
                                             ((EQUAL SLOPE-AND-WEIGHT-CLASSES "")
                                              "")
                                             (T (CONCAT " " SLOPE-AND-WEIGHT-CLASSES])

(CL:DEFUN \HTML.READ-FONT-METRICS (FAMILY FACE SIZE)
   "Read the font metrics file and return the WEB-FONT-DESCR"
   (LET* ((WEIGHT (fetch (WEB-FONT-FACE weight) of FACE))
          (SLOPE (fetch (WEB-FONT-FACE slope) of FACE))
          (EXPANSION (fetch (WEB-FONT-FACE expansion) of FACE))
          (FILE-NAME (PACKFILENAME.STRING 'DIRECTORY *WEB-FONT-DIRECTORY* 'NAME
                            (MAKE-FONT-METRICS-FILE-NAME FAMILY SIZE WEIGHT SLOPE EXPANSION)))
          (*PACKAGE* (CL:FIND-PACKAGE "IL")))
         (CL:WITH-OPEN-STREAM (IN (OPENSTREAM FILE-NAME 'INPUT))
                (CHECK-BROWSER-METRICS-FORMAT (READ IN))
                (LET* ((DESCR (READ IN))
                       (FAMILY (fetch (WEB-FONT-DESCR name) of DESCR))
                       (FACE (fetch (WEB-FONT-DESCR face) of DESCR))
                       (SIZE (fetch (WEB-FONT-DESCR size) of DESCR))
                       (HEIGHT (fetch (WEB-FONT-DESCR height) of DESCR))
                       (MAX-ASCENT (fetch (WEB-FONT-DESCR maxAscent) of DESCR))
                       (MAX-DESCENT (fetch (WEB-FONT-DESCR maxDescent) of DESCR))
                       (CHARSETS (fetch (WEB-FONT-DESCR charsets) of DESCR)))
                      (CL:FORMAT T "font: ~A face: ~A size: ~A height: ~A #charsets: ~d~%%" FAMILY 
                             FACE SIZE HEIGHT (LENGTH CHARSETS))
                      DESCR))))

(CL:DEFUN \HTML.READ-CHARSET-METRICS (FAMILY SIZE FACE CHARSET-NUM)
   "Read a file containing a charset's metrics and return the WEB-CHARSET-METRICS"
   (LET* ((WEIGHT (fetch (WEB-FONT-FACE weight) of FACE))
          (SLOPE (fetch (WEB-FONT-FACE slope) of FACE))
          (EXPANSION (fetch (WEB-FONT-FACE expansion) of FACE))
          (FILE-NAME (PACKFILENAME.STRING 'DIRECTORY *WEB-FONT-DIRECTORY* 'NAME
                            (MAKE-CHARSET-METRICS-FILE-NAME FAMILY SIZE WEIGHT SLOPE EXPANSION 
                                   CHARSET-NUM)))
          (*PACKAGE* (CL:FIND-PACKAGE "IL")))
         (CL:WITH-OPEN-STREAM (IN (OPENSTREAM FILE-NAME 'INPUT))
                (CHECK-BROWSER-METRICS-FORMAT (READ IN))
                (LET* ((CHARSET (READ IN))
                       (HEIGHT (fetch (WEB-CHARSET-METRICS height) of CHARSET))
                       (MAX-ASCENT (fetch (WEB-CHARSET-METRICS maxAscent) of CHARSET))
                       (MAX-DESCENT (fetch (WEB-CHARSET-METRICS maxDescent) of CHARSET))
                       (WIDTHS (fetch (WEB-CHARSET-METRICS xccsWidths) of CHARSET)))
                      (CL:FORMAT T "charset family: ~A face: ~A size: ~A height: ~A charset: ~d~%%" 
                             FAMILY FACE SIZE HEIGHT CHARSET-NUM)
                      CHARSET))))

(CL:DEFSTRUCT (HTML.IMAGEDATA (:CONC-NAME \HTML-))
   "Private data for HTMLSTREAMs"
   BACKING-STREAM
   FONT
   CLIPPING-REGION
   (SPACE-FACTOR 1.0)
   IMAGE-OPERATION BG-COLOR FG-COLOR (SCALE *CENTIPOINTS-PER-POINT*)
   (PAGE-NUM 0)
   (X-POSITION 0)
   (Y-POSITION 0)
   (LEFT-MARGIN 0)
   (TOP-MARGIN 1024)
   (RIGHT-MARGIN 1024)
   (BOTTOM-MARGIN 0)
   (LINEFEED 12)
   (STATE HTML.STATE.BETWEEN-PAGES)
   PAGE-HEIGHT PAGE-WIDTH TITLE)

(CL:DEFSTRUCT (HTML.FONTINFO (:CONC-NAME \HTMLFONT-))
   "Private data for an HTML FONTDESCRIPTOR"
   (CHARSETS NIL)
   (CSS-CLASS NIL)
   (WARNED-CHARSETS NIL))

(DEFMACRO with-htmldata ((DATA-VAR-NAME STREAM)
                         &BODY
                         (BODY DECLS ENV))
   `(LET [(,DATA-VAR-NAME (fetch (STREAM IMAGEDATA) of ,STREAM]
         ,@DECLS
         ,@BODY))

(CL:DEFUN HTML.OUTPUT-GRAPHICS (STREAM)
   "We're going to do some graphics now"
   (with-htmldata (DATA STREAM)
          (\HTML.MAYBE-START-PAGE DATA STREAM)
          (SELECTC (\HTML-STATE DATA)
              (HTML.STATE.NON-TEXT-OUTPUT                    (* ; "this is the state we need")
                   )
              (HTML.STATE.TEXT-OUTPUT                        (* ; "end the text section")
                   (CL:FORMAT (\HTML-BACKING-STREAM DATA)
                          "</text>~%%"))
              NIL)

          (* ;; "finally")

          (CL:SETF (\HTML-STATE DATA)
                 HTML.STATE.NON-TEXT-OUTPUT)))

(CL:DEFUN HTML.OUTPUT-TEXT (STREAM)
   "We're being asked to write text"
   (with-htmldata (DATA STREAM)
          (\HTML.MAYBE-START-PAGE DATA STREAM)
          (LET* ((FONT (\HTML-FONT DATA))
                 (FONT-DATA (fetch (FONTDESCRIPTOR OTHERDEVICEFONTPROPS) of FONT)))
                (SELECTC (\HTML-STATE DATA)
                    ((LIST HTML.STATE.NON-TEXT-OUTPUT HTML.STATE.BETWEEN-PAGES) 
                                                             (* ; "start a new text section")
                         (CL:FORMAT (\HTML-BACKING-STREAM DATA)
                                "<text class='~a' x='~d' y='~d'>"
                                (\HTMLFONT-CSS-CLASS FONT-DATA)
                                (\HTML-X-POSITION DATA)
                                (\HTML.SVG-Y DATA (\HTML-Y-POSITION DATA))))
                    (HTML.STATE.TEXT-OUTPUT                  (* ; "continue this text section")
                         )
                    NIL)

                (* ;; "finally")

                (CL:SETF (\HTML-STATE DATA)
                       HTML.STATE.TEXT-OUTPUT))))

(CL:DEFUN \HTML.MAYBE-START-PAGE (DATA STREAM)

   (* ;; "We're going to do output of some sort, so start an SVG stanza if necessary")

   [with-htmldata (DATA STREAM)
          (if (EQ (\HTML-STATE DATA)
                  HTML.STATE.BETWEEN-PAGES)
              then (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
                        (CL:FORMAT BACKING 
                               "<svg width=%"~dpt%" height=%"~dpt%" viewBox=%"~d ~d ~d ~d%">~%%"
                               (CP-TO-P (\HTML-PAGE-WIDTH DATA))
                               (CP-TO-P (\HTML-PAGE-HEIGHT DATA))
                               0 0 (\HTML-PAGE-WIDTH DATA)
                               (\HTML-PAGE-HEIGHT DATA))
                        [CL:SETF (\HTML-TOP-MARGIN DATA)
                               (- (\HTML-PAGE-HEIGHT DATA)
                                  (FONTPROP (\HTML-FONT DATA)
                                         'HEIGHT]
                        (CL:SETF (\HTML-X-POSITION DATA)
                               (\HTML-LEFT-MARGIN DATA))
                        (CL:SETF (\HTML-Y-POSITION DATA)
                               (\HTML-TOP-MARGIN DATA])

(CL:DEFUN \HTML.END-PAGE (DATA STREAM)
   "End the current page"
   (if (EQ (\HTML-STATE DATA)
           HTML.STATE.TEXT-OUTPUT)
       then (HTML.OUTPUT-GRAPHICS STREAM))
   (CL:INCF (\HTML-PAGE-NUM DATA))
   (HTML.RESET STREAM)
   (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
        (CL:FORMAT BACKING "</svg>~%%"))
   (CL:SETF (\HTML-STATE DATA)
          HTML.STATE.BETWEEN-PAGES))

(CL:DEFUN HTML.WRITE-PREFACE (STREAM)
   "Write the preamble to the file: <html><head>... etc."
   (with-htmldata (DATA STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA))
                (TITLE (\HTML-TITLE DATA)))
               (printout BACKING "<!DOCTYPE HTML>" T)
               (printout BACKING "<html>" T)
               (printout BACKING "<head>" T)
               (printout BACKING "<title>" TITLE "</title>" T)
               (printout BACKING "<link rel=%"preconnect%" href=%"https://fonts.googleapis.com%">" T)
               (printout BACKING 
                      "<link rel=%"preconnect%" href=%"https://fonts.gstatic.com%" crossorigin>" T)
               (printout BACKING "<link rel=%"stylesheet%" href=%"https://fonts.googleapis.com/css2?family=Noto+Sans+Mono&family=Noto+Sans+Display&family=Noto+Sans&family=Noto+Sans+Simplified+Chinese&family=Noto+Sans+Traditional+Chinese&family=Noto+Sans+Japanese&family=Noto+Sans+Korean&family=Noto+Sans+Arabic&family=Noto+Sans+Hebrew&family=Noto+Sans+Runic&family=Noto+Sans+Georgian&family=Noto+Sans+Armenian&family=Noto+Sans+Math&family=Noto+Sans+Symbols&family=Noto+Sans+Symbols+2&family=Noto+Serif&family=Noto+Serif+Simplified+Chinese&family=Noto+Serif+Traditional+Chinese&family=Noto+Serif+Japanese&family=Noto+Serif+Korean&family=Noto+Serif+Hebrew&family=Noto+Serif+Georgian&family=Noto+Serif+Armenian%">"
                      T)
               (printout BACKING "<script>" T)
               (printout BACKING "    const fontSpecs = [" T)
               (for FAMILY in *WEB-FONT-FAMILY-NAMES*
                  do (for SIZE in *WEB-FONT-SIZES* do (CL:FORMAT BACKING 
                                                   "            {family: %"~A%", size: %"~dpt%"},~%%"
                                                             FAMILY SIZE)))
               (printout BACKING "    ];" T T)
               (printout BACKING "    function fontFromSpec(font) {" T 
                      "        return font.size + %" %" + font.family;" T "    }" T T)
               (printout BACKING "    const fontLoadPromises = [];" T T)
               (printout BACKING "    for (const spec of fontSpecs) {" T 
                      "        fontLoadPromises.push(document.fonts.load(fontFromSpec(spec)));" T 
                      "    }" T T)
               (printout BACKING 
                  "    Promise.all(fontLoadPromises).then(_ => { console.log('All fonts loaded');});"
                      T)
               (printout BACKING "</script>" T)
               (printout BACKING "<style>" T)

               (* ;; "all space chars in text blocks are significant:")

               (printout BACKING "text { white-space: pre }" T)

               (* ;; "define styles")

               (* ;; 
 "the page is scaled to use centipoints, so font sizes below are measured in centipoints, not points")

               [for FAMILY in *WEB-FONT-FAMILY-NAMES* as LISP-FAMILY in *WEB-FONT-FAMILIES*
                  do (for SIZE in *WEB-FONT-SIZES* do (CL:FORMAT BACKING 
                                                      ".~A { font-family: '~A'; font-size: ~dpt }~%%"
                                                             (CSS-CLASS-FROM (CAR LISP-FAMILY)
                                                                    SIZE NIL)
                                                             FAMILY
                                                             (FIXR (P-TO-CP SIZE]
               (printout BACKING ".bold { font-weight: bold }" T)
               (printout BACKING ".italic { font-style: italic }" T)
               (printout BACKING "</style>" T)
               (printout BACKING "</head>" T)
               (printout BACKING "<body>" T)
               BACKING)))

(CL:DEFUN OPENHTMLSTREAM (FILENAME &OPTIONAL OPTIONS)
   "Open and return an HTML imagestream"
   (LET* ((TITLE (OR (LISTGET OPTIONS 'TITLE)
                     FILENAME))
          (REGION (OR (LISTGET OPTIONS 'REGION)
                      *HTML.DEFAULT-PAGE-SIZE*))
          [BACKING (OPENSTREAM FILENAME 'OUTPUT NIL '((FORMAT :UTF-8-SLUG]
          (IMAGEOPS (create IMAGEOPS))
          (IMAGEDATA (MAKE-HTML.IMAGEDATA :BACKING-STREAM BACKING :TITLE TITLE :PAGE-WIDTH
                            (CAR REGION)
                            :PAGE-HEIGHT
                            (CDR REGION)))
          (HTMLSTREAM (create STREAM
                             FULLFILENAME _ (FULLNAME BACKING)
                             DEVICE _ \HTMLSTREAM.FDEV
                             ACCESS _ 'OUTPUT
                             OUTCHARFN _ #'HTML.OUTCHARFN
                             STRMBOUTFN _ #'\BUFFERED.BOUT   (* ; "is this right?")
                             IMAGEOPS _ IMAGEOPS
                             USERCLOSEABLE _ T
                             USERVISIBLE _ T
                             IMAGEDATA _ IMAGEDATA)))

         (* ;; "Make the backing file invisible")

         (replace (STREAM USERVISIBLE) of BACKING with NIL)

         (* ;; "install our OUTCHARFN. you can't do this in the create.")

         (replace (STREAM OUTCHARFN) of HTMLSTREAM with #'HTML.OUTCHARFN)

         (* ;; "replace (do not smash!) the stream's IMAGEOPS with ours")

         (replace IMAGEOPS of HTMLSTREAM with IMAGEOPS)

         (* ;; "Set the informational fields")

         (replace IMFONTCREATE of IMAGEOPS with HTML.FONTCREATE.DEVICENAME)
         (replace IMAGETYPE of IMAGEOPS with HTML.IMAGETYPE)

         (* ;; "Set the functions")

         (replace IMCLOSEFN of IMAGEOPS with #'HTML.CLOSEFN)
         (replace IMDRAWLINE of IMAGEOPS with #'HTML.DRAWLINE)
         (replace IMDRAWCURVE of IMAGEOPS with #'HTML.DRAWCURVE)
         (replace IMDRAWCIRCLE of IMAGEOPS with #'HTML.DRAWCIRCLE)
         (replace IMDRAWELLIPSE of IMAGEOPS with #'HTML.DRAWELLIPSE)
         (replace IMFILLPOLYGON of IMAGEOPS with #'HTML.FILLPOLYGON)
         (replace IMDRAWPOLYGON of IMAGEOPS with #'HTML.DRAWPOLYGON)
         (replace IMFILLCIRCLE of IMAGEOPS with #'HTML.FILLCIRCLE)
         (replace IMBLTSHADE of IMAGEOPS with #'HTML.BLTSHADE)
         (replace IMBITBLT of IMAGEOPS with #'HTML.BITBLT)
         (replace IMSCALEDBITBLT of IMAGEOPS with #'HTML.SCALEDBITBLT)
         (replace IMMOVETO of IMAGEOPS with #'HTML.MOVETO)
         (replace IMCHARWIDTH of IMAGEOPS with #'HTML.CHARWIDTH)
         (replace IMNEWPAGE of IMAGEOPS with #'HTML.NEWPAGE)
         (replace IMTERPRI of IMAGEOPS with #'HTML.TERPRI)
         (replace IMRESET of IMAGEOPS with #'HTML.RESET)
         (replace IMCLIPPINGREGION of IMAGEOPS with #'HTML.CLIPPINGREGION)
         (replace IMXPOSITION of IMAGEOPS with #'HTML.XPOSITION)
         (replace IMYPOSITION of IMAGEOPS with #'HTML.YPOSITION)
         (replace IMFONT of IMAGEOPS with #'HTML.FONT)
         (replace IMLEFTMARGIN of IMAGEOPS with #'HTML.LEFTMARGIN)
         (replace IMRIGHTMARGIN of IMAGEOPS with #'HTML.RIGHTMARGIN)
         (replace IMTOPMARGIN of IMAGEOPS with #'HTML.TOPMARGIN)
         (replace IMBOTTOMMARGIN of IMAGEOPS with #'HTML.BOTTOMMARGIN)
         (replace IMLINEFEED of IMAGEOPS with #'HTML.LINEFEED)
         (replace IMSCALE of IMAGEOPS with #'HTML.SCALE)
         (replace IMSPACEFACTOR of IMAGEOPS with #'HTML.SPACEFACTOR)
         (replace IMOPERATION of IMAGEOPS with #'HTML.OPERATION)
         (replace IMBACKCOLOR of IMAGEOPS with #'HTML.BACKCOLOR)
         (replace IMCOLOR of IMAGEOPS with #'HTML.COLOR)

         (* ;; "Maybe implement these later:")

         (replace IMWRITEPIXEL of IMAGEOPS with #'NILL)
         (replace IMROTATE of IMAGEOPS with #'NILL)
         (replace IMDRAWARC of IMAGEOPS with #'NILL)
         (replace IMTRANSLATE of IMAGEOPS with #'NILL)
         (replace IMSCALE2 of IMAGEOPS with #'NILL)
         (replace IMPUSHSTATE of IMAGEOPS with #'NILL)
         (replace IMPOPSTATE of IMAGEOPS with #'NILL)
         (replace IMDEFAULTSTATE of IMAGEOPS with #'NILL)
         (replace IMCHARWIDTHY of IMAGEOPS with #'NILL)
         (replace IMBITMAPSIZE of IMAGEOPS with #'NILL)

         (* ;; "we can init the font now that the IMAGEOPS are complete")

         (LET* [(USER-FONT (LISTGET OPTIONS 'FONT))
                (DEFAULTFONT (if USER-FONT
                                 then (\COERCEFONTDESC USER-FONT HTMLSTREAM)
                               else (FONTCREATE 'NOTO-SANS-DISPLAY 10 'MRR 0 'HTML]

               (* ;; "Finish initializing the IMAGEDATA")

               (\HTML.INIT-IMAGEDATA HTMLSTREAM DEFAULTFONT)

               (* ;; "write the preface")

               (HTML.WRITE-PREFACE HTMLSTREAM)

               (* ;; "return the stream")

               HTMLSTREAM)))

(CL:DEFUN HTML.BACKCOLOR (STREAM NEW-COLOR)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-BG-COLOR DATA)))
               (COND
                  (NEW-COLOR (CL:SETF (\HTML-BG-COLOR DATA)
                                    NEW-COLOR)))
               OLD-VALUE)))

(CL:DEFUN HTML.BITBLT (SOURCEBITMAP SOURCELEFT SOURCEBOTTOM STREAM DESTINATIONLEFT DESTINATIONBOTTOM
                             WIDTH HEIGHT SOURCETYPE OPERATION TEXTURE CLIPPINGREGION 
                             CLIPPEDSOURCELEFT CLIPPEDSOURCEBOTTOM)

   (* ;; "blt the image expanded by a scale factor of 1")

   (HTML.SCALEDBITBLT SOURCEBITMAP SOURCELEFT SOURCEBOTTOM STREAM DESTINATIONLEFT DESTINATIONBOTTOM 
          WIDTH HEIGHT SOURCETYPE OPERATION TEXTURE CLIPPINGREGION CLIPPEDSOURCELEFT 
          CLIPPEDSOURCEBOTTOM 1))

(CL:DEFUN HTML.BLTSHADE (TEXTURE STREAM DESTINATIONLEFT DESTINATIONBOTTOM WIDTH HEIGHT OPERATION 
                               CLIPPINGREGION)

   (* ;; "NOTE we ignore OPERATION")

   (* ;; "in our monochrome graphics world, SHADEs are 4x4 TEXTUREs.  Let's interpret the texture as a shade, meaning a gray value")

   (* ;; "because we're dealing with 24-bit color, we can only represent 256 gray shades")

   [LET* [(BLACK-BITS (CL:LOGCOUNT TEXTURE))
          (BLACK-PROPORTION (/ BLACK-BITS 16))
          (GRAY-VALUE (FIXR (TIMES BLACK-PROPORTION 255]
         (with-htmldata (DATA STREAM)

                (* ;; "clip region against CLIPPINGREGION")

                (LET* [(BACKING (\HTML-BACKING-STREAM DATA))
                       (ORIGINAL-REGION (CREATE REGION
                                               LEFT _ DESTINATIONLEFT
                                               BOTTOM _ DESTINATIONBOTTOM
                                               WIDTH _ WIDTH
                                               HEIGHT _ HEIGHT))
                       (EFFECTIVE-REGION (INTERSECTREGIONS ORIGINAL-REGION (CL:IF CLIPPINGREGION
                                                                               CLIPPINGREGION
                                                                               ORIGINAL-REGION)]
                      (HTML.OUTPUT-GRAPHICS STREAM)
                      (CL:FORMAT BACKING 
           "<rect x='~d' y='~d' width='~d' height='~d' stroke='none' fill='#~2,'0x~2,'0x~2,'0x'/>~%%"
                             (FETCH (REGION LEFT) OF EFFECTIVE-REGION)
                             (\HTML.SVG-Y DATA (FETCH (REGION BOTTOM) OF EFFECTIVE-REGION))
                             (FETCH (REGION WIDTH) OF EFFECTIVE-REGION)
                             (FETCH (REGION HEIGHT) OF EFFECTIVE-REGION)
                             GRAY-VALUE GRAY-VALUE GRAY-VALUE])

(CL:DEFUN HTML.BOTTOMMARGIN (STREAM NEW-BOTTOM-MARGIN)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-BOTTOM-MARGIN DATA)))
               (if NEW-BOTTOM-MARGIN
                   then (CL:SETF (\HTML-BOTTOM-MARGIN DATA)
                               NEW-BOTTOM-MARGIN))
               OLD-VALUE)))

(CL:DEFUN HTML.CHARWIDTH (STREAM CHCODE)
   "Character width accessor that obeys space-factors"
   (with-htmldata (DATA STREAM)
          (LET ((CHAR-WIDTH (\FGETCHARWIDTH (\HTML-FONT DATA)
                                   CHCODE))
                (SPACE-FACTOR (\HTML-SPACE-FACTOR DATA)))
               (if (AND (= CHCODE (CHARCODE SPACE))
                        (NOT (= SPACE-FACTOR 1.0)))
                   then (FTIMES SPACE-FACTOR CHAR-WIDTH)
                 else CHAR-WIDTH))))

(CL:DEFUN HTML.CLIPPINGREGION (STREAM NEW-REGION)
   (printout T "HTML.CLIPPINGREGION")
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-CLIPPING-REGION DATA)))
               (COND
                  (NEW-REGION (CL:SETF (\HTML-CLIPPING-REGION DATA)
                                     NEW-REGION)))
               OLD-VALUE)))

(CL:DEFUN HTML.CLOSEFN (STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
               (if (EQ (\HTML-STATE DATA)
                       HTML.STATE.TEXT-OUTPUT)
                   then (HTML.OUTPUT-GRAPHICS STREAM))
               (printout BACKING T "</svg>" T "</body>" T "</html>" T)
               (CLOSEF BACKING)
               (CL:SETF (\HTML-STATE DATA)
                      HTML.STATE.CLOSED))))

(CL:DEFUN HTML.COLOR (STREAM NEW-COLOR)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-FG-COLOR DATA)))
               (COND
                  (NEW-COLOR (CL:SETF (\HTML-FG-COLOR DATA)
                                    NEW-COLOR)))
               OLD-VALUE)))

(CL:DEFUN HTML.DRAWCIRCLE (STREAM CENTERX CENTERY RADIUS BRUSH DASHING)
   "Draw a circle"

   (* ;; "TODO implement BRUSH and DASHING")

   (\HTML.FILLCIRCLE STREAM CENTERX CENTERY RADIUS "transparent"))

(CL:DEFUN HTML.DRAWCURVE (STREAM KNOTS CLOSED BRUSH DASHING)
   "Draw a parametric cubic spline curve"

   (* ;; "TODO ignore BRUSH and DASHING for now")

   (* ;; "SVG can draw curves in 3 representations, quadratic Bezier, cubic Bezier, or elliptical arcs.  We will convert KNOTS to cubic Bezier control points.")

   [with-htmldata (DATA STREAM)
          (HTML.OUTPUT-GRAPHICS STREAM)
          (LET [(BACKING (\HTML-BACKING-STREAM DATA))
                (BEZIER-CONTROL-POINTS (CONVERT-TO-BEZIER (if CLOSED
                                                              then (CLOSE-KNOTS KNOTS)
                                                            else KNOTS]
               (CL:FORMAT BACKING "<path fill='none' stroke='black' d='~A' />~%%" (
                                                                         BEZIER-CONTROL-POINTS-TO-SVG
                                                                                   
                                                                                BEZIER-CONTROL-POINTS
                                                                                   ])

(CL:DEFUN HTML.DRAWELLIPSE (STREAM CENTERX CENTERY SEMIMINORRADIUS SEMIMAJORRADIUS ORIENTATION BRUSH
                                  DASHING)
   "Draw an ellipse"

   (* ;; "TODO implement BRUSH and DASHING")

   [with-htmldata (DATA STREAM)
          (HTML.OUTPUT-GRAPHICS STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
               (CL:FORMAT BACKING "<ellipse cx=%"~d%" cy=%"~d%" rx=%"~d%" ry=%"~d%" transform=%"rotate(~d,~d,~d)%" fill=%"transparent%" stroke=%"black%" stroke-width=%"1pt%"/>~%%"
                      CENTERX (\HTML.SVG-Y DATA CENTERY)
                      SEMIMAJORRADIUS SEMIMINORRADIUS (- ORIENTATION)
                      CENTERX
                      (\HTML.SVG-Y DATA CENTERY])

(CL:DEFUN HTML.DRAWLINE (STREAM X1 Y1 X2 Y2 WIDTH OPERATION COLOR DASHING)
   "Draw a line"

   (* ;; "TODO implement OPERATION, COLOR, and DASHING")

   (with-htmldata (DATA STREAM)
          (HTML.OUTPUT-GRAPHICS STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
               (CL:FORMAT BACKING 
            "<line x1=%"~d%" y1=%"~d%" x2=%"~d%" y2=%"~d%" stroke=%"black%" stroke-width=%"~d%"/>~%%"
                      X1 (\HTML.SVG-Y DATA Y1)
                      X2
                      (\HTML.SVG-Y DATA Y2)
                      (OR WIDTH 1)))
          (HTML.MOVETO STREAM X2 Y2)))

(CL:DEFUN HTML.DRAWPOLYGON (STREAM POINTS CLOSED BRUSH DASHING)
   "Draw an open or closed polygon"

   (* ;; "TODO implement BRUSH and DASHING")

   (HTML.OUTPUT-GRAPHICS STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((STROKE-WIDTH-CHANGE-THIS 100)
                (BACKING (\HTML-BACKING-STREAM DATA))
                (DRAWING-TYPE (if CLOSED
                                  then "polygon"
                                else "polyline")))
               (CL:FORMAT BACKING "<~a fill=%"none%" stroke=%"black%" stroke-width=%"~d%" points=%""
                      DRAWING-TYPE STROKE-WIDTH-CHANGE-THIS DRAWING-TYPE)
               [for POINT in POINTS do (CL:FORMAT BACKING "~d,~d " (CAR POINT)
                                              (\HTML.SVG-Y DATA (CDR POINT]
               (CL:FORMAT BACKING "%" />~%%"))))

(CL:DEFUN HTML.FILLCIRCLE (STREAM CENTERX CENTERY RADIUS TEXTURE)

   (* ;; "TODO implement TEXTURE")

   (\HTML.FILLCIRCLE STREAM CENTERX CENTERY RADIUS "black"))

(CL:DEFUN HTML.FILLPOLYGON (STREAM POINTS TEXTURE OPERATION WINDING-NUMBER)
   "Fill a closed polygon"

   (* ;; "TODO implement TEXTURE, OPERATION")

   (HTML.OUTPUT-GRAPHICS STREAM)
   (with-htmldata (DATA STREAM)
          (LET [(STROKE-WIDTH-CHANGE-THIS 100)
                (BACKING (\HTML-BACKING-STREAM DATA))
                (FILL-RULE (COND
                              ((ZEROP WINDING-NUMBER)
                               "nonzero")
                              (T "evenodd"]
               (CL:FORMAT BACKING 
            "<polygon fill=%"black%" fill-rule=%"~A%" stroke=%"black%" stroke-width=%"~d%" points=%""
                      STROKE-WIDTH-CHANGE-THIS FILL-RULE)
               [for POINT in POINTS do (CL:FORMAT BACKING "~d,~d " (CAR POINT)
                                              (\HTML.SVG-Y DATA (CDR POINT]
               (CL:FORMAT BACKING "%"/>~%%"))))

(CL:DEFUN HTML.FONT (STREAM NEW-FONT)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-FONT DATA)))
               (COND
                  (NEW-FONT                                  (* ; 
  "NEW-FONT might be a FONTDESCRIPTOR or a list of properties to apply to the current FONTDESCRIPTOR")
                         (SETQ NEW-FONT (OR (\COERCEFONTDESC NEW-FONT STREAM T)
                                            [FONTCOPY OLD-VALUE `(NOERROR T ,@NEW-FONT]
                                            (ERROR "Font not found or illegal parameter")))
                         (CL:SETF (\HTML-FONT DATA)
                                NEW-FONT)
                         (CL:SETF (\HTML-LINEFEED DATA)
                                (FONTPROP NEW-FONT 'HEIGHT))
                         (HTML.OUTPUT-GRAPHICS STREAM)))
               OLD-VALUE)))

(CL:DEFUN HTML.LEFTMARGIN (STREAM NEW-LEFT-MARGIN)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-LEFT-MARGIN DATA)))
               (COND
                  (NEW-LEFT-MARGIN (CL:SETF (\HTML-LEFT-MARGIN DATA)
                                          NEW-LEFT-MARGIN)))
               OLD-VALUE)))

(CL:DEFUN HTML.LINEFEED (STREAM NEW-DELTA)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-LINEFEED DATA)))
               (COND
                  (NEW-DELTA (CL:SETF (\HTML-LINEFEED DATA)
                                    NEW-DELTA)))
               OLD-VALUE)))

(CL:DEFUN HTML.MOVETO (STREAM X Y)
   "Move to X, Y"
   (HTML.OUTPUT-GRAPHICS STREAM)
   (with-htmldata (DATA STREAM)
          (CL:SETF (\HTML-X-POSITION DATA)
                 X)
          (CL:SETF (\HTML-Y-POSITION DATA)
                 Y)))

(CL:DEFUN HTML.NEWPAGE (STREAM)
   (with-htmldata (DATA STREAM)
          (\HTML.END-PAGE DATA STREAM)))

(CL:DEFUN HTML.OPERATION (STREAM NEW-OPERATION)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-IMAGE-OPERATION DATA)))
               (COND
                  (NEW-OPERATION (CL:SETF (\HTML-IMAGE-OPERATION DATA)
                                        NEW-OPERATION)))
               OLD-VALUE)))

(CL:DEFUN HTML.OUTCHARFN (STREAM CHCODE)
   "Write a character, which may cause us to write other markup first"
   [with-htmldata (DATA STREAM)

          (* ;; "if the char is unmapped, write *XCCS-UNDEFINED-CHARCODE*")

          (if (NOT (XTOUCODE? CHCODE))
              then (SETQ CHCODE *XCCS-UNDEFINED-CHARCODE*))
          (LET ((CHARSET (\CHARSET CHCODE))
                (CHAR8CODE (\CHAR8CODE CHCODE))
                (BACKING (\HTML-BACKING-STREAM DATA)))
               (HTML.OUTPUT-TEXT STREAM)
               (SELECTC CHCODE
                   ((CHARCODE ^J)                            (* ; "handle LF")
                        (HTML.TERPRI STREAM))
                   ((CHARCODE ^M)                            (* ; "handle CR")
                        (HTML.TERPRI STREAM))
                   ((CHARCODE ^L)                            (* ; "handle pagefeed")
                        (HTML.NEWPAGE STREAM))
                   (LET* ((CHAR-WIDTH (HTML.CHARWIDTH STREAM CHCODE))
                          (NEW-X-POSITION (+ (\HTML-X-POSITION DATA)
                                             CHAR-WIDTH)))
                         (CL:FLET [(OUT NIL (HTML.OUTPUT-TEXT STREAM)
                                        (SELECTC CHCODE
                                            ((CHARCODE &) 
                                                 (CL:FORMAT BACKING "&amp;"))
                                            ((CHARCODE <) 
                                                 (CL:FORMAT BACKING "&lt;"))
                                            (\OUTCHAR BACKING CHCODE]
                                (if (> NEW-X-POSITION (\HTML-RIGHT-MARGIN DATA))
                                    then (HTML.TERPRI STREAM)
                                         (OUT)
                                         (CL:INCF (\HTML-X-POSITION DATA)
                                                CHAR-WIDTH)
                                  else (CL:SETF (\HTML-X-POSITION DATA)
                                              NEW-X-POSITION)
                                       (OUT])

(CL:DEFUN HTML.RESET (STREAM)
   (with-htmldata (DATA STREAM)
          (CL:SETF (\HTML-X-POSITION DATA)
                 (\HTML-LEFT-MARGIN DATA))
          (CL:SETF (\HTML-Y-POSITION DATA)
                 (\HTML-TOP-MARGIN DATA))
          (CL:SETF (\HTML-STATE DATA)
                 HTML.STATE.NON-TEXT-OUTPUT)))

(CL:DEFUN HTML.RIGHTMARGIN (STREAM NEW-RIGHT-MARGIN)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-RIGHT-MARGIN DATA)))
               (COND
                  (NEW-RIGHT-MARGIN (CL:SETF (\HTML-RIGHT-MARGIN DATA)
                                           NEW-RIGHT-MARGIN)))
               OLD-VALUE)))

(CL:DEFUN HTML.SCALE (STREAM NEW-SCALE)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-SCALE DATA)))
               [COND
                  (NEW-SCALE (printout T "Warning: DSPSCALE argument is ignored")
                         (DO-NOT (CL:SETF (\HTML-SCALE DATA)
                                        NEW-SCALE]
               OLD-VALUE)))

(CL:DEFUN HTML.SCALEDBITBLT (SOURCEBITMAP SOURCELEFT SOURCEBOTTOM STREAM DESTINATIONLEFT 
                                   DESTINATIONBOTTOM WIDTH HEIGHT SOURCETYPE OPERATION TEXTURE 
                                   CLIPPINGREGION CLIPPEDSOURCELEFT CLIPPEDSOURCEBOTTOM SCALE)

   (* ;; 
   "just like bitblt, but scale the image by SCALE. this is called by HTML.BITBLT with SCALE = 1")

   (with-htmldata (DATA STREAM)
          (HTML.OUTPUT-GRAPHICS STREAM)
          (LET [(BACKING (\HTML-BACKING-STREAM DATA))
                (NEW-WIDTH (ITIMES SCALE (- WIDTH SOURCELEFT)))
                (NEW-HEIGHT (ITIMES SCALE (- HEIGHT SOURCEBOTTOM]
               (CL:FORMAT BACKING 
                  "<image width=%"~d%" height=%"~d%" x=%"~d%" y=%"~d%" href=%"data:image/png;base64,"
                      (P-TO-CP NEW-WIDTH)
                      (P-TO-CP NEW-HEIGHT)
                      DESTINATIONLEFT DESTINATIONBOTTOM)
               (WRITE-BASE64-PNG BACKING SOURCEBITMAP SOURCELEFT SOURCEBOTTOM WIDTH HEIGHT)
               (CL:FORMAT BACKING "%"/>~%%"))))

(CL:DEFUN HTML.SPACEFACTOR (STREAM NEW-FACTOR)
   (printout T "HTML.SPACEFACTOR" T)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-SPACE-FACTOR DATA)))
               (COND
                  (NEW-FACTOR (CL:SETF (\HTML-SPACE-FACTOR DATA)
                                     NEW-FACTOR)))
               OLD-VALUE)))

(CL:DEFUN HTML.TERPRI (STREAM)
   "Do a newline"
   [with-htmldata (DATA STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
               (CL:SETF (\HTML-X-POSITION DATA)
                      (\HTML-LEFT-MARGIN DATA))
               (CL:DECF (\HTML-Y-POSITION DATA)
                      (\HTML-LINEFEED DATA))

               (* ;; "if Y-POSITION overflowed BOTTOM-MARGIN, start a new page")

               (if (< (\HTML-Y-POSITION DATA)
                      (\HTML-BOTTOM-MARGIN DATA))
                   then (\HTML.END-PAGE DATA STREAM)
                 else (HTML.OUTPUT-GRAPHICS STREAM])

(CL:DEFUN HTML.TOPMARGIN (STREAM NEW-TOP-MARGIN)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-TOP-MARGIN DATA)))
               (COND
                  (NEW-TOP-MARGIN (CL:SETF (\HTML-TOP-MARGIN DATA)
                                         NEW-TOP-MARGIN)))
               OLD-VALUE)))

(CL:DEFUN HTML.XPOSITION (STREAM NEW-X-POSITION)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-X-POSITION DATA)))
               (COND
                  (NEW-X-POSITION (CL:SETF (\HTML-X-POSITION DATA)
                                         NEW-X-POSITION)))
               OLD-VALUE)))

(CL:DEFUN HTML.YPOSITION (STREAM NEW-Y-POSITION)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-Y-POSITION DATA)))
               (COND
                  (NEW-Y-POSITION (CL:SETF (\HTML-Y-POSITION DATA)
                                         NEW-Y-POSITION)))
               OLD-VALUE)))

(CL:DEFUN MAKE-HTML-IMAGETYPE ()
   "Return the IMAGETYPE descriptor for HTML streams."
   `((OPENSTREAM OPENHTMLSTREAM)
     (FONTCREATE \HTML.FONTCREATE)
     (FONTSAVAILABLE \HTML.FONTSAVAILABLE)
     (CREATECHARSET \HTML.CREATECHARSET)))

(CL:DEFUN \HTML.FILLCIRCLE (STREAM CENTERX CENTERY RADIUS COLOR-NAME)

   (* ;; "common code underlying HTML.FILLCIRCLE and HTML.DRAWCIRCLE")

   (with-htmldata (DATA STREAM)
          (HTML.OUTPUT-GRAPHICS STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
               (CL:FORMAT BACKING 
          "<circle cx=%"~d%" cy=%"~d%" r=%"~d%" fill=%"~a%" stroke=%"black%" stroke-width=%"1%"/>~%%"
                      CENTERX (\HTML.SVG-Y DATA CENTERY)
                      RADIUS COLOR-NAME))
          (HTML.MOVETO STREAM CENTERX CENTERY)))

(CL:DEFUN \HTML.INIT-IMAGEDATA (HTMLSTREAM FONT)
   "Finish initializing the stream's IMAGEDATA"
   (with-htmldata (DATA HTMLSTREAM)

          (* ;; "set the font and linefeed delta")

          (CL:SETF (\HTML-FONT DATA)
                 FONT)
          (CL:SETF (\HTML-LINEFEED DATA)
                 (FONTPROP FONT 'HEIGHT))

          (* ;; "set the margins")

          (CL:SETF (\HTML-LEFT-MARGIN DATA)
                 0)
          (CL:SETF (\HTML-RIGHT-MARGIN DATA)
                 (\HTML-PAGE-WIDTH DATA))
          [CL:SETF (\HTML-TOP-MARGIN DATA)
                 (- (\HTML-PAGE-HEIGHT DATA)
                    (FONTPROP FONT 'HEIGHT]
          (CL:SETF (\HTML-BOTTOM-MARGIN DATA)
                 0)
          (CL:SETF (\HTML-Y-POSITION DATA)
                 (\HTML-TOP-MARGIN DATA))))

(CL:DEFUN \HTMLSTREAM.INIT ()

   (* ;; "Initialize the HTMLSTREAM world")

   (DECLARE (GLOBALVARS \HTMLSTREAM.FDEV IMAGESTREAMTYPES *DEFAULT-EXTERNALFORMAT*))
   (SETQ \HTMLSTREAM.FDEV (create FDEV
                                 DEVICENAME _ (LIST 'HTML 'DOCUMENT)
                                 CLOSEFILE _ #'NILL
                                 BOUT _ #'NILL))

   (* ;; "update IMAGESTREAMTYPES")

   (PUTASSOC HTML.FONTCREATE.DEVICENAME (MAKE-HTML-IMAGETYPE)
          IMAGESTREAMTYPES))

(CL:DEFUN WRITE-BASE64-PNG (STREAM BITMAP SOURCELEFT SOURCEBOTTOM WIDTH HEIGHT)
   "Write a BASE64-encoded PNG rendition of the bitmap, clipped as directed"
   (LET [(NEW-BITMAP (BITMAPCREATE (- WIDTH SOURCELEFT)
                            (- HEIGHT SOURCEBOTTOM]
        (BITBLT BITMAP SOURCELEFT SOURCEBOTTOM NEW-BITMAP 0 0 WIDTH HEIGHT)
        (CONVERT-TO-PNG-BASE64 NEW-BITMAP STREAM)))

(CL:DEFUN CONVERT-TO-PNG-BASE64 (BITMAP STREAM)
   "Write a bitmap as a BASE64-encoded PNG stream"

   (* ;; "We encode the PNG as BASE64 using a GENERATOR to produce and ENCODE-BASE64-GEN to consume")

   (LET ((THRESHOLD (/ (BITSPERPIXEL BITMAP)
                       2)))
        (S-BASE64:ENCODE-BASE64-GEN (GENERATOR (UNCOMPRESSED-PNG:WRITE-BITMAP
                                                BITMAP THRESHOLD NIL #'(CL:LAMBDA (BYTE)
                                                                              (PRODUCE BYTE))
                                                #'UNCOMPRESSED-PNG:PIXEL-TO-MONOCHROME-RGBA))
               STREAM)))

(CL:DEFUN \HTML.FONTCREATE (FAMILY SIZE FACE ROTATION DEVICE CHARSET)
   "Create a font for the HTML device"

   (* ;; "FAMILY must be a litatom")

   (* ;; "SIZE is a positive integer number of printer's points")

   (* ;; "FACE = (WEIGHT SLOPE EXPANSION)")

   (* ;; "    WEIGHT = one of BOLD, MEDIUM, LIGHT")

   (* ;; "    SLOPE = one of ITALIC or REGULAR")

   (* ;; "    EXPANSION = one of REGULAR, COMPRESSED, EXPANDED")

   (* ;; "CHARSET is a positive integer or NIL")

   (DECLARE (GLOBALVARS \DEFAULTCHARSET))
   (CL:FORMAT T "\HTML.FONTCREATE ~a ~a ~a ~a ~a ~a~%%" FAMILY SIZE FACE ROTATION DEVICE CHARSET)
   (if (NEQ ROTATION 0)
       then (ERROR "We only support ROTATION = 0"))
   (LET* [(COERCED-FAMILY (OR (CDR (FASSOC FAMILY *WEB-FONT-MAPPINGS*))
                              FAMILY))
          (FONT-DESCR (\HTML.READ-FONT-METRICS COERCED-FAMILY FACE SIZE))
          (PRIVATE-FONT-INFO (MAKE-HTML.FONTINFO :CHARSETS (MAKE-CHARSET-BIT-ARRAY
                                                            (fetch (WEB-FONT-DESCR charsets)
                                                               of FONT-DESCR))
                                    :CSS-CLASS
                                    (CSS-CLASS-FROM COERCED-FAMILY SIZE FACE]
         (COND
            ((NEQ FAMILY COERCED-FAMILY)
             (CL:FORMAT T "Coerced ~A to ~A~%%" FAMILY COERCED-FAMILY)))

         (* ;; "read the metrics for charset CHARSET")

         (AND FONT-DESCR
              (LET* ((CHARSET-DESCR (\HTML.READ-CHARSET-METRICS COERCED-FAMILY SIZE FACE CHARSET))
                     (CHARSET0-WIDTHS (fetch (WEB-CHARSET-METRICS xccsWidths) of CHARSET-DESCR))
                     (FD (create FONTDESCRIPTOR
                                FONTDEVICE _ DEVICE
                                FONTSCALE _ *CENTIPOINTS-PER-POINT*
                                FONTFAMILY _ FAMILY
                                FONTSIZE _ SIZE
                                FONTFACE _ FACE
                                \SFAscent _ (fetch (WEB-FONT-METRICS maxAscent) of FONT-DESCR)
                                \SFDescent _ (fetch (WEB-FONT-METRICS maxDescent) of FONT-DESCR)
                                \SFHeight _ (fetch (WEB-FONT-METRICS height) of FONT-DESCR)
                                ROTATION _ 0
                                FONTDEVICESPEC _ (LIST COERCED-FAMILY SIZE FACE ROTATION DEVICE)
                                \SFFACECODE _ (\FACECODE FACE)
                                OTHERDEVICEFONTPROPS _ PRIVATE-FONT-INFO))
                     (CSINFO (\CREATECHARSET CHARSET FD T))
                     (CS-WIDTHS (fetch (CHARSETINFO WIDTHS) of CSINFO)))
                    (for WIDTH in CHARSET0-WIDTHS as CH from 0 to \MAXTHINCHAR
                       do (CL:UNLESS (NULL WIDTH)
                                 (\FSETWIDTH CS-WIDTHS CH WIDTH)))
                    FD))))

(CL:DEFUN \HTML.FONTSAVAILABLE (FAMILY SIZE FACE ROTATION DEVICE)
   "Search for matching fonts for the HTML device"

   (* ;; "any of the fields can be '*.  Ignore ROTATION. FACE = (WEIGHT SLOPE EXPANSION)")

   (* ;; "return a list of fontspecs")

   [LET* ((FACE-AS-LIST (\FONTFACE FACE))
          (WEIGHT (fetch (FONTFACE WEIGHT) of FACE-AS-LIST))
          (SLOPE (fetch (FONTFACE SLOPE) of FACE-AS-LIST))
          (EXPANSION (fetch (FONTFACE EXPANSION) of FACE-AS-LIST))
          (FILE-NAME (MAKE-FONT-METRICS-FILE-NAME FAMILY SIZE WEIGHT SLOPE EXPANSION))
          (PATTERN (PACKFILENAME.STRING 'BODY *WEB-FONT-DIRECTORY* 'NAME FILE-NAME))
          (MATCHING-FILES (DIRECTORY PATTERN)))
         (FOR MATCH IN MATCHING-FILES 

                       (* ;; 
                       "the name will look like <font name>-<size>-<weight>-<slope>-<expansion>")

                       (* ;; 
                       "<font name> may contain hyphens, so parse from the end to the beginning")

                        COLLECT (LET* ((MATCHING-NAME (UNPACKFILENAME.STRING MATCH 'NAME))
                                       (EXPANSION-POS (STRPOS "-" MATCHING-NAME NIL NIL NIL NIL NIL T
                                                             ))
                                       (SLOPE-POS (STRPOS "-" MATCHING-NAME (CL:1- EXPANSION-POS)
                                                         NIL NIL NIL NIL T))
                                       (WEIGHT-POS (STRPOS "-" MATCHING-NAME (CL:1- SLOPE-POS)
                                                          NIL NIL NIL NIL T))
                                       (SIZE-POS (STRPOS "-" MATCHING-NAME (CL:1- WEIGHT-POS)
                                                        NIL NIL NIL NIL T)))
                                      (LIST (MKATOM (SUBSTRING MATCHING-NAME 1 (CL:1- SIZE-POS)))
                                            (MKATOM (SUBSTRING MATCHING-NAME (CL:1+ SIZE-POS)
                                                           (CL:1- WEIGHT-POS)))
                                            [LIST (MKATOM (SUBSTRING MATCHING-NAME (CL:1+ WEIGHT-POS)
                                                                 (CL:1- SLOPE-POS)))
                                                  (MKATOM (SUBSTRING MATCHING-NAME (CL:1+ SLOPE-POS)
                                                                 (CL:1- EXPANSION-POS)))
                                                  (MKATOM (SUBSTRING MATCHING-NAME (CL:1+ 
                                                                                        EXPANSION-POS
                                                                                          ]
                                            0 HTML.FONTCREATE.DEVICENAME])

(CL:DEFUN \HTML.CREATECHARSET (FAMILY SIZE FACE ROTATION DEVICE CHARSET FONTDESC NOSLUG?)
   (LET ((PRIVATE-FONT-INFO (fetch (FONTDESCRIPTOR OTHERDEVICEFONTPROPS) of FONTDESC)))
        (CL:IF (KNOWN-CHARSET? PRIVATE-FONT-INFO CHARSET)
            (LET* ((CHARSET-DESCR (\HTML.READ-CHARSET-METRICS FAMILY SIZE FACE CHARSET))
                   (CHARSET-WIDTHS (fetch (WEB-CHARSET-METRICS xccsWidths) of CHARSET-DESCR))
                   (CSINFO (create CHARSETINFO
                                  OFFSETS _ NIL))
                   (CS-WIDTHS (fetch (CHARSETINFO WIDTHS) of CSINFO)))
                  (for WIDTH in CHARSET-WIDTHS as CH from 0 to \MAXTHINCHAR
                     do (CL:WHEN WIDTH (\FSETWIDTH CS-WIDTHS CH WIDTH)))
                  (replace (CHARSETINFO IMAGEWIDTHS) of CSINFO with CS-WIDTHS)
                  CSINFO)
            (PROGN (\HTML.WARN-CHARSET FONTDESC CHARSET T)
                   NIL))))

(CL:DEFUN \HTML.CHANGECHARSET (DATA CHARSET)
   "Set the new character set, creating the charset info if necessary"

   (* ;; "But don't change the charset if CHARSET is not a member of the font's charsets list")

   (printout T "\HTML.CHANGECHARSET " CHARSET T)
   (LET* ((FONT (\HTML-FONT DATA)))
         (CL:IF (KNOWN-CHARSET? (fetch (FONTDESCRIPTOR OTHERDEVICEFONTPROPS) of FONT)
                       CHARSET)
             (LET ((CSINFO (\HTML.CREATECHARSET (FONTPROP FONT 'FAMILY)
                                  (FONTPROP FONT 'SIZE)
                                  (FONTPROP FONT 'FACE)
                                  0 HTML.FONTCREATE.DEVICENAME CHARSET FONT T)))
                  (\INSTALLCHARSETINFO FONT CSINFO CHARSET))
             (printout T "Font does not contain charset " CHARSET T))))

(CL:DEFUN MAKE-CHARSET-BIT-ARRAY (CHARSETS-LIST)
   "Read a list of charset numbers and return an equivalent set in the form of a bit-vector"
   (LET ((BIT-SET (BITMAPCREATE (IPLUS 1 \MAXCHARSET)
                         1 1)))
        (CL:DOLIST (CHARSET CHARSETS-LIST)
            (BITMAPBIT BIT-SET CHARSET 0 1))
        BIT-SET))

(CL:DEFUN KNOWN-CHARSET? (HTMLFONT CHARSET)
   "Return T if the HTMLFONT says it has metrics for CHARSET"
   [LET ((KNOWN-CHARSETS (\HTMLFONT-CHARSETS HTMLFONT)))
        (NOT (ZEROP (BITMAPBIT KNOWN-CHARSETS CHARSET 0])

(CL:DEFUN \HTML.WARN-CHARSET (FONT CHARSET WARN-STREAM)
   "Warn the user once that the font doesn't support the charset"
   [LET ((PRIVATE-FONT-INFO (fetch (FONTDESCRIPTOR OTHERDEVICEFONTPROPS) of FONT)))
        (CL:UNLESS (FMEMB CHARSET (\HTMLFONT-WARNED-CHARSETS PRIVATE-FONT-INFO))
            (printout WARN-STREAM "Font " .PPVTL (FONTPROP FONT 'SPEC)
                   " does not support charset #o" .I3.8.T CHARSET " (" CHARSET ")" T)
            (CL:PUSH CHARSET (\HTMLFONT-WARNED-CHARSETS PRIVATE-FONT-INFO)))])

(\HTMLSTREAM.INIT)



(* ;; "PRINTFILETYPES-related")


(CL:DEFCONSTANT *HTML-FILE-EXTENSIONS* '("html" "htm")
                                       
                             "The file extensions that denote an HTML file. Case is not significant.")

(CL:DEFCONSTANT *HTML-FINGERPRINTS* '("<!DOCTYPE HTML" "<html")
                                    "If a file begins with any of these strings, it's an HTML file.")

(CL:DEFUN HTMLFILEP (FILE)
   "Is the FILE an HTML file?"

   (* ;; "Check the extension; failing that, look at the start of the file")

   [LET [(EXTENSION (L-CASE (UNPACKFILENAME.STRING FILE 'EXTENSION]
        (if (MEMBER EXTENSION *HTML-FILE-EXTENSIONS*)
            then T
          else (CL:WITH-OPEN-STREAM
                (STREAM (OPENSTREAM FILE 'INPUT NIL))

                (* ;; "check if the file starts with any of the members of *HTML-FINGERPRINTS*")

                (LET ((FIRST-CHAR-OR-NIL (SKIPSEPRS STREAM)))
                     (if (NULL FIRST-CHAR-OR-NIL)
                         then NIL
                       else (LET [(FIRST-LINE (L-CASE (CL:READ-LINE STREAM]

                                 (* ;; 
                                 "see if it starts with any of the elements of *HTML-FINGERPRINTS*")

                                 (AND (for FINGERPRINT in *HTML-FINGERPRINTS*
                                         thereis (EQUAL 1 (STRPOS (L-CASE FINGERPRINT)
                                                                 FIRST-LINE NIL NIL T)))
                                      T])

(CL:DEFUN MAKE-HTML-FROM-TEXT (FILE HTMLFILE FONTS HEADING TABS)
   (TEXTTOIMAGEFILE FILE HTMLFILE HTML.IMAGETYPE FONTS HEADING TABS NIL))

(CL:DEFUN MAKE-HTML-FROM-TEDIT (FILE HTMLFILE)

   (* ;; "Make an HTML file from a TEdit document.  If FILE is a string, make it into a symbol for the file-name.  If it's a STREAM, use that stream.")

   [COND
      ((STRINGP FILE)
       (SETQ FILE (MKATOM FILE]
   (SETQ FILE (OPENTEXTSTREAM FILE))
   (TEDIT.FORMAT.HARDCOPY FILE HTMLFILE T NIL NIL NIL HTML.IMAGETYPE)
   (CLOSEF? FILE)
   HTMLFILE)

(ADDTOVAR PRINTFILETYPES (HTML (TEST HTMLFILEP)
                               (EXTENSION (HTML))
                               (CONVERSION (TEXT MAKE-HTML-FROM-TEXT TEDIT MAKE-HTML-FROM-TEDIT))))



(* ;; "debugging support")


(CL:DEFUN \CLEAN-FONT-CACHE ()
   "Remove all HTML fonts from \FONTSINCORE"
   (DECLARE (GLOBALVARS \FONTSINCORE))
   (LET ((MATCHES (\LOOKUPFONTSINCORE '* '* '* '* HTML.FONTCREATE.DEVICENAME)))
        (for FONT-SPEC in MATCHES do (SETFONTDESCRIPTOR (CAR FONT-SPEC)
                                            (CADR FONT-SPEC)
                                            (CADDR FONT-SPEC)
                                            (CADDDR FONT-SPEC)
                                            HTML.FONTCREATE.DEVICENAME NIL))))

(DEFMACRO DO-NOT (&BODY BODY)
   "Ignore the body, return NIL"
   NIL)
(DECLARE%: DONTCOPY
  (FILEMAP (NIL (3989 5476 (BEZIER-CONTROL-POINTS-TO-SVG 3989 . 5476)) (5478 5667 (CLOSE-KNOTS 5478 . 
5667)) (5669 5924 (COMPUTE-LINE-HEIGHT 5669 . 5924)) (5926 6182 (COMPUTE-MAX-ASCENT 5926 . 6182)) (
6184 6443 (COMPUTE-MAX-DESCENT 6184 . 6443)) (6445 8104 (CONVERT-TO-BEZIER 6445 . 8104)) (8106 8262 (
HTML.INCHES-TO-POINTS 8106 . 8262)) (8264 8366 (HTML.INCHES-TO-CENTIPOINTS 8264 . 8366)) (8368 8457 (
CP-TO-P 8368 . 8457)) (8459 8625 (ICP-TO-P 8459 . 8625)) (8627 8703 (P-TO-CP 8627 . 8703)) (8705 8864 
(PIXEL-TO-PT 8705 . 8864)) (8866 9026 (PT-TO-PIXEL 8866 . 9026)) (9028 9176 (\HTML.SVG-Y 9028 . 9176))
 (9178 9521 (MAKE-FONT-METRICS-FILE-NAME 9178 . 9521)) (9523 9923 (MAKE-CHARSET-METRICS-FILE-NAME 9523
 . 9923)) (14054 14443 (CHECK-BROWSER-METRICS-FORMAT 14054 . 14443)) (14445 16139 (CSS-CLASS-FROM 
14445 . 16139)) (16141 17632 (\HTML.READ-FONT-METRICS 16141 . 17632)) (17634 19013 (
\HTML.READ-CHARSET-METRICS 17634 . 19013)) (19630 19862 (with-htmldata 19630 . 19862)) (19864 20523 (
HTML.OUTPUT-GRAPHICS 19864 . 20523)) (20525 21661 (HTML.OUTPUT-TEXT 20525 . 21661)) (21663 22846 (
\HTML.MAYBE-START-PAGE 21663 . 22846)) (22848 23255 (\HTML.END-PAGE 22848 . 23255)) (23257 27101 (
HTML.WRITE-PREFACE 23257 . 27101)) (27103 32619 (OPENHTMLSTREAM 27103 . 32619)) (32621 32913 (
HTML.BACKCOLOR 32621 . 32913)) (32915 33463 (HTML.BITBLT 32915 . 33463)) (33465 35433 (HTML.BLTSHADE 
33465 . 35433)) (35435 35769 (HTML.BOTTOMMARGIN 35435 . 35769)) (35771 36280 (HTML.CHARWIDTH 35771 . 
36280)) (36282 36635 (HTML.CLIPPINGREGION 36282 . 36635)) (36637 37109 (HTML.CLOSEFN 36637 . 37109)) (
37111 37399 (HTML.COLOR 37111 . 37399)) (37401 37617 (HTML.DRAWCIRCLE 37401 . 37617)) (37619 38795 (
HTML.DRAWCURVE 37619 . 38795)) (38797 39546 (HTML.DRAWELLIPSE 38797 . 39546)) (39548 40182 (
HTML.DRAWLINE 39548 . 40182)) (40184 41060 (HTML.DRAWPOLYGON 40184 . 41060)) (41062 41237 (
HTML.FILLCIRCLE 41062 . 41237)) (41239 42158 (HTML.FILLPOLYGON 41239 . 42158)) (42160 43043 (HTML.FONT
 42160 . 43043)) (43045 43368 (HTML.LEFTMARGIN 43045 . 43368)) (43370 43661 (HTML.LINEFEED 43370 . 
43661)) (43663 43920 (HTML.MOVETO 43663 . 43920)) (43922 44038 (HTML.NEWPAGE 43922 . 44038)) (44040 
44362 (HTML.OPERATION 44040 . 44362)) (44364 46528 (HTML.OUTCHARFN 44364 . 46528)) (46530 46855 (
HTML.RESET 46530 . 46855)) (46857 47187 (HTML.RIGHTMARGIN 46857 . 47187)) (47189 47563 (HTML.SCALE 
47189 . 47563)) (47565 48663 (HTML.SCALEDBITBLT 47565 . 48663)) (48665 49008 (HTML.SPACEFACTOR 48665
 . 49008)) (49010 49651 (HTML.TERPRI 49010 . 49651)) (49653 49969 (HTML.TOPMARGIN 49653 . 49969)) (
49971 50287 (HTML.XPOSITION 49971 . 50287)) (50289 50605 (HTML.YPOSITION 50289 . 50605)) (50607 50852 
(MAKE-HTML-IMAGETYPE 50607 . 50852)) (50854 51432 (\HTML.FILLCIRCLE 50854 . 51432)) (51434 52251 (
\HTML.INIT-IMAGEDATA 51434 . 52251)) (52253 52775 (\HTMLSTREAM.INIT 52253 . 52775)) (52777 53177 (
WRITE-BASE64-PNG 52777 . 53177)) (53179 53842 (CONVERT-TO-PNG-BASE64 53179 . 53842)) (53844 56886 (
\HTML.FONTCREATE 53844 . 56886)) (56888 59737 (\HTML.FONTSAVAILABLE 56888 . 59737)) (59739 60745 (
\HTML.CREATECHARSET 59739 . 60745)) (60747 61585 (\HTML.CHANGECHARSET 60747 . 61585)) (61587 61924 (
MAKE-CHARSET-BIT-ARRAY 61587 . 61924)) (61926 62150 (KNOWN-CHARSET? 61926 . 62150)) (62152 62686 (
\HTML.WARN-CHARSET 62152 . 62686)) (63126 64309 (HTMLFILEP 63126 . 64309)) (64311 64453 (
MAKE-HTML-FROM-TEXT 64311 . 64453)) (64455 64864 (MAKE-HTML-FROM-TEDIT 64455 . 64864)) (65104 65655 (
\CLEAN-FONT-CACHE 65104 . 65655)) (65657 65731 (DO-NOT 65657 . 65731)))))
STOP

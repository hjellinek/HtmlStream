(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)

(FILECREATED "20-Nov-2024 15:09:23" {DSK}<Users>hjellinek>Projects>TrySVG>Lisp>HTMLSTREAM.;38 54945  

      :CHANGES-TO (FUNCTIONS BEZIER-CONTROL-POINTS-TO-SVG HTML.FILLPOLYGON PIXEL-TO-PT 
                         HTML.OUTPUT-TEXT HTML.CHARWIDTH HTML.DRAWPOLYGON PT-TO-PIXEL 
                         \HTML.READ-CHARSET-METRICS \HTML.READ-FONT-METRICS)
                  (VARS HTMLSTREAMCOMS)

      :PREVIOUS-DATE "19-Nov-2024 17:11:30" {DSK}<Users>hjellinek>Projects>TrySVG>Lisp>HTMLSTREAM.;35
)


(PRETTYCOMPRINT HTMLSTREAMCOMS)

(RPAQQ HTMLSTREAMCOMS
       ((RECORDS \BEZIER-POINT)
        (FUNCTIONS BEZIER-CONTROL-POINTS-TO-SVG CLOSE-KNOTS COMPUTE-LINE-HEIGHT COMPUTE-MAX-ASCENT 
               COMPUTE-MAX-DESCENT CONVERT-TO-BEZIER HTML.INCHES-TO-POINTS CP-TO-P ICP-TO-P 
               PIXEL-TO-PT PT-TO-PIXEL \HTML.SVG-Y)
        (RECORDS WEB-FONT-METRICS WEB-CHARSET-METRICS)
        (FUNCTIONS MAKE-FONT-METRICS-FILE-NAME MAKE-CHARSET-METRICS-FILE-NAME)
        (VARIABLES *WEB-FONT-DIRECTORY* *DEFAULT-WEB-FONT-METRICS-FILE-NAME* *WEB-FONT-EXPANSIONS* 
               *WEB-FONT-FAMILIES* *WEB-FONT-SIZES* *WEB-FONT-SLOPES* *WEB-FONT-WEIGHTS* 
               *WEB-CHARSET-METRICS-EXT* *WEB-CHARSET-METRICS-DOT-EXT* *WEB-FONT-METRICS-EXT* 
               *WEB-FONT-METRICS-DOT-EXT*)
        (VARIABLES *BROWSER-FONT-FILE-VERSION* *HTML.DEFAULT-PAGE-SIZE* HTML.FONTCREATE.DEVICENAME 
               HTML.IMAGETYPE HTML.STATE.BETWEEN-PAGES HTML.STATE.CLOSED HTML.STATE.NON-TEXT 
               HTML.STATE.NON-TEXT-OUTPUT HTML.STATE.TEXT-OUTPUT HTML.STATES \HTMLSTREAM.FDEV)
        (FUNCTIONS CHECK-BROWSER-METRICS-FORMAT CSS-CLASS-FROM \HTML.READ-CHARSET-METRICS 
               \HTML.READ-FONT-METRICS)
        (STRUCTURES HTML.IMAGEDATA HTML.FONTINFO)
        (FUNCTIONS with-htmldata CHECK-OPEN)
        (FUNCTIONS HTML.OUTPUT-GRAPHICS HTML.OUTPUT-TEXT \HTML.MAYBE-START-PAGE \HTML.END-PAGE 
               HTML.WRITE-PREFACE)
        (FUNCTIONS OPENHTMLSTREAM HTML.BACKCOLOR HTML.BITBLT HTML.BLTSHADE HTML.BOTTOMMARGIN 
               HTML.CHARWIDTH HTML.CLIPPINGREGION HTML.CLOSEFN HTML.COLOR HTML.DRAWCIRCLE 
               HTML.DRAWCURVE HTML.DRAWELLIPSE HTML.DRAWLINE HTML.DRAWPOLYGON HTML.FILLCIRCLE 
               HTML.FILLPOLYGON HTML.FONT HTML.LEFTMARGIN HTML.LINEFEED HTML.MOVETO HTML.NEWPAGE 
               HTML.OPERATION HTML.OUTCHARFN HTML.RESET HTML.RIGHTMARGIN HTML.SCALE HTML.SCALEDBITBLT
               HTML.SPACEFACTOR HTML.TERPRI HTML.TOPMARGIN HTML.XPOSITION HTML.YPOSITION 
               MAKE-HTML-IMAGETYPE \HTML.FILLCIRCLE \HTML.INIT-IMAGEDATA \HTMLSTREAM.INIT)
        (FUNCTIONS \HTML.FONTCREATE \HTML.FONTSAVAILABLE \HTML.CREATECHARSET \HTML.CHANGECHARSET)
        (P (\HTMLSTREAM.INIT))
        
        (* ;; "debugging support")

        (FUNCTIONS \CLEAN-FONT-CACHE DO-NOT)))
(DECLARE%: EVAL@COMPILE

(PROPRECORD \BEZIER-POINT (p0 p1 b0 b1))
)

(CL:DEFUN BEZIER-CONTROL-POINTS-TO-SVG (BEZIER-CONTROL-POINTS)
   "Convert the Bezier control points to SVG path format. Return NIL if the list is NIL"
   (if BEZIER-CONTROL-POINTS
       then (LET* [(START-POINT (fetch (\BEZIER-POINT p0) of (CAR BEZIER-CONTROL-POINTS)))
                   (RESULT (CL:FORMAT NIL "M ~d,~d " (PT-TO-PIXEL (CAR START-POINT))
                                  (PT-TO-PIXEL (CDR START-POINT]
                  [for CTRL-PT in (CDR BEZIER-CONTROL-POINTS) first (SETQ RESULT (CONCAT RESULT "C ")
                                                                     )
                     do (LET ((P0 (fetch (\BEZIER-POINT p0) of CTRL-PT))
                              (B0 (fetch (\BEZIER-POINT b0) of CTRL-PT))
                              (B1 (fetch (\BEZIER-POINT b1) of CTRL-PT))
                              (P1 (fetch (\BEZIER-POINT p1) of CTRL-PT)))
                             (SETQ RESULT (CONCAT RESULT (CL:FORMAT NIL "~d,~d ~d,~d ~d,~d "
                                                                (PT-TO-PIXEL (CAR B0))
                                                                (PT-TO-PIXEL (CDR B0))
                                                                (PT-TO-PIXEL (CAR B1))
                                                                (PT-TO-PIXEL (CDR B1))
                                                                (PT-TO-PIXEL (CAR P1))
                                                                (PT-TO-PIXEL (CDR P1]
                  RESULT)))

(CL:DEFUN CLOSE-KNOTS (KNOTS)
   "Create a closed polygon by adding the first point to the end of the list"
   (LET ((FIRST-KNOT (CAR KNOTS)))
        (APPEND KNOTS (LIST FIRST-KNOT))))

(CL:DEFUN COMPUTE-LINE-HEIGHT (CHARSETS)
   "Compute and return the max line height across all the charsets"
   (for CHARSET in CHARSETS largest (fetch (WEB-CHARSET-METRICS height) of CHARSET)
      finally (RETURN $$EXTREME)))

(CL:DEFUN COMPUTE-MAX-ASCENT (CHARSETS)
   "Compute and return the max max-ascent across all the charsets"
   (for CHARSET in CHARSETS largest (fetch (WEB-CHARSET-METRICS maxAscent) of CHARSET)
      finally (RETURN $$EXTREME)))

(CL:DEFUN COMPUTE-MAX-DESCENT (CHARSETS)
   "Compute and return the max max-descent across all the charsets"
   (for CHARSET in CHARSETS largest (fetch (WEB-CHARSET-METRICS maxDescent) of CHARSET)
      finally (RETURN $$EXTREME)))

(CL:DEFUN CONVERT-TO-BEZIER (POINTS)
   "Convert a list of points on a parametric cubic spline to a roughly equivalent set of Bezier control points"
   [LET ((NUM-POINTS (LENGTH POINTS)))
        (for N from 0 to (- NUM-POINTS 2)
           collect (LET* [(P0 (CL:NTH N POINTS))
                          (P1 (CL:NTH (CL:1+ N)
                                     POINTS))
                          [T0 (CONS (FLOAT (/ (- (CAR P1)
                                                 (CAR P0))
                                              3))
                                    (FLOAT (/ (- (CDR P1)
                                                 (CDR P0))
                                              3]
                          [T1 (CONS (FLOAT (/ (- (CAR P1)
                                                 (CAR P0))
                                              -3))
                                    (FLOAT (/ (- (CDR P1)
                                                 (CDR P0))
                                              -3]
                          [B0 (CONS (+ (CAR P0)
                                       (CAR T0))
                                    (+ (CDR P0)
                                       (CDR T0]
                          (B1 (CONS (+ (CAR P1)
                                       (CAR T1))
                                    (+ (CDR P1)
                                       (CDR T1]
                         (create \BEZIER-POINT
                                p0 _ P0
                                b0 _ B0
                                b1 _ B1
                                p1 _ P1])

(CL:DEFUN HTML.INCHES-TO-POINTS (INCHES)
   "Convert inches to points"

   (* ;; "Assume one inch contains 72 points")

   (FIXR (TIMES 72 INCHES)))

(DEFMACRO CP-TO-P (CENTIPOINTS)
   `(FQUOTIENT ,CENTIPOINTS 100))

(DEFMACRO ICP-TO-P (CENTIPOINTS)

   (* ;; "convert centipoints to an integer number of points")

   `(FIXR (FQUOTIENT ,CENTIPOINTS 100)))

(CL:DEFUN PIXEL-TO-PT (PIXELS)
   "Convert some number of pixels to that number of points"

   (* ;; "96 pixels = 72 points")

   (FTIMES 0.75 PIXELS))

(CL:DEFUN PT-TO-PIXEL (POINTS)
   "Convert some number of points to that number of pixels"

   (* ;; "96 pixels = 72 points")

   (FTIMES 1.333 POINTS))

(CL:DEFUN \HTML.SVG-Y (DATA MEDLEY-Y)
   "Return the SVG Y-coordinate for a Medley Y coordinate"
   (- (\HTML-TOP-MARGIN DATA)
      MEDLEY-Y))
(DECLARE%: EVAL@COMPILE

(PROPRECORD WEB-FONT-METRICS (family size weight style height charsets maxAscent maxDescent lispName
                                    lispFace lispSize))

(PROPRECORD WEB-CHARSET-METRICS (charset maxAscent maxDescent height xccsWidths))
)

(CL:DEFUN MAKE-FONT-METRICS-FILE-NAME (FAMILY SIZE WEIGHT SLOPE EXPANSION)
   "Create the name of the file that holds the metrics for the given font"

   (* ;; "The file name looks like <family>-<size>-<weight>-<slope>-<expansion>.wfm")

   (CL:FORMAT NIL "~A-~d-~A-~A-~A.~A" FAMILY SIZE WEIGHT SLOPE EXPANSION *WEB-FONT-METRICS-EXT*))

(CL:DEFUN MAKE-CHARSET-METRICS-FILE-NAME (FAMILY SIZE WEIGHT SLOPE EXPANSION CHARSET-NUM)
   "Create the name of the file that holds the metrics for the given charset"

   (* ;; "The file name looks like <family>-<size>-<weight>-<slope>-<expansion>-<charset>.wcm")

   (CL:FORMAT NIL "~A-~d-~A-~A-~A-~d.~A" FAMILY SIZE WEIGHT SLOPE EXPANSION CHARSET-NUM 
          *WEB-CHARSET-METRICS-EXT*))

(DEFGLOBALVAR *WEB-FONT-DIRECTORY* "."
   "The directory that holds .wfm and .wcm files")

(CL:DEFCONSTANT *DEFAULT-WEB-FONT-METRICS-FILE-NAME* "font-metrics.data"
   "The usual name of the raw font metrics file we get from the browser")

(CL:DEFCONSTANT *WEB-FONT-EXPANSIONS* '(REGULAR)
                                      "The Web font expansions we support")

(CL:DEFCONSTANT *WEB-FONT-FAMILIES* '((ROBOTO . "r")
                                      (ROBOTO-MONO . "rm")
                                      (NOTO-SANS-DISPLAY . "nsd"))
                                    
                              "A-list of supported Web font names, as atoms, with the CSS class name")

(CL:DEFCONSTANT *WEB-FONT-SIZES* '(10 20)
                                 "Sizes of the Web fonts we support, in points")

(CL:DEFCONSTANT *WEB-FONT-SLOPES* '(REGULAR ITALIC)
                                  "The Web font slopes we support")

(CL:DEFCONSTANT *WEB-FONT-WEIGHTS* '(MEDIUM BOLD)
                                   "The supported Web font weights")

(CL:DEFCONSTANT *WEB-CHARSET-METRICS-EXT* "wcm"
   "The filename extension for files that describe a charset's metrics")

(CL:DEFCONSTANT *WEB-CHARSET-METRICS-DOT-EXT* (CONCAT "." *WEB-CHARSET-METRICS-EXT*)
                                              
       "The filename extension for files that describe a charset's metrics, prepended with a dot (.)")

(CL:DEFCONSTANT *WEB-FONT-METRICS-EXT* "wfm"
   "The file extension for a web font metrics file")

(CL:DEFCONSTANT *WEB-FONT-METRICS-DOT-EXT* (CONCAT "." *WEB-FONT-METRICS-EXT*)
                                           
                           "The file extension for a web font metrics file, prepended with a dot (.)")

(CL:DEFCONSTANT *BROWSER-FONT-FILE-VERSION* 1
   "The current version of the font-metrics.data file")

(CL:DEFCONSTANT *HTML.DEFAULT-PAGE-SIZE*

   (* ;; "the default size of an HTML page, in points")

   (CONS (HTML.INCHES-TO-POINTS 8.5)
         (HTML.INCHES-TO-POINTS 11.0)))

(CL:DEFCONSTANT HTML.FONTCREATE.DEVICENAME 'HTML)

(CL:DEFCONSTANT HTML.IMAGETYPE 'HTML)

(CL:DEFCONSTANT HTML.STATE.BETWEEN-PAGES :HTML.STATE.BETWEEN-PAGES)

(CL:DEFCONSTANT HTML.STATE.CLOSED :HTML.STATE.CLOSED)

(CL:DEFCONSTANT HTML.STATE.NON-TEXT :HTML.STATE.NON-TEXT)

(CL:DEFCONSTANT HTML.STATE.NON-TEXT-OUTPUT :HTML.STATE.NON-TEXT-OUTPUT)

(CL:DEFCONSTANT HTML.STATE.TEXT-OUTPUT :HTML.STATE.TEXT-OUTPUT)

(CL:DEFCONSTANT HTML.STATES '(HTML.STATE.BETWEEN-PAGES HTML.STATE.NON-TEXT-OUTPUT 
                                    HTML.STATE.TEXT-OUTPUT HTML.STATE.CLOSED)
                            "All HTML imagestream states, for informational use.")

(DEFGLOBALVAR \HTMLSTREAM.FDEV "The FDEV for HTML output")

(CL:DEFUN CHECK-BROWSER-METRICS-FORMAT (VERSION)

   (* ;; "check that the version looks like (format <number>)")

   (if (NOT (AND (LISTP VERSION)
                 (EQ 'format (CAR VERSION))
                 (EQUAL (CADR VERSION)
                        *BROWSER-FONT-FILE-VERSION*)))
       then (ERROR "File does not begin with expected format declaration"))
   VERSION)

(CL:DEFUN CSS-CLASS-FROM (FAMILY SIZE FACE)
   "Compute the CSS class names from the FAMILY, SIZE, and FACE"

   (* ;; "the result will look like %"r10 bold italic%" or a variant")

   [LET* [(FONT-CLASS-NAME-ROOT (CDR (FASSOC FAMILY *WEB-FONT-FAMILIES*)))
          [FONT-AND-SIZE-CLASS-NAME (COND
                                       ((NULL FONT-CLASS-NAME-ROOT)
                                        (ERROR "Unknown Web font family" FAMILY))
                                       (T (CONCAT FONT-CLASS-NAME-ROOT SIZE]
          (WEIGHT-CLASS (COND
                           ((EQ (CAR FACE)
                                'BOLD)
                            "bold")
                           (T NIL)))
          (SLOPE-CLASS (COND
                          ((EQ (CADR FACE)
                               'ITALIC)
                           "italic")
                          (T NIL)))
          (SLOPE-AND-WEIGHT-CLASSES (COND
                                       ((AND (NULL WEIGHT-CLASS)
                                             (NULL SLOPE-CLASS))
                                        "")
                                       ((NULL WEIGHT-CLASS)
                                        SLOPE-CLASS)
                                       ((NULL SLOPE-CLASS)
                                        WEIGHT-CLASS)
                                       (T (CONCAT WEIGHT-CLASS " " SLOPE-CLASS]
         (CONCAT FONT-AND-SIZE-CLASS-NAME (COND
                                             ((EQUAL SLOPE-AND-WEIGHT-CLASSES "")
                                              "")
                                             (T (CONCAT " " SLOPE-AND-WEIGHT-CLASSES])

(CL:DEFUN \HTML.READ-CHARSET-METRICS (FAMILY SIZE FACE CHARSET-NUM)
   "Read a file containing a charset's metrics and return the WEB-CHARSET-METRICS"
   (LET* ((WEIGHT (fetch (WEB-FONT-FACE weight) of FACE))
          (SLOPE (fetch (WEB-FONT-FACE slope) of FACE))
          (EXPANSION (fetch (WEB-FONT-FACE expansion) of FACE))
          (FILE-NAME (PACKFILENAME.STRING 'DIRECTORY *WEB-FONT-DIRECTORY* 'NAME
                            (MAKE-CHARSET-METRICS-FILE-NAME FAMILY SIZE WEIGHT SLOPE EXPANSION 
                                   CHARSET-NUM)))
          (*PACKAGE* (CL:FIND-PACKAGE "IL")))
         (CL:WITH-OPEN-STREAM (IN (OPENSTREAM FILE-NAME 'INPUT))
                (CHECK-BROWSER-METRICS-FORMAT (READ IN))
                (LET* ((CHARSET (READ IN))
                       (HEIGHT (fetch (WEB-CHARSET-METRICS height) of CHARSET))
                       (MAX-ASCENT (fetch (WEB-CHARSET-METRICS maxAscent) of CHARSET))
                       (MAX-DESCENT (fetch (WEB-CHARSET-METRICS maxDescent) of CHARSET))
                       (WIDTHS (fetch (WEB-CHARSET-METRICS xccsWidths) of CHARSET)))
                      (CL:FORMAT T "charset family: ~A face: ~A size: ~A height: ~A charset: ~d~%%" 
                             FAMILY FACE SIZE HEIGHT CHARSET-NUM)
                      CHARSET))))

(CL:DEFUN \HTML.READ-FONT-METRICS (FAMILY FACE SIZE)
   "Read the font metrics file and return the WEB-FONT-DESCR"
   (LET* ((WEIGHT (fetch (WEB-FONT-FACE weight) of FACE))
          (SLOPE (fetch (WEB-FONT-FACE slope) of FACE))
          (EXPANSION (fetch (WEB-FONT-FACE expansion) of FACE))
          (FILE-NAME (PACKFILENAME.STRING 'DIRECTORY *WEB-FONT-DIRECTORY* 'NAME
                            (MAKE-FONT-METRICS-FILE-NAME FAMILY SIZE WEIGHT SLOPE EXPANSION)))
          (*PACKAGE* (CL:FIND-PACKAGE "IL")))
         (CL:WITH-OPEN-STREAM (IN (OPENSTREAM FILE-NAME 'INPUT))
                (CHECK-BROWSER-METRICS-FORMAT (READ IN))
                (LET* ((DESCR (READ IN))
                       (FAMILY (fetch (WEB-FONT-DESCR name) of DESCR))
                       (FACE (fetch (WEB-FONT-DESCR face) of DESCR))
                       (SIZE (fetch (WEB-FONT-DESCR size) of DESCR))
                       (HEIGHT (fetch (WEB-FONT-DESCR height) of DESCR))
                       (MAX-ASCENT (fetch (WEB-FONT-DESCR maxAscent) of DESCR))
                       (MAX-DESCENT (fetch (WEB-FONT-DESCR maxDescent) of DESCR))
                       (CHARSETS (fetch (WEB-FONT-DESCR charsets) of DESCR)))
                      (CL:FORMAT T "font: ~A face: ~A size: ~A height: ~A #charsets: ~d~%%" FAMILY 
                             FACE SIZE HEIGHT CHARSETS)
                      DESCR))))

(CL:DEFSTRUCT (HTML.IMAGEDATA (:CONC-NAME \HTML-))
   "Private data for HTMLSTREAMs"
   BACKING-STREAM
   FONT
   (CHARSET \DEFAULTCHARSET)
   CLIPPING-REGION
   (SPACE-FACTOR 1.0)
   IMAGE-OPERATION BG-COLOR FG-COLOR (SCALE 1.0)
   (PAGE-NUM 0)
   (X-POSITION 0)
   (Y-POSITION 0)
   (LEFT-MARGIN 0)
   (TOP-MARGIN 1024)
   (RIGHT-MARGIN 1024)
   (BOTTOM-MARGIN 0)
   (LINEFEED 12)
   (STATE HTML.STATE.BETWEEN-PAGES)
   PAGE-HEIGHT PAGE-WIDTH TITLE)

(CL:DEFSTRUCT (HTML.FONTINFO (:CONC-NAME \HTMLFONT-))
   "Private data for an HTML FONTDESCRIPTOR"
   (CHARSETS NIL)
   (CSS-CLASS NIL))

(DEFMACRO with-htmldata ((DATA-VAR-NAME STREAM)
                         &BODY
                         (BODY DECLS ENV))
   `(LET [(,DATA-VAR-NAME (fetch (STREAM IMAGEDATA) of ,STREAM]
         ,@DECLS
         ,@BODY))

(DEFMACRO CHECK-OPEN (STREAM)
   `[with-htmldata (DATA ,STREAM)
           (COND
              ((EQ (\HTML-STATE DATA)
                   HTML.STATE.CLOSED)
               (ERROR "HTMLSTREAM is in state CLOSED"])

(CL:DEFUN HTML.OUTPUT-GRAPHICS (STREAM)
   "We're going to do some graphics now"
   (with-htmldata (DATA STREAM)
          (\HTML.MAYBE-START-PAGE DATA STREAM)
          (SELECTC (\HTML-STATE DATA)
              (HTML.STATE.NON-TEXT-OUTPUT                    (* ; "this is the state we need")
                   )
              (HTML.STATE.TEXT-OUTPUT                        (* ; "end the text section")
                   (printout (\HTML-BACKING-STREAM DATA)
                          "</text>" T))
              NIL)

          (* ;; "finally")

          (CL:SETF (\HTML-STATE DATA)
                 HTML.STATE.NON-TEXT-OUTPUT)))

(CL:DEFUN HTML.OUTPUT-TEXT (STREAM)
   "We're being asked to write text"
   (with-htmldata (DATA STREAM)
          (\HTML.MAYBE-START-PAGE DATA STREAM)
          (LET* ((FONT (\HTML-FONT DATA))
                 (FONT-DATA (fetch (FONTDESCRIPTOR OTHERDEVICEFONTPROPS) of FONT)))
                (SELECTC (\HTML-STATE DATA)
                    ((LIST HTML.STATE.NON-TEXT-OUTPUT HTML.STATE.BETWEEN-PAGES) 
                                                             (* ; "start a new text section")
                         (printout (\HTML-BACKING-STREAM DATA)
                                "<text class='"
                                (\HTMLFONT-CSS-CLASS FONT-DATA)
                                "' x=%""
                                (\HTML-X-POSITION DATA)
                                "pt%" y=%""
                                (\HTML.SVG-Y DATA (\HTML-Y-POSITION DATA))
                                "pt%">"))
                    (HTML.STATE.TEXT-OUTPUT                  (* ; "continue this text section")
                         )
                    NIL)

                (* ;; "finally")

                (CL:SETF (\HTML-STATE DATA)
                       HTML.STATE.TEXT-OUTPUT))))

(CL:DEFUN \HTML.MAYBE-START-PAGE (DATA STREAM)

   (* ;; "We're going to do output of some sort, so start an SVG stanza if necessary")

   [with-htmldata (DATA STREAM)
          (if (EQ (\HTML-STATE DATA)
                  HTML.STATE.BETWEEN-PAGES)
              then (LET [(BACKING (\HTML-BACKING-STREAM DATA))
                         [PAGE-WIDTH (IABS (- (\HTML-RIGHT-MARGIN DATA)
                                              (\HTML-LEFT-MARGIN DATA]
                         (PAGE-HEIGHT (IABS (- (\HTML-BOTTOM-MARGIN DATA)
                                               (\HTML-TOP-MARGIN DATA]
                        (CL:FORMAT BACKING 
                               "<svg width=%"~dpt%" height=%"~dpt%" viewBox=%"~d ~d ~d ~d%">~%%" 
                               PAGE-WIDTH PAGE-HEIGHT (\HTML-LEFT-MARGIN DATA)
                               (\HTML-BOTTOM-MARGIN DATA)
                               PAGE-WIDTH PAGE-HEIGHT)
                        (CL:SETF (\HTML-X-POSITION DATA)
                               (\HTML-LEFT-MARGIN DATA))
                        (CL:SETF (\HTML-Y-POSITION DATA)
                               (\HTML-TOP-MARGIN DATA])

(CL:DEFUN \HTML.END-PAGE (DATA STREAM)
   "End the current page"
   (if (EQ (\HTML-STATE DATA)
           HTML.STATE.TEXT-OUTPUT)
       then (HTML.OUTPUT-GRAPHICS STREAM))
   (CL:INCF (\HTML-PAGE-NUM DATA))
   (HTML.RESET STREAM)
   (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
        (CL:FORMAT BACKING "</svg>~%%"))
   (CL:SETF (\HTML-STATE DATA)
          HTML.STATE.BETWEEN-PAGES))

(CL:DEFUN HTML.WRITE-PREFACE (STREAM)
   "Write the preamble to the file: <html><head>... etc."
   (with-htmldata (DATA STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA))
                (TITLE (\HTML-TITLE DATA)))
               (printout BACKING "<!DOCTYPE HTML>" T)
               (printout BACKING "<html>" T)
               (printout BACKING "<head>" T)
               (printout BACKING "<title>" TITLE "</title>" T)
               (printout BACKING "<link rel=%"preconnect%" href=%"https://fonts.googleapis.com%">" T)
               (printout BACKING 
                      "<link rel=%"preconnect%" href=%"https://fonts.gstatic.com%" crossorigin>" T)
               (printout BACKING "<link href=%"https://fonts.googleapis.com/css2?family=Noto+Sans+Display&family=Roboto&family=Roboto+Mono&display=swap%" rel=%"stylesheet%">"
                      T)
               (printout BACKING "<script>" T)
               (printout BACKING "    const fontSpecs = [" T)
               (printout BACKING "            {family: %"Roboto Mono%", size: %"10pt%"}," T)
               (printout BACKING "            {family: %"Noto Sans Display%", size: %"10pt%"}," T)
               (printout BACKING "            {family: %"Roboto%", size: %"10pt%"}," T)
               (printout BACKING "            {family: %"Roboto Mono%", size: %"20pt%"}," T)
               (printout BACKING "            {family: %"Noto Sans Display%", size: %"20pt%"}," T)
               (printout BACKING "            {family: %"Roboto%", size: %"20pt%"}," T)
               (printout BACKING "    ];" T T)
               (printout BACKING "    function fontFromSpec(font) {" T 
                      "        return font.size + %" %" + font.family;" T "    }" T T)
               (printout BACKING "    const fontLoadPromises = [];" T T)
               (printout BACKING "    for (const spec of fontSpecs) {" T 
                      "        fontLoadPromises.push(document.fonts.load(fontFromSpec(spec)));" T 
                      "    }" T T)
               (printout BACKING 
                  "    Promise.all(fontLoadPromises).then(_ => { console.log('All fonts loaded');});"
                      T)
               (printout BACKING "</script>" T)
               (printout BACKING "<style>" T)

               (* ;; "all space chars in text blocks are significant:")

               (printout BACKING "text { white-space: pre }" T)
               (printout BACKING ".nsd10 { font-family: 'Noto Sans Display'; font-size: 10pt }" T)
               (printout BACKING ".nsd20 { font-family: 'Noto Sans Display'; font-size: 20pt }" T)
               (printout BACKING ".nsd30 { font-family: 'Noto Sans Display'; font-size: 30pt }" T)
               (printout BACKING ".nsd40 { font-family: 'Noto Sans Display'; font-size: 40pt }" T)
               (printout BACKING ".rm10 { font-family: 'Roboto Mono'; font-size: 10pt }" T)
               (printout BACKING ".rm20 { font-family: 'Roboto Mono'; font-size: 20pt }" T)
               (printout BACKING ".rm30 { font-family: 'Roboto Mono'; font-size: 30pt }" T)
               (printout BACKING ".rm40 { font-family: 'Roboto Mono'; font-size: 40pt }" T)
               (printout BACKING ".r10 { font-family: 'Roboto'; font-size: 10pt }" T)
               (printout BACKING ".r20 { font-family: 'Roboto'; font-size: 20pt }" T)
               (printout BACKING ".r30 { font-family: 'Roboto'; font-size: 30pt }" T)
               (printout BACKING ".r40 { font-family: 'Roboto'; font-size: 40pt }" T)
               (printout BACKING ".bold { font-weight: bold }" T)
               (printout BACKING ".italic { font-style: italic }" T)
               (printout BACKING "</style>" T)
               (printout BACKING "</head>" T)
               (printout BACKING "<body>" T)
               BACKING)))

(CL:DEFUN OPENHTMLSTREAM (FILENAME &OPTIONAL OPTIONS)
   "Open and return an HTML imagestream"
   (LET* ((TITLE (OR (LISTGET OPTIONS 'TITLE)
                     FILENAME))
          (REGION (OR (LISTGET OPTIONS 'REGION)
                      *HTML.DEFAULT-PAGE-SIZE*))
          [BACKING (OPENSTREAM FILENAME 'OUTPUT NIL '((FORMAT :UTF-8]
          (IMAGEOPS (create IMAGEOPS))
          (IMAGEDATA (MAKE-HTML.IMAGEDATA :BACKING-STREAM BACKING :TITLE TITLE :PAGE-WIDTH
                            (CAR REGION)
                            :PAGE-HEIGHT
                            (CDR REGION)))
          (HTMLSTREAM (create STREAM
                             FULLFILENAME _ (FULLNAME BACKING)
                             DEVICE _ \HTMLSTREAM.FDEV
                             ACCESS _ 'OUTPUT
                             OUTCHARFN _ #'HTML.OUTCHARFN
                             STRMBOUTFN _ #'\BUFFERED.BOUT   (* ; "is this right?")
                             IMAGEOPS _ IMAGEOPS
                             USERCLOSEABLE _ T
                             USERVISIBLE _ T
                             IMAGEDATA _ IMAGEDATA)))

         (* ;; "Make the backing file invisible")

         (replace (STREAM USERVISIBLE) of BACKING with NIL)

         (* ;; "install our OUTCHARFN. you can't do this in the create.")

         (replace (STREAM OUTCHARFN) of HTMLSTREAM with #'HTML.OUTCHARFN)

         (* ;; "replace (do not smash!) the stream's IMAGEOPS with ours")

         (replace IMAGEOPS of HTMLSTREAM with IMAGEOPS)

         (* ;; "Set the informational fields")

         (replace IMFONTCREATE of IMAGEOPS with HTML.FONTCREATE.DEVICENAME)
         (replace IMAGETYPE of IMAGEOPS with HTML.IMAGETYPE)

         (* ;; "Set the functions")

         (replace IMCLOSEFN of IMAGEOPS with #'HTML.CLOSEFN)
         (replace IMDRAWLINE of IMAGEOPS with #'HTML.DRAWLINE)
         (replace IMDRAWCURVE of IMAGEOPS with #'HTML.DRAWCURVE)
         (replace IMDRAWCIRCLE of IMAGEOPS with #'HTML.DRAWCIRCLE)
         (replace IMDRAWELLIPSE of IMAGEOPS with #'HTML.DRAWELLIPSE)
         (replace IMFILLPOLYGON of IMAGEOPS with #'HTML.FILLPOLYGON)
         (replace IMDRAWPOLYGON of IMAGEOPS with #'HTML.DRAWPOLYGON)
         (replace IMFILLCIRCLE of IMAGEOPS with #'HTML.FILLCIRCLE)
         (replace IMBLTSHADE of IMAGEOPS with #'HTML.BLTSHADE)
         (replace IMBITBLT of IMAGEOPS with #'HTML.BITBLT)
         (replace IMSCALEDBITBLT of IMAGEOPS with #'HTML.SCALEDBITBLT)
         (replace IMMOVETO of IMAGEOPS with #'HTML.MOVETO)
         (replace IMCHARWIDTH of IMAGEOPS with #'HTML.CHARWIDTH)
         (replace IMNEWPAGE of IMAGEOPS with #'HTML.NEWPAGE)
         (replace IMTERPRI of IMAGEOPS with #'HTML.TERPRI)
         (replace IMRESET of IMAGEOPS with #'HTML.RESET)
         (replace IMCLIPPINGREGION of IMAGEOPS with #'HTML.CLIPPINGREGION)
         (replace IMXPOSITION of IMAGEOPS with #'HTML.XPOSITION)
         (replace IMYPOSITION of IMAGEOPS with #'HTML.YPOSITION)
         (replace IMFONT of IMAGEOPS with #'HTML.FONT)
         (replace IMLEFTMARGIN of IMAGEOPS with #'HTML.LEFTMARGIN)
         (replace IMRIGHTMARGIN of IMAGEOPS with #'HTML.RIGHTMARGIN)
         (replace IMTOPMARGIN of IMAGEOPS with #'HTML.TOPMARGIN)
         (replace IMBOTTOMMARGIN of IMAGEOPS with #'HTML.BOTTOMMARGIN)
         (replace IMLINEFEED of IMAGEOPS with #'HTML.LINEFEED)
         (replace IMSCALE of IMAGEOPS with #'HTML.SCALE)
         (replace IMSPACEFACTOR of IMAGEOPS with #'HTML.SPACEFACTOR)
         (replace IMOPERATION of IMAGEOPS with #'HTML.OPERATION)
         (replace IMBACKCOLOR of IMAGEOPS with #'HTML.BACKCOLOR)
         (replace IMCOLOR of IMAGEOPS with #'HTML.COLOR)

         (* ;; "Maybe implement these later:")

         (replace IMWRITEPIXEL of IMAGEOPS with #'NILL)
         (replace IMROTATE of IMAGEOPS with #'NILL)
         (replace IMDRAWARC of IMAGEOPS with #'NILL)
         (replace IMTRANSLATE of IMAGEOPS with #'NILL)
         (replace IMSCALE2 of IMAGEOPS with #'NILL)
         (replace IMPUSHSTATE of IMAGEOPS with #'NILL)
         (replace IMPOPSTATE of IMAGEOPS with #'NILL)
         (replace IMDEFAULTSTATE of IMAGEOPS with #'NILL)
         (replace IMCHARWIDTHY of IMAGEOPS with #'NILL)
         (replace IMBITMAPSIZE of IMAGEOPS with #'NILL)

         (* ;; "we can init the font now that the IMAGEOPS are complete")

         (LET* [(USER-FONT (LISTGET OPTIONS 'FONT))
                (DEFAULTFONT (if USER-FONT
                                 then (\COERCEFONTDESC USER-FONT HTMLSTREAM)
                               else (FONTCREATE 'NOTO-SANS-DISPLAY 10 'MRR 0 'HTML]

               (* ;; "Finish initializing the IMAGEDATA")

               (\HTML.INIT-IMAGEDATA HTMLSTREAM DEFAULTFONT)

               (* ;; "write the preface")

               (HTML.WRITE-PREFACE HTMLSTREAM)

               (* ;; "return the stream")

               HTMLSTREAM)))

(CL:DEFUN HTML.BACKCOLOR (STREAM NEW-COLOR)
   (printout T "HTML.BACKCOLOR" T)
   (CHECK-OPEN STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-BG-COLOR DATA)))
               (COND
                  (NEW-COLOR (CL:SETF (\HTML-BG-COLOR DATA)
                                    NEW-COLOR)))
               OLD-VALUE)))

(CL:DEFUN HTML.BITBLT (SOURCEBITMAP SOURCELEFFT SOURCEBOTTOM STREAM DESTINATIONLEFT DESTINATIONBOTTOM
                             WIDTH HEIGHT SOURCETYPE OPERATION TEXTURE CLIPPINGREGION 
                             CLIPPEDSOURCELEFT CLIPPEDSOURCEBOTTOM)
   (printout T "HTML.BITBLT" T))

(CL:DEFUN HTML.BLTSHADE (TEXTURE STREAM DESTINATIONLEFT DESTINATIONBOTTOM WIDTH HEIGHT OPERATION 
                               CLIPPINGREGION)
   (printout T "HTML.BLTSHADE" T))

(CL:DEFUN HTML.BOTTOMMARGIN (STREAM NEW-BOTTOM-MARGIN)
   (printout T "HTML.BOTTOMMARGIN")
   (CHECK-OPEN STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-BOTTOM-MARGIN DATA)))
               (if NEW-BOTTOM-MARGIN
                   then (CL:SETF (\HTML-BOTTOM-MARGIN DATA)
                               NEW-BOTTOM-MARGIN))
               OLD-VALUE)))

(CL:DEFUN HTML.CHARWIDTH (STREAM CHCODE)
   "Character width accessor that obeys space-factors"
   (with-htmldata (DATA STREAM)
          (LET ((CHAR-WIDTH (\FGETCHARWIDTH (\HTML-FONT DATA)
                                   CHCODE))
                (SPACE-FACTOR (\HTML-SPACE-FACTOR DATA)))
               (if (AND (= CHCODE (CHARCODE SPACE))
                        (NOT (= SPACE-FACTOR 1.0)))
                   then (FTIMES SPACE-FACTOR CHAR-WIDTH)
                 else CHAR-WIDTH))))

(CL:DEFUN HTML.CLIPPINGREGION (STREAM NEW-REGION)
   (printout T "HTML.CLIPPINGREGION")
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-CLIPPING-REGION DATA)))
               (COND
                  (NEW-REGION (CL:SETF (\HTML-CLIPPING-REGION DATA)
                                     NEW-REGION)))
               OLD-VALUE)))

(CL:DEFUN HTML.CLOSEFN (STREAM)
   (printout T "HTML.CLOSEFN" T)
   (with-htmldata (DATA STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA)))

               (* ;; " TODO close any open sections (e.g., text)")

               (if (EQ (\HTML-STATE DATA)
                       HTML.STATE.TEXT-OUTPUT)
                   then (HTML.OUTPUT-GRAPHICS STREAM))
               (printout BACKING T "</svg>" T "</body>" T "</html>" T)
               (CLOSEF BACKING)
               (CL:SETF (\HTML-STATE DATA)
                      HTML.STATE.CLOSED))))

(CL:DEFUN HTML.COLOR (STREAM NEW-COLOR)
   (printout T "HTML.COLOR" T)
   (CHECK-OPEN STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-FG-COLOR DATA)))
               (COND
                  (NEW-COLOR (CL:SETF (\HTML-FG-COLOR DATA)
                                    NEW-COLOR)))
               OLD-VALUE)))

(CL:DEFUN HTML.DRAWCIRCLE (STREAM CENTERX CENTERY RADIUS BRUSH DASHING)
   "Draw a circle"

   (* ;; "TODO implement BRUSH and DASHING")

   (\HTML.FILLCIRCLE STREAM CENTERX CENTERY RADIUS "transparent"))

(CL:DEFUN HTML.DRAWCURVE (STREAM KNOTS CLOSED BRUSH DASHING)
   "Draw a parametric cubic spline curve"

   (* ;; "TODO ignore BRUSH and DASHING for now")

   (* ;; "SVG can draw curves in 3 representations, quadratic Bezier, cubic Bezier, or elliptical arcs.  We will convert KNOTS to cubic Bezier control points.")

   (printout T "HTML.DRAWCURVE" T)
   (CHECK-OPEN STREAM)
   [with-htmldata (DATA STREAM)
          (HTML.OUTPUT-GRAPHICS STREAM)
          (LET [(BACKING (\HTML-BACKING-STREAM DATA))
                (BEZIER-CONTROL-POINTS (CONVERT-TO-BEZIER (if CLOSED
                                                              then (CLOSE-KNOTS KNOTS)
                                                            else KNOTS]
               (CL:FORMAT BACKING "<path fill='none' stroke='black' d='~A' />~%%" (
                                                                         BEZIER-CONTROL-POINTS-TO-SVG
                                                                                   
                                                                                BEZIER-CONTROL-POINTS
                                                                                   ])

(CL:DEFUN HTML.DRAWELLIPSE (STREAM CENTERX CENTERY SEMIMINORRADIUS SEMIMAJORRADIUS ORIENTATION BRUSH
                                  DASHING)
   "Draw an ellipse"

   (* ;; "TODO implement BRUSH and DASHING")

   [with-htmldata (DATA STREAM)
          (HTML.OUTPUT-GRAPHICS STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
               (CL:FORMAT BACKING "<ellipse cx=%"~dpt%" cy=%"~dpt%" rx=%"~dpt%" ry=%"~dpt%" transform=%"rotate(~d,~d,~d)%" fill=%"transparent%" stroke=%"black%" stroke-width=%"1pt%"/>~%%"
                      CENTERX (\HTML.SVG-Y DATA CENTERY)
                      SEMIMAJORRADIUS SEMIMINORRADIUS (- ORIENTATION)
                      CENTERX
                      (\HTML.SVG-Y DATA CENTERY])

(CL:DEFUN HTML.DRAWLINE (STREAM X1 Y1 X2 Y2 WIDTH OPERATION COLOR DASHING)
   "Draw a line"

   (* ;; "TODO implement OPERATION, COLOR, and DASHING")

   (with-htmldata (DATA STREAM)
          (HTML.OUTPUT-GRAPHICS STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
               (CL:FORMAT BACKING 
  "<line x1=%"~dpt%" y1=%"~dpt%" x2=%"~dpt%" y2=%"~dpt%" stroke=%"black%" stroke-width=%"~dpt%"/>~%%"
                      X1 (\HTML.SVG-Y DATA Y1)
                      X2
                      (\HTML.SVG-Y DATA Y2)
                      (OR WIDTH 1)))
          (HTML.MOVETO STREAM X2 Y2)))

(CL:DEFUN HTML.DRAWPOLYGON (STREAM POINTS CLOSED BRUSH DASHING)
   "Draw an open or closed polygon"

   (* ;; "TODO implement BRUSH and DASHING")

   (* ;; "Because the polygon tags only accept coordinates in pixel units, we must scale values by 1.33  to get points.")

   (CHECK-OPEN STREAM)
   (HTML.OUTPUT-GRAPHICS STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA))
                (DRAWING-TYPE (if CLOSED
                                  then "polygon"
                                else "polyline")))
               (CL:FORMAT BACKING "<~a fill=%"none%" stroke=%"black%" stroke-width=%"1pt%" points=%""
                      DRAWING-TYPE)
               [for POINT in POINTS do (CL:FORMAT BACKING "~d,~d " (PT-TO-PIXEL (CAR POINT))
                                              (PT-TO-PIXEL (\HTML.SVG-Y DATA (CDR POINT]
               (CL:FORMAT BACKING "%" />~%%"))))

(CL:DEFUN HTML.FILLCIRCLE (STREAM CENTERX CENTERY RADIUS TEXTURE)

   (* ;; "TODO implement TEXTURE")

   (\HTML.FILLCIRCLE STREAM CENTERX CENTERY RADIUS "black"))

(CL:DEFUN HTML.FILLPOLYGON (STREAM POINTS TEXTURE OPERATION WINDING-NUMBER)
   "Fill a closed polygon"

   (* ;; "TODO implement TEXTURE, OPERATION")

   (CHECK-OPEN STREAM)
   (HTML.OUTPUT-GRAPHICS STREAM)
   (with-htmldata (DATA STREAM)
          (LET [(BACKING (\HTML-BACKING-STREAM DATA))
                (FILL-RULE (COND
                              ((ZEROP WINDING-NUMBER)
                               "nonzero")
                              (T "evenodd"]
               (CL:FORMAT BACKING 
           "<polygon fill=%"black%" fill-rule=%"~A%" stroke=%"black%" stroke-width=%"1pt%" points=%""
                      FILL-RULE)
               [for POINT in POINTS do (CL:FORMAT BACKING "~d,~d " (PT-TO-PIXEL (CAR POINT))
                                              (PT-TO-PIXEL (\HTML.SVG-Y DATA (CDR POINT]
               (CL:FORMAT BACKING "%"/>~%%"))))

(CL:DEFUN HTML.FONT (STREAM NEW-FONT)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-FONT DATA)))
               (COND
                  (NEW-FONT                                  (* ; 
  "NEW-FONT might be a FONTDESCRIPTOR or a list of properties to apply to the current FONTDESCRIPTOR")
                         (SETQ NEW-FONT (OR (\COERCEFONTDESC NEW-FONT STREAM T)
                                            [FONTCOPY OLD-VALUE `(NOERROR T ,@NEW-FONT]
                                            (ERROR "Font not found or illegal parameter")))
                         (CL:SETF (\HTML-FONT DATA)
                                NEW-FONT)
                         (CL:SETF (\HTML-LINEFEED DATA)
                                (FONTPROP NEW-FONT 'HEIGHT))
                         (HTML.OUTPUT-GRAPHICS STREAM)))
               OLD-VALUE)))

(CL:DEFUN HTML.LEFTMARGIN (STREAM NEW-LEFT-MARGIN)
   (printout T "HTML.LEFTMARGIN" T)
   (CHECK-OPEN STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-LEFT-MARGIN DATA)))
               (COND
                  (NEW-LEFT-MARGIN (CL:SETF (\HTML-LEFT-MARGIN DATA)
                                          NEW-LEFT-MARGIN)))
               OLD-VALUE)))

(CL:DEFUN HTML.LINEFEED (STREAM NEW-DELTA)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-LINEFEED DATA)))
               (COND
                  (NEW-DELTA (CL:SETF (\HTML-LINEFEED DATA)
                                    NEW-DELTA)))
               OLD-VALUE)))

(CL:DEFUN HTML.MOVETO (STREAM X Y)
   "Move to X, Y"
   (HTML.OUTPUT-GRAPHICS STREAM)
   (with-htmldata (DATA STREAM)
          (CL:SETF (\HTML-X-POSITION DATA)
                 X)
          (CL:SETF (\HTML-Y-POSITION DATA)
                 Y)))

(CL:DEFUN HTML.NEWPAGE (STREAM)
   (printout T "HTML.NEWPAGE" T))

(CL:DEFUN HTML.OPERATION (STREAM NEW-OPERATION)
   (printout T "HTML.OPERATION" T)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-IMAGE-OPERATION DATA)))
               (COND
                  (NEW-OPERATION (CL:SETF (\HTML-IMAGE-OPERATION DATA)
                                        NEW-OPERATION)))
               OLD-VALUE)))

(CL:DEFUN HTML.OUTCHARFN (STREAM CHCODE)
   "Write a character, which may cause us to write other markup first"
   (CHECK-OPEN STREAM)

   (* ;; "TODO keep track of the current charset in the imagedata")

   (* ;; 
   "Fetch the CHARSETINFO for a given charset from a FONTDESCRIPTOR by calling \GETCHARSETINFO.")

   [with-htmldata (DATA STREAM)
          (LET ((CHARSET (\CHARSET CHCODE))
                (CHAR8CODE (\CHAR8CODE CHCODE))
                (CURRENT-CHARSET (\HTML-CHARSET DATA))
                (BACKING (\HTML-BACKING-STREAM DATA)))
               (HTML.OUTPUT-TEXT STREAM)
               (if (NEQ CHARSET (\HTML-CHARSET DATA))
                   then (\HTML.CHANGECHARSET DATA CHARSET))
               (SELECTC CHCODE
                   ((CHARCODE ^J)                            (* ; "handle LF")
                        (HTML.TERPRI STREAM))
                   ((CHARCODE ^M)                            (* ; "handle CR")
                        (HTML.TERPRI STREAM))
                   ((CHARCODE ^L) 
                        (printout T "new page" T)            (* ; "handle pagefeed")
                        (HTML.NEWPAGE STREAM))
                   (LET* ((CHAR-WIDTH (HTML.CHARWIDTH STREAM CHCODE))
                          (NEW-X-POSITION (+ (\HTML-X-POSITION DATA)
                                             CHAR-WIDTH)))
                         (if (> NEW-X-POSITION (\HTML-RIGHT-MARGIN DATA))
                             then (HTML.TERPRI STREAM)
                           else (CL:SETF (\HTML-X-POSITION DATA)
                                       NEW-X-POSITION))
                         (HTML.OUTPUT-TEXT STREAM)
                         (SELECTC CHCODE
                             ((CHARCODE &) 
                                  (CL:FORMAT BACKING "&amp;"))
                             ((CHARCODE <) 
                                  (CL:FORMAT BACKING "&lt;"))
                             (\OUTCHAR BACKING CHCODE])

(CL:DEFUN HTML.RESET (STREAM)
   (printout T "HTML.RESET" T)
   (with-htmldata (DATA STREAM)
          (CL:SETF (\HTML-X-POSITION DATA)
                 (\HTML-LEFT-MARGIN DATA))
          (CL:SETF (\HTML-Y-POSITION DATA)
                 (\HTML-TOP-MARGIN DATA))
          (CL:SETF (\HTML-STATE DATA)
                 HTML.STATE.NON-TEXT-OUTPUT)))

(CL:DEFUN HTML.RIGHTMARGIN (STREAM NEW-RIGHT-MARGIN)
   (printout T "HTML.RIGHTMARGIN" T)
   (CHECK-OPEN STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-RIGHT-MARGIN DATA)))
               (COND
                  (NEW-RIGHT-MARGIN (CL:SETF (\HTML-RIGHT-MARGIN DATA)
                                           NEW-RIGHT-MARGIN)))
               OLD-VALUE)))

(CL:DEFUN HTML.SCALE (STREAM NEW-SCALE)
   (printout T "HTML.SCALE" T)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-SCALE DATA)))
               (COND
                  (NEW-SCALE (CL:SETF (\HTML-SCALE DATA)
                                    NEW-SCALE)))
               OLD-VALUE)))

(CL:DEFUN HTML.SCALEDBITBLT (SOURCEBITMAP SOURCELEFFT SOURCEBOTTOM STREAM DESTINATIONLEFT 
                                   DESTINATIONBOTTOM WIDTH HEIGHT SOURCETYPE OPERATION TEXTURE 
                                   CLIPPINGREGION CLIPPEDSOURCELEFT CLIPPEDSOURCEBOTTOM SCALE)
   (printout T "HTML.SCALEDBITBLT" T))

(CL:DEFUN HTML.SPACEFACTOR (STREAM NEW-FACTOR)
   (printout T "HTML.SPACEFACTOR" T)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-SPACE-FACTOR DATA)))
               (COND
                  (NEW-FACTOR (CL:SETF (\HTML-SPACE-FACTOR DATA)
                                     NEW-FACTOR)))
               OLD-VALUE)))

(CL:DEFUN HTML.TERPRI (STREAM)
   "Do a newline"
   (CHECK-OPEN STREAM)
   [with-htmldata (DATA STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
               (CL:SETF (\HTML-X-POSITION DATA)
                      (\HTML-LEFT-MARGIN DATA))
               (CL:DECF (\HTML-Y-POSITION DATA)
                      (\HTML-LINEFEED DATA))

               (* ;; "if Y-POSITION overflowed BOTTOM-MARGIN, start a new page")

               (if (< (\HTML-Y-POSITION DATA)
                      (\HTML-BOTTOM-MARGIN DATA))
                   then (\HTML.END-PAGE DATA STREAM)
                 else (HTML.OUTPUT-GRAPHICS STREAM])

(CL:DEFUN HTML.TOPMARGIN (STREAM NEW-TOP-MARGIN)
   (CHECK-OPEN STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-TOP-MARGIN DATA)))
               (COND
                  (NEW-TOP-MARGIN (CL:SETF (\HTML-TOP-MARGIN DATA)
                                         NEW-TOP-MARGIN)))
               OLD-VALUE)))

(CL:DEFUN HTML.XPOSITION (STREAM NEW-X-POSITION)
   (CHECK-OPEN STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-X-POSITION DATA)))
               (COND
                  (NEW-X-POSITION (CL:SETF (\HTML-X-POSITION DATA)
                                         NEW-X-POSITION)))
               OLD-VALUE)))

(CL:DEFUN HTML.YPOSITION (STREAM NEW-Y-POSITION)
   (CHECK-OPEN STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-Y-POSITION DATA)))
               (COND
                  (NEW-Y-POSITION (CL:SETF (\HTML-Y-POSITION DATA)
                                         NEW-Y-POSITION)))
               OLD-VALUE)))

(CL:DEFUN MAKE-HTML-IMAGETYPE ()
   "Return the IMAGETYPE descriptor for HTML streams."
   `((OPENSTREAM OPENHTMLSTREAM)
     (FONTCREATE \HTML.FONTCREATE)
     (FONTSAVAILABLE \HTML.FONTSAVAILABLE)
     (CREATECHARSET \HTML.CREATECHARSET)))

(CL:DEFUN \HTML.FILLCIRCLE (STREAM CENTERX CENTERY RADIUS COLOR-NAME)

   (* ;; "common code underlying HTML.FILLCIRCLE and HTML.DRAWCIRCLE")

   (with-htmldata (DATA STREAM)
          (HTML.OUTPUT-GRAPHICS STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
               (CL:FORMAT BACKING 
  "<circle cx=%"~dpt%" cy=%"~dpt%" r=%"~dpt%" fill=%"~a%" stroke=%"black%" stroke-width=%"1pt%"/>~%%"
                      CENTERX (\HTML.SVG-Y DATA CENTERY)
                      RADIUS COLOR-NAME))
          (HTML.MOVETO STREAM CENTERX CENTERY)))

(CL:DEFUN \HTML.INIT-IMAGEDATA (HTMLSTREAM FONT)
   "Finish initializing the stream's IMAGEDATA"
   (with-htmldata (DATA HTMLSTREAM)

          (* ;; "set the font and linefeed delta")

          (CL:SETF (\HTML-FONT DATA)
                 FONT)
          (CL:SETF (\HTML-LINEFEED DATA)
                 (FONTPROP FONT 'HEIGHT))

          (* ;; "set the margins")

          (CL:SETF (\HTML-LEFT-MARGIN DATA)
                 0)
          (CL:SETF (\HTML-RIGHT-MARGIN DATA)
                 (\HTML-PAGE-WIDTH DATA))
          (CL:SETF (\HTML-TOP-MARGIN DATA)
                 (\HTML-PAGE-HEIGHT DATA))
          (CL:SETF (\HTML-BOTTOM-MARGIN DATA)
                 0)
          (CL:SETF (\HTML-Y-POSITION DATA)
                 (\HTML-TOP-MARGIN DATA))))

(CL:DEFUN \HTMLSTREAM.INIT ()

   (* ;; "Initialize the HTMLSTREAM world")

   (DECLARE (GLOBALVARS \HTMLSTREAM.FDEV IMAGESTREAMTYPES *DEFAULT-EXTERNALFORMAT*))
   (SETQ \HTMLSTREAM.FDEV (create FDEV
                                 DEVICENAME _ (LIST 'HTML 'DOCUMENT)
                                 CLOSEFILE _ #'NILL
                                 BOUT _ #'NILL))

   (* ;; "update IMAGESTREAMTYPES")

   (PUTASSOC HTML.FONTCREATE.DEVICENAME (MAKE-HTML-IMAGETYPE)
          IMAGESTREAMTYPES))

(CL:DEFUN \HTML.FONTCREATE (FAMILY SIZE FACE ROTATION DEVICE CHARSET)
   "Create a font for the HTML device"

   (* ;; "FAMILY must be a litatom")

   (* ;; "SIZE is a positive integer number of printer's points")

   (* ;; "FACE = (WEIGHT SLOPE EXPANSION)")

   (* ;; "    WEIGHT = one of BOLD, MEDIUM, LIGHT")

   (* ;; "    SLOPE = one of ITALIC or REGULAR")

   (* ;; "    EXPANSION = one of REGULAR, COMPRESSED, EXPANDED")

   (* ;; "CHARSET is a positive integer or NIL")

   (DECLARE (GLOBALVARS \DEFAULTCHARSET))
   (CL:FORMAT T "\HTML.FONTCREATE ~a ~a ~a ~a ~a ~a~%%" FAMILY SIZE FACE ROTATION DEVICE CHARSET)

   (* ;; 
   "TODO consider handling requests where SIZE is out of range by clamping to the closest valid size")

   (if (NEQ ROTATION 0)
       then (ERROR "We only support ROTATION = 0"))
   (LET* [(FONT-DESCR (\HTML.READ-FONT-METRICS FAMILY FACE SIZE))
          (PRIVATE-FONT-INFO (MAKE-HTML.FONTINFO :CHARSETS (fetch (WEB-FONT-DESCR charsets)
                                                              of FONT-DESCR)
                                    :CSS-CLASS
                                    (CSS-CLASS-FROM FAMILY SIZE FACE]

         (* ;; "also read the metrics for charset CHARSET")

         (AND FONT-DESCR
              (LET* ((CHARSET-DESCR (\HTML.READ-CHARSET-METRICS FAMILY SIZE FACE CHARSET))
                     (CHARSET0-WIDTHS (fetch (WEB-CHARSET-METRICS xccsWidths) of CHARSET-DESCR))
                     (FD (create FONTDESCRIPTOR
                                FONTDEVICE _ DEVICE
                                FONTFAMILY _ FAMILY
                                FONTSIZE _ SIZE
                                FONTFACE _ FACE
                                \SFAscent _ (ICP-TO-P (fetch (WEB-FONT-METRICS maxAscent)
                                                         of FONT-DESCR))
                                \SFDescent _ (ICP-TO-P (fetch (WEB-FONT-METRICS maxDescent)
                                                          of FONT-DESCR))
                                \SFHeight _ (ICP-TO-P (fetch (WEB-FONT-METRICS height) of FONT-DESCR)
                                                   )
                                ROTATION _ 0
                                FONTDEVICESPEC _ (LIST FAMILY SIZE FACE ROTATION DEVICE)
                                \SFFACECODE _ (\FACECODE FACE)
                                OTHERDEVICEFONTPROPS _ PRIVATE-FONT-INFO))
                     (CSINFO (\CREATECHARSET CHARSET FD T))
                     (CS-WIDTHS (fetch (CHARSETINFO WIDTHS) of CSINFO)))
                    (for WIDTH in CHARSET0-WIDTHS as CH from 0 to \MAXTHINCHAR
                       do (\FSETWIDTH CS-WIDTHS CH (ICP-TO-P WIDTH)))
                    FD))))

(CL:DEFUN \HTML.FONTSAVAILABLE (FAMILY SIZE FACE ROTATION DEVICE)
   "Search for matching fonts for the HTML device"

   (* ;; "any of the fields can be '*.  Ignore ROTATION. FACE = (WEIGHT SLOPE EXPANSION)")

   (* ;; "return a list of fontspecs")
                                                             (* ; "")
   (CL:FORMAT T "\HTML.FONTSAVAILABLE ~a ~a ~a ~a ~a~%%" FAMILY SIZE FACE ROTATION DEVICE 
          *WEB-FONT-METRICS-EXT*)
   (LET* ((FACE-AS-LIST (\FONTFACE FACE))
          (WEIGHT (fetch (WEB-FONT-FACE weight) of FACE-AS-LIST))
          (SLOPE (fetch (WEB-FONT-FACE slope) of FACE-AS-LIST))
          (EXPANSION (fetch (WEB-FONT-FACE expansion) of FACE-AS-LIST))
          (FILE-NAME (MAKE-FONT-METRICS-FILE-NAME FAMILY SIZE WEIGHT SLOPE EXPANSION)))

         (* ;; "TODO: enumerate!")

         FILE-NAME))

(CL:DEFUN \HTML.CREATECHARSET (FAMILY SIZE FACE ROTATION DEVICE CHARSET FONTDESC NOSLUG?)
   (CL:FORMAT T 
          "\HTML.CREATECHARSET fam ~a size ~a face ~a rot ~a dev ~a charset ~a desc ~a NOSLUG? ~a~%%"
          FAMILY SIZE FACE ROTATION DEVICE CHARSET FONTDESC NOSLUG?)
   (LET* ((CSINFO (create CHARSETINFO
                         OFFSETS _ NIL))
          (WIDTHS (fetch (CHARSETINFO WIDTHS) of CSINFO)))

         (* ;; "Make imagewidths point to widths.  Shouldn't matter to anyone, since imagewidths really has to do with bitmaps etc.  But...")

         (replace (CHARSETINFO IMAGEWIDTHS) of CSINFO with WIDTHS)

         (* ;; "TODO look up the appropriate .wcm file and load it into CSINFO")

         (CL:UNLESS (EQ CHARSET 0)
             (for I (AVGCHARWIDTH _ (CHARWIDTH (CHARCODE A)
                                           FONTDESC)) from 0 to 255
                first (CL:WHEN (EQ 0 AVGCHARWIDTH)

                          (* ;; 
    "This is what \AVGCHARWIDTH in FONT does, but we don't have it here.  Just to be extremely safe.")

                          [SETQ AVGCHARWIDTH (MAX 1 (FIXR (FTIMES 0.6 (FONTPROP FONTDESC 'HEIGHT])
                do (\FSETWIDTH WIDTHS I AVGCHARWIDTH)))
         CSINFO))

(CL:DEFUN \HTML.CHANGECHARSET (DATA CHARSET)
   "Set the new character set, creating the charset info if necessary"
   (LET* ((FONT (\HTML-FONT DATA))
          (CSINFO (\GETCHARSETINFO CHARSET FONT)))
         (CL:SETF (\HTML-CHARSET DATA)
                CHARSET)))

(\HTMLSTREAM.INIT)



(* ;; "debugging support")


(CL:DEFUN \CLEAN-FONT-CACHE ()
   "Remove all HTML fonts from \FONTSINCORE"
   (DECLARE (GLOBALVARS \FONTSINCORE))
   (LET [(FAMILIES (MAPCAR *WEB-FONT-FAMILIES* #'(LAMBDA (FAMILY)
                                                   (CAR FAMILY]
        (CL:LABELS [(CLEAN (LIST)
                           (if (NULL LIST)
                               then NIL
                             else (LET ((ELEMENT (CAR LIST)))
                                       (if (MEMB (CAR ELEMENT)
                                                 FAMILIES)
                                           then (CLEAN (CDR LIST))
                                         else (CONS ELEMENT (CLEAN (CDR LIST]
               (SETQ \FONTSINCORE (CLEAN \FONTSINCORE))
               NIL)))

(DEFMACRO DO-NOT (&BODY BODY)
   "Ignore the body, return NIL"
   NIL)
(DECLARE%: DONTCOPY
  (FILEMAP (NIL (2984 4613 (BEZIER-CONTROL-POINTS-TO-SVG 2984 . 4613)) (4615 4804 (CLOSE-KNOTS 4615 . 
4804)) (4806 5061 (COMPUTE-LINE-HEIGHT 4806 . 5061)) (5063 5319 (COMPUTE-MAX-ASCENT 5063 . 5319)) (
5321 5580 (COMPUTE-MAX-DESCENT 5321 . 5580)) (5582 7241 (CONVERT-TO-BEZIER 5582 . 7241)) (7243 7399 (
HTML.INCHES-TO-POINTS 7243 . 7399)) (7401 7470 (CP-TO-P 7401 . 7470)) (7472 7618 (ICP-TO-P 7472 . 7618
)) (7620 7779 (PIXEL-TO-PT 7620 . 7779)) (7781 7941 (PT-TO-PIXEL 7781 . 7941)) (7943 8090 (\HTML.SVG-Y
 7943 . 8090)) (8367 8710 (MAKE-FONT-METRICS-FILE-NAME 8367 . 8710)) (8712 9112 (
MAKE-CHARSET-METRICS-FILE-NAME 8712 . 9112)) (11944 12333 (CHECK-BROWSER-METRICS-FORMAT 11944 . 12333)
) (12335 14027 (CSS-CLASS-FROM 12335 . 14027)) (14029 15408 (\HTML.READ-CHARSET-METRICS 14029 . 15408)
) (15410 16892 (\HTML.READ-FONT-METRICS 15410 . 16892)) (17493 17725 (with-htmldata 17493 . 17725)) (
17727 17947 (CHECK-OPEN 17727 . 17947)) (17949 18606 (HTML.OUTPUT-GRAPHICS 17949 . 18606)) (18608 
19850 (HTML.OUTPUT-TEXT 18608 . 19850)) (19852 21032 (\HTML.MAYBE-START-PAGE 19852 . 21032)) (21034 
21441 (\HTML.END-PAGE 21034 . 21441)) (21443 25279 (HTML.WRITE-PREFACE 21443 . 25279)) (25281 30792 (
OPENHTMLSTREAM 25281 . 30792)) (30794 31148 (HTML.BACKCOLOR 30794 . 31148)) (31150 31443 (HTML.BITBLT 
31150 . 31443)) (31445 31628 (HTML.BLTSHADE 31445 . 31628)) (31630 32027 (HTML.BOTTOMMARGIN 31630 . 
32027)) (32029 32538 (HTML.CHARWIDTH 32029 . 32538)) (32540 32893 (HTML.CLIPPINGREGION 32540 . 32893))
 (32895 33473 (HTML.CLOSEFN 32895 . 33473)) (33475 33821 (HTML.COLOR 33475 . 33821)) (33823 34039 (
HTML.DRAWCIRCLE 33823 . 34039)) (34041 35279 (HTML.DRAWCURVE 34041 . 35279)) (35281 36038 (
HTML.DRAWELLIPSE 35281 . 36038)) (36040 36674 (HTML.DRAWLINE 36040 . 36674)) (36676 37657 (
HTML.DRAWPOLYGON 36676 . 37657)) (37659 37834 (HTML.FILLCIRCLE 37659 . 37834)) (37836 38745 (
HTML.FILLPOLYGON 37836 . 38745)) (38747 39630 (HTML.FONT 38747 . 39630)) (39632 40018 (HTML.LEFTMARGIN
 39632 . 40018)) (40020 40311 (HTML.LINEFEED 40020 . 40311)) (40313 40570 (HTML.MOVETO 40313 . 40570))
 (40572 40641 (HTML.NEWPAGE 40572 . 40641)) (40643 41000 (HTML.OPERATION 40643 . 41000)) (41002 43049 
(HTML.OUTCHARFN 41002 . 43049)) (43051 43407 (HTML.RESET 43051 . 43407)) (43409 43803 (
HTML.RIGHTMARGIN 43409 . 43803)) (43805 44118 (HTML.SCALE 43805 . 44118)) (44120 44444 (
HTML.SCALEDBITBLT 44120 . 44444)) (44446 44789 (HTML.SPACEFACTOR 44446 . 44789)) (44791 45459 (
HTML.TERPRI 44791 . 45459)) (45461 45804 (HTML.TOPMARGIN 45461 . 45804)) (45806 46149 (HTML.XPOSITION 
45806 . 46149)) (46151 46494 (HTML.YPOSITION 46151 . 46494)) (46496 46741 (MAKE-HTML-IMAGETYPE 46496
 . 46741)) (46743 47321 (\HTML.FILLCIRCLE 46743 . 47321)) (47323 48094 (\HTML.INIT-IMAGEDATA 47323 . 
48094)) (48096 48618 (\HTMLSTREAM.INIT 48096 . 48618)) (48620 51529 (\HTML.FONTCREATE 48620 . 51529)) 
(51531 52412 (\HTML.FONTSAVAILABLE 51531 . 52412)) (52414 53712 (\HTML.CREATECHARSET 52414 . 53712)) (
53714 53985 (\HTML.CHANGECHARSET 53714 . 53985)) (54046 54846 (\CLEAN-FONT-CACHE 54046 . 54846)) (
54848 54922 (DO-NOT 54848 . 54922)))))
STOP

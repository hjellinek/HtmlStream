(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)

(FILECREATED "19-Dec-2024 10:55:02" {DSK}<Users>hjellinek>Projects>TrySVG>Lisp>HTMLSTREAM.;58 61965  

      :CHANGES-TO (FUNCTIONS \HTML.CREATECHARSET \HTML.CHANGECHARSET HTML.SCALEDBITBLT HTMLFILEP 
                         MAKE-HTML-FROM-TEXT MAKE-HTML-FROM-TEDIT \HTMLSTREAM.INIT \HTML.SVG-Y 
                         HTML.OUTCHARFN HTML.RESET \HTML.INIT-IMAGEDATA P-TO-CP HTML.DRAWPOLYGON 
                         BEZIER-CONTROL-POINTS-TO-SVG HTML.OUTPUT-TEXT \HTML.MAYBE-START-PAGE 
                         HTML.WRITE-PREFACE HTML.BLTSHADE HTML.DRAWELLIPSE HTML.DRAWLINE 
                         HTML.FILLPOLYGON \HTML.FILLCIRCLE HTML.MOVETO CP-TO-P ICP-TO-P 
                         KNOWN-CHARSET? WRITE-BASE64-PNG HTML.INCHES-TO-CENTIPOINTS \HTML.FONTCREATE
                         MAKE-CHARSET-BIT-ARRAY)
                  (VARS HTMLSTREAMCOMS)
                  (STRUCTURES HTML.IMAGEDATA)
                  (VARIABLES *HTML.DEFAULT-PAGE-SIZE* *CENTIPOINTS-PER-POINT*)

      :PREVIOUS-DATE " 6-Dec-2024 15:38:09" {DSK}<Users>hjellinek>Projects>TrySVG>Lisp>HTMLSTREAM.;47
)


(PRETTYCOMPRINT HTMLSTREAMCOMS)

(RPAQQ HTMLSTREAMCOMS
       ((FILES XCCS-UNICODE-DUMPER BASE64 U-PNG)
        (VARIABLES *CENTIPOINTS-PER-POINT*)
        (RECORDS \BEZIER-POINT WEB-FONT-METRICS WEB-CHARSET-METRICS)
        (FUNCTIONS BEZIER-CONTROL-POINTS-TO-SVG CLOSE-KNOTS COMPUTE-LINE-HEIGHT COMPUTE-MAX-ASCENT 
               COMPUTE-MAX-DESCENT CONVERT-TO-BEZIER HTML.INCHES-TO-POINTS HTML.INCHES-TO-CENTIPOINTS
               CP-TO-P ICP-TO-P P-TO-CP PIXEL-TO-PT PT-TO-PIXEL \HTML.SVG-Y)
        (FUNCTIONS MAKE-FONT-METRICS-FILE-NAME MAKE-CHARSET-METRICS-FILE-NAME)
        (VARIABLES *WEB-FONT-DIRECTORY* *DEFAULT-WEB-FONT-METRICS-FILE-NAME* *WEB-FONT-EXPANSIONS* 
               *WEB-FONT-FAMILIES* *WEB-FONT-SIZES* *WEB-FONT-SLOPES* *WEB-FONT-WEIGHTS* 
               *WEB-CHARSET-METRICS-EXT* *WEB-CHARSET-METRICS-DOT-EXT* *WEB-FONT-METRICS-EXT* 
               *WEB-FONT-METRICS-DOT-EXT*)
        (VARIABLES *BROWSER-FONT-FILE-VERSION* *HTML.DEFAULT-PAGE-SIZE* HTML.FONTCREATE.DEVICENAME 
               HTML.IMAGETYPE HTML.STATE.BETWEEN-PAGES HTML.STATE.CLOSED HTML.STATE.NON-TEXT 
               HTML.STATE.NON-TEXT-OUTPUT HTML.STATE.TEXT-OUTPUT HTML.STATES \HTMLSTREAM.FDEV)
        (FUNCTIONS CHECK-BROWSER-METRICS-FORMAT CSS-CLASS-FROM \HTML.READ-FONT-METRICS 
               \HTML.READ-CHARSET-METRICS)
        (STRUCTURES HTML.IMAGEDATA HTML.FONTINFO)
        (FUNCTIONS with-htmldata CHECK-OPEN)
        (FUNCTIONS HTML.OUTPUT-GRAPHICS HTML.OUTPUT-TEXT \HTML.MAYBE-START-PAGE \HTML.END-PAGE 
               HTML.WRITE-PREFACE)
        (FUNCTIONS OPENHTMLSTREAM HTML.BACKCOLOR HTML.BITBLT HTML.BLTSHADE HTML.BOTTOMMARGIN 
               HTML.CHARWIDTH HTML.CLIPPINGREGION HTML.CLOSEFN HTML.COLOR HTML.DRAWCIRCLE 
               HTML.DRAWCURVE HTML.DRAWELLIPSE HTML.DRAWLINE HTML.DRAWPOLYGON HTML.FILLCIRCLE 
               HTML.FILLPOLYGON HTML.FONT HTML.LEFTMARGIN HTML.LINEFEED HTML.MOVETO HTML.NEWPAGE 
               HTML.OPERATION HTML.OUTCHARFN HTML.RESET HTML.RIGHTMARGIN HTML.SCALE HTML.SCALEDBITBLT
               HTML.SPACEFACTOR HTML.TERPRI HTML.TOPMARGIN HTML.XPOSITION HTML.YPOSITION 
               MAKE-HTML-IMAGETYPE \HTML.FILLCIRCLE \HTML.INIT-IMAGEDATA \HTMLSTREAM.INIT)
        (FUNCTIONS WRITE-BASE64-PNG CONVERT-TO-PNG-BASE64)
        (FUNCTIONS \HTML.FONTCREATE \HTML.FONTSAVAILABLE \HTML.CREATECHARSET \HTML.CHANGECHARSET 
               MAKE-CHARSET-BIT-ARRAY KNOWN-CHARSET?)
        
        (* ;; "PRINTFILETYPES-related")

        (FUNCTIONS HTMLFILEP MAKE-HTML-FROM-TEXT MAKE-HTML-FROM-TEDIT)
        (P (\HTMLSTREAM.INIT))
        [ADDVARS (PRINTFILETYPES (HTML (TEST HTMLFILEP)
                                       (EXTENSION (HTML))
                                       (CONVERSION (TEXT MAKE-HTML-FROM-TEXT TEDIT 
                                                         MAKE-HTML-FROM-TEDIT]
        
        (* ;; "debugging support")

        (FUNCTIONS \CLEAN-FONT-CACHE DO-NOT)))

(FILESLOAD XCCS-UNICODE-DUMPER BASE64 U-PNG)

(CL:DEFCONSTANT *CENTIPOINTS-PER-POINT* 100
   "There are 100 centipoints per point, by definition and by golly!")
(DECLARE%: EVAL@COMPILE

(PROPRECORD \BEZIER-POINT (p0 p1 b0 b1))

(PROPRECORD WEB-FONT-METRICS (family size weight style height charsets maxAscent maxDescent lispName
                                    lispFace lispSize))

(PROPRECORD WEB-CHARSET-METRICS (charset maxAscent maxDescent height xccsWidths))
)

(CL:DEFUN BEZIER-CONTROL-POINTS-TO-SVG (BEZIER-CONTROL-POINTS)
   "Convert the Bezier control points to SVG path format. Return NIL if the list is NIL"
   (if BEZIER-CONTROL-POINTS
       then (LET* [(START-POINT (fetch (\BEZIER-POINT p0) of (CAR BEZIER-CONTROL-POINTS)))
                   (RESULT (CL:FORMAT NIL "M ~d,~d " (CAR START-POINT)
                                  (CDR START-POINT]
                  [for CTRL-PT in (CDR BEZIER-CONTROL-POINTS) first (SETQ RESULT (CONCAT RESULT "C ")
                                                                     )
                     do (LET ((P0 (fetch (\BEZIER-POINT p0) of CTRL-PT))
                              (B0 (fetch (\BEZIER-POINT b0) of CTRL-PT))
                              (B1 (fetch (\BEZIER-POINT b1) of CTRL-PT))
                              (P1 (fetch (\BEZIER-POINT p1) of CTRL-PT)))
                             (SETQ RESULT (CONCAT RESULT (CL:FORMAT NIL "~d,~d ~d,~d ~d,~d "
                                                                (CAR B0)
                                                                (CDR B0)
                                                                (CAR B1)
                                                                (CDR B1)
                                                                (CAR P1)
                                                                (CDR P1]
                  RESULT)))

(CL:DEFUN CLOSE-KNOTS (KNOTS)
   "Create a closed polygon by adding the first point to the end of the list"
   (LET ((FIRST-KNOT (CAR KNOTS)))
        (APPEND KNOTS (LIST FIRST-KNOT))))

(CL:DEFUN COMPUTE-LINE-HEIGHT (CHARSETS)
   "Compute and return the max line height across all the charsets"
   (for CHARSET in CHARSETS largest (fetch (WEB-CHARSET-METRICS height) of CHARSET)
      finally (RETURN $$EXTREME)))

(CL:DEFUN COMPUTE-MAX-ASCENT (CHARSETS)
   "Compute and return the max max-ascent across all the charsets"
   (for CHARSET in CHARSETS largest (fetch (WEB-CHARSET-METRICS maxAscent) of CHARSET)
      finally (RETURN $$EXTREME)))

(CL:DEFUN COMPUTE-MAX-DESCENT (CHARSETS)
   "Compute and return the max max-descent across all the charsets"
   (for CHARSET in CHARSETS largest (fetch (WEB-CHARSET-METRICS maxDescent) of CHARSET)
      finally (RETURN $$EXTREME)))

(CL:DEFUN CONVERT-TO-BEZIER (POINTS)
   "Convert a list of points on a parametric cubic spline to a roughly equivalent set of Bezier control points"
   [LET ((NUM-POINTS (LENGTH POINTS)))
        (for N from 0 to (- NUM-POINTS 2)
           collect (LET* [(P0 (CL:NTH N POINTS))
                          (P1 (CL:NTH (CL:1+ N)
                                     POINTS))
                          [T0 (CONS (FLOAT (/ (- (CAR P1)
                                                 (CAR P0))
                                              3))
                                    (FLOAT (/ (- (CDR P1)
                                                 (CDR P0))
                                              3]
                          [T1 (CONS (FLOAT (/ (- (CAR P1)
                                                 (CAR P0))
                                              -3))
                                    (FLOAT (/ (- (CDR P1)
                                                 (CDR P0))
                                              -3]
                          [B0 (CONS (+ (CAR P0)
                                       (CAR T0))
                                    (+ (CDR P0)
                                       (CDR T0]
                          (B1 (CONS (+ (CAR P1)
                                       (CAR T1))
                                    (+ (CDR P1)
                                       (CDR T1]
                         (create \BEZIER-POINT
                                p0 _ P0
                                b0 _ B0
                                b1 _ B1
                                p1 _ P1])

(CL:DEFUN HTML.INCHES-TO-POINTS (INCHES)
   "Convert inches to points"

   (* ;; "Assume one inch contains 72 points")

   (FIXR (TIMES 72 INCHES)))

(CL:DEFUN HTML.INCHES-TO-CENTIPOINTS (INCHES)
   (FIXR (TIMES 72 *CENTIPOINTS-PER-POINT* INCHES)))

(DEFMACRO CP-TO-P (CENTIPOINTS)
   `(FQUOTIENT ,CENTIPOINTS *CENTIPOINTS-PER-POINT*))

(DEFMACRO ICP-TO-P (CENTIPOINTS)

   (* ;; "convert centipoints to an integer number of points")

   `(FIXR (FQUOTIENT ,CENTIPOINTS *CENTIPOINTS-PER-POINT*)))

(DEFMACRO P-TO-CP (POINTS)
   `(FTIMES ,POINTS *CENTIPOINTS-PER-POINT*))

(CL:DEFUN PIXEL-TO-PT (PIXELS)
   "Convert some number of pixels to that number of points"

   (* ;; "96 pixels = 72 points")

   (FTIMES 0.75 PIXELS))

(CL:DEFUN PT-TO-PIXEL (POINTS)
   "Convert some number of points to that number of pixels"

   (* ;; "96 pixels = 72 points")

   (FTIMES 1.333 POINTS))

(CL:DEFUN \HTML.SVG-Y (DATA MEDLEY-Y)
   "Return the SVG Y-coordinate for a Medley Y coordinate"
   (- (\HTML-PAGE-HEIGHT DATA)
      MEDLEY-Y))

(CL:DEFUN MAKE-FONT-METRICS-FILE-NAME (FAMILY SIZE WEIGHT SLOPE EXPANSION)
   "Create the name of the file that holds the metrics for the given font"

   (* ;; "The file name looks like <family>-<size>-<weight>-<slope>-<expansion>.wfm")

   (CL:FORMAT NIL "~A-~d-~A-~A-~A.~A" FAMILY SIZE WEIGHT SLOPE EXPANSION *WEB-FONT-METRICS-EXT*))

(CL:DEFUN MAKE-CHARSET-METRICS-FILE-NAME (FAMILY SIZE WEIGHT SLOPE EXPANSION CHARSET-NUM)
   "Create the name of the file that holds the metrics for the given charset"

   (* ;; "The file name looks like <family>-<size>-<weight>-<slope>-<expansion>-<charset>.wcm")

   (CL:FORMAT NIL "~A-~d-~A-~A-~A-~d.~A" FAMILY SIZE WEIGHT SLOPE EXPANSION CHARSET-NUM 
          *WEB-CHARSET-METRICS-EXT*))

(DEFGLOBALVAR *WEB-FONT-DIRECTORY* "."
   "The directory that holds .wfm and .wcm files")

(CL:DEFCONSTANT *DEFAULT-WEB-FONT-METRICS-FILE-NAME* "font-metrics.data"
   "The usual name of the raw font metrics file we get from the browser")

(CL:DEFCONSTANT *WEB-FONT-EXPANSIONS* '(REGULAR)
                                      "The Web font expansions we support")

(CL:DEFCONSTANT *WEB-FONT-FAMILIES* '((ROBOTO . "r")
                                      (ROBOTO-MONO . "rm")
                                      (NOTO-SANS-DISPLAY . "nsd"))
                                    
                              "A-list of supported Web font names, as atoms, with the CSS class name")

(CL:DEFCONSTANT *WEB-FONT-SIZES* '(10 20)
                                 "Sizes of the Web fonts we support, in points")

(CL:DEFCONSTANT *WEB-FONT-SLOPES* '(REGULAR ITALIC)
                                  "The Web font slopes we support")

(CL:DEFCONSTANT *WEB-FONT-WEIGHTS* '(MEDIUM BOLD)
                                   "The supported Web font weights")

(CL:DEFCONSTANT *WEB-CHARSET-METRICS-EXT* "wcm"
   "The filename extension for files that describe a charset's metrics")

(CL:DEFCONSTANT *WEB-CHARSET-METRICS-DOT-EXT* (CONCAT "." *WEB-CHARSET-METRICS-EXT*)
                                              
       "The filename extension for files that describe a charset's metrics, prepended with a dot (.)")

(CL:DEFCONSTANT *WEB-FONT-METRICS-EXT* "wfm"
   "The file extension for a web font metrics file")

(CL:DEFCONSTANT *WEB-FONT-METRICS-DOT-EXT* (CONCAT "." *WEB-FONT-METRICS-EXT*)
                                           
                           "The file extension for a web font metrics file, prepended with a dot (.)")

(CL:DEFCONSTANT *BROWSER-FONT-FILE-VERSION* 1
   "The current version of the font-metrics.data file")

(CL:DEFCONSTANT *HTML.DEFAULT-PAGE-SIZE*

   (* ;; "the default size of an HTML page, in centipoints")

   (CONS (HTML.INCHES-TO-CENTIPOINTS 8.5)
         (HTML.INCHES-TO-CENTIPOINTS 11.0)))

(CL:DEFCONSTANT HTML.FONTCREATE.DEVICENAME 'HTML)

(CL:DEFCONSTANT HTML.IMAGETYPE 'HTML)

(CL:DEFCONSTANT HTML.STATE.BETWEEN-PAGES :HTML.STATE.BETWEEN-PAGES)

(CL:DEFCONSTANT HTML.STATE.CLOSED :HTML.STATE.CLOSED)

(CL:DEFCONSTANT HTML.STATE.NON-TEXT :HTML.STATE.NON-TEXT)

(CL:DEFCONSTANT HTML.STATE.NON-TEXT-OUTPUT :HTML.STATE.NON-TEXT-OUTPUT)

(CL:DEFCONSTANT HTML.STATE.TEXT-OUTPUT :HTML.STATE.TEXT-OUTPUT)

(CL:DEFCONSTANT HTML.STATES '(HTML.STATE.BETWEEN-PAGES HTML.STATE.NON-TEXT-OUTPUT 
                                    HTML.STATE.TEXT-OUTPUT HTML.STATE.CLOSED)
                            "All HTML imagestream states, for informational use.")

(DEFGLOBALVAR \HTMLSTREAM.FDEV "The FDEV for HTML output")

(CL:DEFUN CHECK-BROWSER-METRICS-FORMAT (VERSION)

   (* ;; "check that the version looks like (format <number>)")

   (if (NOT (AND (LISTP VERSION)
                 (EQ 'format (CAR VERSION))
                 (EQUAL (CADR VERSION)
                        *BROWSER-FONT-FILE-VERSION*)))
       then (ERROR "File does not begin with expected format declaration"))
   VERSION)

(CL:DEFUN CSS-CLASS-FROM (FAMILY SIZE FACE)
   "Compute the CSS class names from the FAMILY, SIZE, and FACE"

   (* ;; "the result will look like %"r10 bold italic%" or a variant")

   [LET* [(FONT-CLASS-NAME-ROOT (CDR (FASSOC FAMILY *WEB-FONT-FAMILIES*)))
          [FONT-AND-SIZE-CLASS-NAME (COND
                                       ((NULL FONT-CLASS-NAME-ROOT)
                                        (ERROR "Unknown Web font family" FAMILY))
                                       (T (CONCAT FONT-CLASS-NAME-ROOT SIZE]
          (WEIGHT-CLASS (COND
                           ((EQ (CAR FACE)
                                'BOLD)
                            "bold")
                           (T NIL)))
          (SLOPE-CLASS (COND
                          ((EQ (CADR FACE)
                               'ITALIC)
                           "italic")
                          (T NIL)))
          (SLOPE-AND-WEIGHT-CLASSES (COND
                                       ((AND (NULL WEIGHT-CLASS)
                                             (NULL SLOPE-CLASS))
                                        "")
                                       ((NULL WEIGHT-CLASS)
                                        SLOPE-CLASS)
                                       ((NULL SLOPE-CLASS)
                                        WEIGHT-CLASS)
                                       (T (CONCAT WEIGHT-CLASS " " SLOPE-CLASS]
         (CONCAT FONT-AND-SIZE-CLASS-NAME (COND
                                             ((EQUAL SLOPE-AND-WEIGHT-CLASSES "")
                                              "")
                                             (T (CONCAT " " SLOPE-AND-WEIGHT-CLASSES])

(CL:DEFUN \HTML.READ-FONT-METRICS (FAMILY FACE SIZE)
   "Read the font metrics file and return the WEB-FONT-DESCR"
   (LET* ((WEIGHT (fetch (WEB-FONT-FACE weight) of FACE))
          (SLOPE (fetch (WEB-FONT-FACE slope) of FACE))
          (EXPANSION (fetch (WEB-FONT-FACE expansion) of FACE))
          (FILE-NAME (PACKFILENAME.STRING 'DIRECTORY *WEB-FONT-DIRECTORY* 'NAME
                            (MAKE-FONT-METRICS-FILE-NAME FAMILY SIZE WEIGHT SLOPE EXPANSION)))
          (*PACKAGE* (CL:FIND-PACKAGE "IL")))
         (CL:WITH-OPEN-STREAM (IN (OPENSTREAM FILE-NAME 'INPUT))
                (CHECK-BROWSER-METRICS-FORMAT (READ IN))
                (LET* ((DESCR (READ IN))
                       (FAMILY (fetch (WEB-FONT-DESCR name) of DESCR))
                       (FACE (fetch (WEB-FONT-DESCR face) of DESCR))
                       (SIZE (fetch (WEB-FONT-DESCR size) of DESCR))
                       (HEIGHT (fetch (WEB-FONT-DESCR height) of DESCR))
                       (MAX-ASCENT (fetch (WEB-FONT-DESCR maxAscent) of DESCR))
                       (MAX-DESCENT (fetch (WEB-FONT-DESCR maxDescent) of DESCR))
                       (CHARSETS (fetch (WEB-FONT-DESCR charsets) of DESCR)))
                      (CL:FORMAT T "font: ~A face: ~A size: ~A height: ~A #charsets: ~d~%%" FAMILY 
                             FACE SIZE HEIGHT (LENGTH CHARSETS))
                      DESCR))))

(CL:DEFUN \HTML.READ-CHARSET-METRICS (FAMILY SIZE FACE CHARSET-NUM)
   "Read a file containing a charset's metrics and return the WEB-CHARSET-METRICS"
   (LET* ((WEIGHT (fetch (WEB-FONT-FACE weight) of FACE))
          (SLOPE (fetch (WEB-FONT-FACE slope) of FACE))
          (EXPANSION (fetch (WEB-FONT-FACE expansion) of FACE))
          (FILE-NAME (PACKFILENAME.STRING 'DIRECTORY *WEB-FONT-DIRECTORY* 'NAME
                            (MAKE-CHARSET-METRICS-FILE-NAME FAMILY SIZE WEIGHT SLOPE EXPANSION 
                                   CHARSET-NUM)))
          (*PACKAGE* (CL:FIND-PACKAGE "IL")))
         (CL:WITH-OPEN-STREAM (IN (OPENSTREAM FILE-NAME 'INPUT))
                (CHECK-BROWSER-METRICS-FORMAT (READ IN))
                (LET* ((CHARSET (READ IN))
                       (HEIGHT (fetch (WEB-CHARSET-METRICS height) of CHARSET))
                       (MAX-ASCENT (fetch (WEB-CHARSET-METRICS maxAscent) of CHARSET))
                       (MAX-DESCENT (fetch (WEB-CHARSET-METRICS maxDescent) of CHARSET))
                       (WIDTHS (fetch (WEB-CHARSET-METRICS xccsWidths) of CHARSET)))
                      (CL:FORMAT T "charset family: ~A face: ~A size: ~A height: ~A charset: ~d~%%" 
                             FAMILY FACE SIZE HEIGHT CHARSET-NUM)
                      CHARSET))))

(CL:DEFSTRUCT (HTML.IMAGEDATA (:CONC-NAME \HTML-))
   "Private data for HTMLSTREAMs"
   BACKING-STREAM
   FONT
   (CHARSET \DEFAULTCHARSET)
   CLIPPING-REGION
   (SPACE-FACTOR 1.0)
   IMAGE-OPERATION BG-COLOR FG-COLOR (SCALE *CENTIPOINTS-PER-POINT*)
   (PAGE-NUM 0)
   (X-POSITION 0)
   (Y-POSITION 0)
   (LEFT-MARGIN 0)
   (TOP-MARGIN 1024)
   (RIGHT-MARGIN 1024)
   (BOTTOM-MARGIN 0)
   (LINEFEED 12)
   (STATE HTML.STATE.BETWEEN-PAGES)
   PAGE-HEIGHT PAGE-WIDTH TITLE)

(CL:DEFSTRUCT (HTML.FONTINFO (:CONC-NAME \HTMLFONT-))
   "Private data for an HTML FONTDESCRIPTOR"
   (CHARSETS NIL)
   (CSS-CLASS NIL))

(DEFMACRO with-htmldata ((DATA-VAR-NAME STREAM)
                         &BODY
                         (BODY DECLS ENV))
   `(LET [(,DATA-VAR-NAME (fetch (STREAM IMAGEDATA) of ,STREAM]
         ,@DECLS
         ,@BODY))

(DEFMACRO CHECK-OPEN (STREAM)
   `[with-htmldata (DATA ,STREAM)
           (COND
              ((EQ (\HTML-STATE DATA)
                   HTML.STATE.CLOSED)
               (ERROR "HTMLSTREAM is in state CLOSED"])

(CL:DEFUN HTML.OUTPUT-GRAPHICS (STREAM)
   "We're going to do some graphics now"
   (with-htmldata (DATA STREAM)
          (\HTML.MAYBE-START-PAGE DATA STREAM)
          (SELECTC (\HTML-STATE DATA)
              (HTML.STATE.NON-TEXT-OUTPUT                    (* ; "this is the state we need")
                   )
              (HTML.STATE.TEXT-OUTPUT                        (* ; "end the text section")
                   (printout (\HTML-BACKING-STREAM DATA)
                          "</text>" T))
              NIL)

          (* ;; "finally")

          (CL:SETF (\HTML-STATE DATA)
                 HTML.STATE.NON-TEXT-OUTPUT)))

(CL:DEFUN HTML.OUTPUT-TEXT (STREAM)
   "We're being asked to write text"
   (with-htmldata (DATA STREAM)
          (\HTML.MAYBE-START-PAGE DATA STREAM)
          (LET* ((FONT (\HTML-FONT DATA))
                 (FONT-DATA (fetch (FONTDESCRIPTOR OTHERDEVICEFONTPROPS) of FONT)))
                (SELECTC (\HTML-STATE DATA)
                    ((LIST HTML.STATE.NON-TEXT-OUTPUT HTML.STATE.BETWEEN-PAGES) 
                                                             (* ; "start a new text section")
                         (CL:FORMAT (\HTML-BACKING-STREAM DATA)
                                "<text class='~a' x='~d' y='~d'>"
                                (\HTMLFONT-CSS-CLASS FONT-DATA)
                                (\HTML-X-POSITION DATA)
                                (\HTML.SVG-Y DATA (\HTML-Y-POSITION DATA))))
                    (HTML.STATE.TEXT-OUTPUT                  (* ; "continue this text section")
                         )
                    NIL)

                (* ;; "finally")

                (CL:SETF (\HTML-STATE DATA)
                       HTML.STATE.TEXT-OUTPUT))))

(CL:DEFUN \HTML.MAYBE-START-PAGE (DATA STREAM)

   (* ;; "We're going to do output of some sort, so start an SVG stanza if necessary")

   [with-htmldata (DATA STREAM)
          (if (EQ (\HTML-STATE DATA)
                  HTML.STATE.BETWEEN-PAGES)
              then (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
                        (CL:FORMAT BACKING 
                               "<svg width=%"~dpt%" height=%"~dpt%" viewBox=%"~d ~d ~d ~d%">~%%"
                               (CP-TO-P (\HTML-PAGE-WIDTH DATA))
                               (CP-TO-P (\HTML-PAGE-HEIGHT DATA))
                               0 0 (\HTML-PAGE-WIDTH DATA)
                               (\HTML-PAGE-HEIGHT DATA))
                        (CL:SETF (\HTML-X-POSITION DATA)
                               (\HTML-LEFT-MARGIN DATA))
                        (CL:SETF (\HTML-Y-POSITION DATA)
                               (\HTML-TOP-MARGIN DATA])

(CL:DEFUN \HTML.END-PAGE (DATA STREAM)
   "End the current page"
   (if (EQ (\HTML-STATE DATA)
           HTML.STATE.TEXT-OUTPUT)
       then (HTML.OUTPUT-GRAPHICS STREAM))
   (CL:INCF (\HTML-PAGE-NUM DATA))
   (HTML.RESET STREAM)
   (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
        (CL:FORMAT BACKING "</svg>~%%"))
   (CL:SETF (\HTML-STATE DATA)
          HTML.STATE.BETWEEN-PAGES))

(CL:DEFUN HTML.WRITE-PREFACE (STREAM)
   "Write the preamble to the file: <html><head>... etc."
   (with-htmldata (DATA STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA))
                (TITLE (\HTML-TITLE DATA)))
               (printout BACKING "<!DOCTYPE HTML>" T)
               (printout BACKING "<html>" T)
               (printout BACKING "<head>" T)
               (printout BACKING "<title>" TITLE "</title>" T)
               (printout BACKING "<link rel=%"preconnect%" href=%"https://fonts.googleapis.com%">" T)
               (printout BACKING 
                      "<link rel=%"preconnect%" href=%"https://fonts.gstatic.com%" crossorigin>" T)
               (printout BACKING "<link href=%"https://fonts.googleapis.com/css2?family=Noto+Sans+Display&family=Roboto&family=Roboto+Mono&display=swap%" rel=%"stylesheet%">"
                      T)
               (printout BACKING "<script>" T)
               (printout BACKING "    const fontSpecs = [" T)
               (printout BACKING "            {family: %"Roboto Mono%", size: %"10pt%"}," T)
               (printout BACKING "            {family: %"Noto Sans Display%", size: %"10pt%"}," T)
               (printout BACKING "            {family: %"Roboto%", size: %"10pt%"}," T)
               (printout BACKING "            {family: %"Roboto Mono%", size: %"20pt%"}," T)
               (printout BACKING "            {family: %"Noto Sans Display%", size: %"20pt%"}," T)
               (printout BACKING "            {family: %"Roboto%", size: %"20pt%"}," T)
               (printout BACKING "    ];" T T)
               (printout BACKING "    function fontFromSpec(font) {" T 
                      "        return font.size + %" %" + font.family;" T "    }" T T)
               (printout BACKING "    const fontLoadPromises = [];" T T)
               (printout BACKING "    for (const spec of fontSpecs) {" T 
                      "        fontLoadPromises.push(document.fonts.load(fontFromSpec(spec)));" T 
                      "    }" T T)
               (printout BACKING 
                  "    Promise.all(fontLoadPromises).then(_ => { console.log('All fonts loaded');});"
                      T)
               (printout BACKING "</script>" T)
               (printout BACKING "<style>" T)

               (* ;; "all space chars in text blocks are significant:")

               (printout BACKING "text { white-space: pre }" T)

               (* ;; 
 "the page is scaled to use centipoints, so font sizes below are measured in centipoints, not points")

               (printout BACKING ".nsd10 { font-family: 'Noto Sans Display'; font-size: 1000pt }" T)
               (printout BACKING ".nsd20 { font-family: 'Noto Sans Display'; font-size: 2000pt }" T)
               (printout BACKING ".nsd30 { font-family: 'Noto Sans Display'; font-size: 3000pt }" T)
               (printout BACKING ".nsd40 { font-family: 'Noto Sans Display'; font-size: 4000pt }" T)
               (printout BACKING ".rm10 { font-family: 'Roboto Mono'; font-size: 1000pt }" T)
               (printout BACKING ".rm20 { font-family: 'Roboto Mono'; font-size: 2000pt }" T)
               (printout BACKING ".rm30 { font-family: 'Roboto Mono'; font-size: 3000pt }" T)
               (printout BACKING ".rm40 { font-family: 'Roboto Mono'; font-size: 4000pt }" T)
               (printout BACKING ".r10 { font-family: 'Roboto'; font-size: 1000pt }" T)
               (printout BACKING ".r20 { font-family: 'Roboto'; font-size: 2000pt }" T)
               (printout BACKING ".r30 { font-family: 'Roboto'; font-size: 3000pt }" T)
               (printout BACKING ".r40 { font-family: 'Roboto'; font-size: 4000pt }" T)
               (printout BACKING ".bold { font-weight: bold }" T)
               (printout BACKING ".italic { font-style: italic }" T)
               (printout BACKING "</style>" T)
               (printout BACKING "</head>" T)
               (printout BACKING "<body>" T)
               BACKING)))

(CL:DEFUN OPENHTMLSTREAM (FILENAME &OPTIONAL OPTIONS)
   "Open and return an HTML imagestream"
   (LET* ((TITLE (OR (LISTGET OPTIONS 'TITLE)
                     FILENAME))
          (REGION (OR (LISTGET OPTIONS 'REGION)
                      *HTML.DEFAULT-PAGE-SIZE*))
          [BACKING (OPENSTREAM FILENAME 'OUTPUT NIL '((FORMAT :UTF-8]
          (IMAGEOPS (create IMAGEOPS))
          (IMAGEDATA (MAKE-HTML.IMAGEDATA :BACKING-STREAM BACKING :TITLE TITLE :PAGE-WIDTH
                            (CAR REGION)
                            :PAGE-HEIGHT
                            (CDR REGION)))
          (HTMLSTREAM (create STREAM
                             FULLFILENAME _ (FULLNAME BACKING)
                             DEVICE _ \HTMLSTREAM.FDEV
                             ACCESS _ 'OUTPUT
                             OUTCHARFN _ #'HTML.OUTCHARFN
                             STRMBOUTFN _ #'\BUFFERED.BOUT   (* ; "is this right?")
                             IMAGEOPS _ IMAGEOPS
                             USERCLOSEABLE _ T
                             USERVISIBLE _ T
                             IMAGEDATA _ IMAGEDATA)))

         (* ;; "Make the backing file invisible")

         (replace (STREAM USERVISIBLE) of BACKING with NIL)

         (* ;; "install our OUTCHARFN. you can't do this in the create.")

         (replace (STREAM OUTCHARFN) of HTMLSTREAM with #'HTML.OUTCHARFN)

         (* ;; "replace (do not smash!) the stream's IMAGEOPS with ours")

         (replace IMAGEOPS of HTMLSTREAM with IMAGEOPS)

         (* ;; "Set the informational fields")

         (replace IMFONTCREATE of IMAGEOPS with HTML.FONTCREATE.DEVICENAME)
         (replace IMAGETYPE of IMAGEOPS with HTML.IMAGETYPE)

         (* ;; "Set the functions")

         (replace IMCLOSEFN of IMAGEOPS with #'HTML.CLOSEFN)
         (replace IMDRAWLINE of IMAGEOPS with #'HTML.DRAWLINE)
         (replace IMDRAWCURVE of IMAGEOPS with #'HTML.DRAWCURVE)
         (replace IMDRAWCIRCLE of IMAGEOPS with #'HTML.DRAWCIRCLE)
         (replace IMDRAWELLIPSE of IMAGEOPS with #'HTML.DRAWELLIPSE)
         (replace IMFILLPOLYGON of IMAGEOPS with #'HTML.FILLPOLYGON)
         (replace IMDRAWPOLYGON of IMAGEOPS with #'HTML.DRAWPOLYGON)
         (replace IMFILLCIRCLE of IMAGEOPS with #'HTML.FILLCIRCLE)
         (replace IMBLTSHADE of IMAGEOPS with #'HTML.BLTSHADE)
         (replace IMBITBLT of IMAGEOPS with #'HTML.BITBLT)
         (replace IMSCALEDBITBLT of IMAGEOPS with #'HTML.SCALEDBITBLT)
         (replace IMMOVETO of IMAGEOPS with #'HTML.MOVETO)
         (replace IMCHARWIDTH of IMAGEOPS with #'HTML.CHARWIDTH)
         (replace IMNEWPAGE of IMAGEOPS with #'HTML.NEWPAGE)
         (replace IMTERPRI of IMAGEOPS with #'HTML.TERPRI)
         (replace IMRESET of IMAGEOPS with #'HTML.RESET)
         (replace IMCLIPPINGREGION of IMAGEOPS with #'HTML.CLIPPINGREGION)
         (replace IMXPOSITION of IMAGEOPS with #'HTML.XPOSITION)
         (replace IMYPOSITION of IMAGEOPS with #'HTML.YPOSITION)
         (replace IMFONT of IMAGEOPS with #'HTML.FONT)
         (replace IMLEFTMARGIN of IMAGEOPS with #'HTML.LEFTMARGIN)
         (replace IMRIGHTMARGIN of IMAGEOPS with #'HTML.RIGHTMARGIN)
         (replace IMTOPMARGIN of IMAGEOPS with #'HTML.TOPMARGIN)
         (replace IMBOTTOMMARGIN of IMAGEOPS with #'HTML.BOTTOMMARGIN)
         (replace IMLINEFEED of IMAGEOPS with #'HTML.LINEFEED)
         (replace IMSCALE of IMAGEOPS with #'HTML.SCALE)
         (replace IMSPACEFACTOR of IMAGEOPS with #'HTML.SPACEFACTOR)
         (replace IMOPERATION of IMAGEOPS with #'HTML.OPERATION)
         (replace IMBACKCOLOR of IMAGEOPS with #'HTML.BACKCOLOR)
         (replace IMCOLOR of IMAGEOPS with #'HTML.COLOR)

         (* ;; "Maybe implement these later:")

         (replace IMWRITEPIXEL of IMAGEOPS with #'NILL)
         (replace IMROTATE of IMAGEOPS with #'NILL)
         (replace IMDRAWARC of IMAGEOPS with #'NILL)
         (replace IMTRANSLATE of IMAGEOPS with #'NILL)
         (replace IMSCALE2 of IMAGEOPS with #'NILL)
         (replace IMPUSHSTATE of IMAGEOPS with #'NILL)
         (replace IMPOPSTATE of IMAGEOPS with #'NILL)
         (replace IMDEFAULTSTATE of IMAGEOPS with #'NILL)
         (replace IMCHARWIDTHY of IMAGEOPS with #'NILL)
         (replace IMBITMAPSIZE of IMAGEOPS with #'NILL)

         (* ;; "we can init the font now that the IMAGEOPS are complete")

         (LET* [(USER-FONT (LISTGET OPTIONS 'FONT))
                (DEFAULTFONT (if USER-FONT
                                 then (\COERCEFONTDESC USER-FONT HTMLSTREAM)
                               else (FONTCREATE 'NOTO-SANS-DISPLAY 10 'MRR 0 'HTML]

               (* ;; "Finish initializing the IMAGEDATA")

               (\HTML.INIT-IMAGEDATA HTMLSTREAM DEFAULTFONT)

               (* ;; "write the preface")

               (HTML.WRITE-PREFACE HTMLSTREAM)

               (* ;; "return the stream")

               HTMLSTREAM)))

(CL:DEFUN HTML.BACKCOLOR (STREAM NEW-COLOR)
   (printout T "HTML.BACKCOLOR" T)
   (CHECK-OPEN STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-BG-COLOR DATA)))
               (COND
                  (NEW-COLOR (CL:SETF (\HTML-BG-COLOR DATA)
                                    NEW-COLOR)))
               OLD-VALUE)))

(CL:DEFUN HTML.BITBLT (SOURCEBITMAP SOURCELEFT SOURCEBOTTOM STREAM DESTINATIONLEFT DESTINATIONBOTTOM
                             WIDTH HEIGHT SOURCETYPE OPERATION TEXTURE CLIPPINGREGION 
                             CLIPPEDSOURCELEFT CLIPPEDSOURCEBOTTOM)

   (* ;; "blt the image expanded by a scale factor of 1")

   (HTML.SCALEDBITBLT SOURCEBITMAP SOURCELEFT SOURCEBOTTOM STREAM DESTINATIONLEFT DESTINATIONBOTTOM 
          WIDTH HEIGHT SOURCETYPE OPERATION TEXTURE CLIPPINGREGION CLIPPEDSOURCELEFT 
          CLIPPEDSOURCEBOTTOM 1))

(CL:DEFUN HTML.BLTSHADE (TEXTURE STREAM DESTINATIONLEFT DESTINATIONBOTTOM WIDTH HEIGHT OPERATION 
                               CLIPPINGREGION)

   (* ;; "NOTE we ignore OPERATION")

   (* ;; "in our monochrome graphics world, SHADEs are 4x4 TEXTUREs.  Let's interpret the texture as a shade, meaning a gray value")

   (* ;; "because we're dealing with 24-bit color, we can only represent 256 gray shades")

   [LET* [(BLACK-BITS (CL:LOGCOUNT TEXTURE))
          (BLACK-PROPORTION (/ BLACK-BITS 16))
          (GRAY-VALUE (FIXR (TIMES BLACK-PROPORTION 255]
         (with-htmldata (DATA STREAM)

                (* ;; "clip region against CLIPPINGREGION")

                (LET* [(BACKING (\HTML-BACKING-STREAM DATA))
                       (ORIGINAL-REGION (CREATE REGION
                                               LEFT _ DESTINATIONLEFT
                                               BOTTOM _ DESTINATIONBOTTOM
                                               WIDTH _ WIDTH
                                               HEIGHT _ HEIGHT))
                       (EFFECTIVE-REGION (INTERSECTREGIONS ORIGINAL-REGION (CL:IF CLIPPINGREGION
                                                                               CLIPPINGREGION
                                                                               ORIGINAL-REGION)]
                      (HTML.OUTPUT-GRAPHICS STREAM)
                      (CL:FORMAT BACKING 
           "<rect x='~d' y='~d' width='~d' height='~d' stroke='none' fill='#~2,'0x~2,'0x~2,'0x'/>~%%"
                             (FETCH (REGION LEFT) OF EFFECTIVE-REGION)
                             (\HTML.SVG-Y DATA (FETCH (REGION BOTTOM) OF EFFECTIVE-REGION))
                             (FETCH (REGION WIDTH) OF EFFECTIVE-REGION)
                             (FETCH (REGION HEIGHT) OF EFFECTIVE-REGION)
                             GRAY-VALUE GRAY-VALUE GRAY-VALUE])

(CL:DEFUN HTML.BOTTOMMARGIN (STREAM NEW-BOTTOM-MARGIN)
   (printout T "HTML.BOTTOMMARGIN")
   (CHECK-OPEN STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-BOTTOM-MARGIN DATA)))
               (if NEW-BOTTOM-MARGIN
                   then (CL:SETF (\HTML-BOTTOM-MARGIN DATA)
                               NEW-BOTTOM-MARGIN))
               OLD-VALUE)))

(CL:DEFUN HTML.CHARWIDTH (STREAM CHCODE)
   "Character width accessor that obeys space-factors"
   (with-htmldata (DATA STREAM)
          (LET ((CHAR-WIDTH (\FGETCHARWIDTH (\HTML-FONT DATA)
                                   CHCODE))
                (SPACE-FACTOR (\HTML-SPACE-FACTOR DATA)))
               (if (AND (= CHCODE (CHARCODE SPACE))
                        (NOT (= SPACE-FACTOR 1.0)))
                   then (FTIMES SPACE-FACTOR CHAR-WIDTH)
                 else CHAR-WIDTH))))

(CL:DEFUN HTML.CLIPPINGREGION (STREAM NEW-REGION)
   (printout T "HTML.CLIPPINGREGION")
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-CLIPPING-REGION DATA)))
               (COND
                  (NEW-REGION (CL:SETF (\HTML-CLIPPING-REGION DATA)
                                     NEW-REGION)))
               OLD-VALUE)))

(CL:DEFUN HTML.CLOSEFN (STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
               (if (EQ (\HTML-STATE DATA)
                       HTML.STATE.TEXT-OUTPUT)
                   then (HTML.OUTPUT-GRAPHICS STREAM))
               (printout BACKING T "</svg>" T "</body>" T "</html>" T)
               (CLOSEF BACKING)
               (CL:SETF (\HTML-STATE DATA)
                      HTML.STATE.CLOSED))))

(CL:DEFUN HTML.COLOR (STREAM NEW-COLOR)
   (printout T "HTML.COLOR" T)
   (CHECK-OPEN STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-FG-COLOR DATA)))
               (COND
                  (NEW-COLOR (CL:SETF (\HTML-FG-COLOR DATA)
                                    NEW-COLOR)))
               OLD-VALUE)))

(CL:DEFUN HTML.DRAWCIRCLE (STREAM CENTERX CENTERY RADIUS BRUSH DASHING)
   "Draw a circle"

   (* ;; "TODO implement BRUSH and DASHING")

   (\HTML.FILLCIRCLE STREAM CENTERX CENTERY RADIUS "transparent"))

(CL:DEFUN HTML.DRAWCURVE (STREAM KNOTS CLOSED BRUSH DASHING)
   "Draw a parametric cubic spline curve"

   (* ;; "TODO ignore BRUSH and DASHING for now")

   (* ;; "SVG can draw curves in 3 representations, quadratic Bezier, cubic Bezier, or elliptical arcs.  We will convert KNOTS to cubic Bezier control points.")

   (printout T "HTML.DRAWCURVE" T)
   (CHECK-OPEN STREAM)
   [with-htmldata (DATA STREAM)
          (HTML.OUTPUT-GRAPHICS STREAM)
          (LET [(BACKING (\HTML-BACKING-STREAM DATA))
                (BEZIER-CONTROL-POINTS (CONVERT-TO-BEZIER (if CLOSED
                                                              then (CLOSE-KNOTS KNOTS)
                                                            else KNOTS]
               (CL:FORMAT BACKING "<path fill='none' stroke='black' d='~A' />~%%" (
                                                                         BEZIER-CONTROL-POINTS-TO-SVG
                                                                                   
                                                                                BEZIER-CONTROL-POINTS
                                                                                   ])

(CL:DEFUN HTML.DRAWELLIPSE (STREAM CENTERX CENTERY SEMIMINORRADIUS SEMIMAJORRADIUS ORIENTATION BRUSH
                                  DASHING)
   "Draw an ellipse"

   (* ;; "TODO implement BRUSH and DASHING")

   [with-htmldata (DATA STREAM)
          (HTML.OUTPUT-GRAPHICS STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
               (CL:FORMAT BACKING "<ellipse cx=%"~d%" cy=%"~d%" rx=%"~d%" ry=%"~d%" transform=%"rotate(~d,~d,~d)%" fill=%"transparent%" stroke=%"black%" stroke-width=%"1pt%"/>~%%"
                      CENTERX (\HTML.SVG-Y DATA CENTERY)
                      SEMIMAJORRADIUS SEMIMINORRADIUS (- ORIENTATION)
                      CENTERX
                      (\HTML.SVG-Y DATA CENTERY])

(CL:DEFUN HTML.DRAWLINE (STREAM X1 Y1 X2 Y2 WIDTH OPERATION COLOR DASHING)
   "Draw a line"

   (* ;; "TODO implement OPERATION, COLOR, and DASHING")

   (with-htmldata (DATA STREAM)
          (HTML.OUTPUT-GRAPHICS STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
               (CL:FORMAT BACKING 
            "<line x1=%"~d%" y1=%"~d%" x2=%"~d%" y2=%"~d%" stroke=%"black%" stroke-width=%"~d%"/>~%%"
                      X1 (\HTML.SVG-Y DATA Y1)
                      X2
                      (\HTML.SVG-Y DATA Y2)
                      (OR WIDTH 1)))
          (HTML.MOVETO STREAM X2 Y2)))

(CL:DEFUN HTML.DRAWPOLYGON (STREAM POINTS CLOSED BRUSH DASHING)
   "Draw an open or closed polygon"

   (* ;; "TODO implement BRUSH and DASHING")

   (CHECK-OPEN STREAM)
   (HTML.OUTPUT-GRAPHICS STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((STROKE-WIDTH-CHANGE-THIS 100)
                (BACKING (\HTML-BACKING-STREAM DATA))
                (DRAWING-TYPE (if CLOSED
                                  then "polygon"
                                else "polyline")))
               (CL:FORMAT BACKING "<~a fill=%"none%" stroke=%"black%" stroke-width=%"~d%" points=%""
                      DRAWING-TYPE STROKE-WIDTH-CHANGE-THIS DRAWING-TYPE)
               [for POINT in POINTS do (CL:FORMAT BACKING "~d,~d " (CAR POINT)
                                              (\HTML.SVG-Y DATA (CDR POINT]
               (CL:FORMAT BACKING "%" />~%%"))))

(CL:DEFUN HTML.FILLCIRCLE (STREAM CENTERX CENTERY RADIUS TEXTURE)

   (* ;; "TODO implement TEXTURE")

   (\HTML.FILLCIRCLE STREAM CENTERX CENTERY RADIUS "black"))

(CL:DEFUN HTML.FILLPOLYGON (STREAM POINTS TEXTURE OPERATION WINDING-NUMBER)
   "Fill a closed polygon"

   (* ;; "TODO implement TEXTURE, OPERATION")

   (CHECK-OPEN STREAM)
   (HTML.OUTPUT-GRAPHICS STREAM)
   (with-htmldata (DATA STREAM)
          (LET [(STROKE-WIDTH-CHANGE-THIS 100)
                (BACKING (\HTML-BACKING-STREAM DATA))
                (FILL-RULE (COND
                              ((ZEROP WINDING-NUMBER)
                               "nonzero")
                              (T "evenodd"]
               (CL:FORMAT BACKING 
            "<polygon fill=%"black%" fill-rule=%"~A%" stroke=%"black%" stroke-width=%"~d%" points=%""
                      STROKE-WIDTH-CHANGE-THIS FILL-RULE)
               [for POINT in POINTS do (CL:FORMAT BACKING "~d,~d " (CAR POINT)
                                              (\HTML.SVG-Y DATA (CDR POINT]
               (CL:FORMAT BACKING "%"/>~%%"))))

(CL:DEFUN HTML.FONT (STREAM NEW-FONT)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-FONT DATA)))
               (COND
                  (NEW-FONT                                  (* ; 
  "NEW-FONT might be a FONTDESCRIPTOR or a list of properties to apply to the current FONTDESCRIPTOR")
                         (SETQ NEW-FONT (OR (\COERCEFONTDESC NEW-FONT STREAM T)
                                            [FONTCOPY OLD-VALUE `(NOERROR T ,@NEW-FONT]
                                            (ERROR "Font not found or illegal parameter")))
                         (CL:SETF (\HTML-FONT DATA)
                                NEW-FONT)
                         (CL:SETF (\HTML-LINEFEED DATA)
                                (FONTPROP NEW-FONT 'HEIGHT))
                         (HTML.OUTPUT-GRAPHICS STREAM)))
               OLD-VALUE)))

(CL:DEFUN HTML.LEFTMARGIN (STREAM NEW-LEFT-MARGIN)
   (printout T "HTML.LEFTMARGIN" T)
   (CHECK-OPEN STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-LEFT-MARGIN DATA)))
               (COND
                  (NEW-LEFT-MARGIN (CL:SETF (\HTML-LEFT-MARGIN DATA)
                                          NEW-LEFT-MARGIN)))
               OLD-VALUE)))

(CL:DEFUN HTML.LINEFEED (STREAM NEW-DELTA)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-LINEFEED DATA)))
               (COND
                  (NEW-DELTA (CL:SETF (\HTML-LINEFEED DATA)
                                    NEW-DELTA)))
               OLD-VALUE)))

(CL:DEFUN HTML.MOVETO (STREAM X Y)
   "Move to X, Y"
   (HTML.OUTPUT-GRAPHICS STREAM)
   (with-htmldata (DATA STREAM)
          (CL:SETF (\HTML-X-POSITION DATA)
                 X)
          (CL:SETF (\HTML-Y-POSITION DATA)
                 Y)))

(CL:DEFUN HTML.NEWPAGE (STREAM)
   (printout T "HTML.NEWPAGE" T))

(CL:DEFUN HTML.OPERATION (STREAM NEW-OPERATION)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-IMAGE-OPERATION DATA)))
               (COND
                  (NEW-OPERATION (CL:SETF (\HTML-IMAGE-OPERATION DATA)
                                        NEW-OPERATION)))
               OLD-VALUE)))

(CL:DEFUN HTML.OUTCHARFN (STREAM CHCODE)
   "Write a character, which may cause us to write other markup first"
   (CHECK-OPEN STREAM)

   (* ;; 
   "Fetch the CHARSETINFO for a given charset from a FONTDESCRIPTOR by calling \GETCHARSETINFO.")

   [with-htmldata (DATA STREAM)
          (LET ((CHARSET (\CHARSET CHCODE))
                (CHAR8CODE (\CHAR8CODE CHCODE))
                (CURRENT-CHARSET (\HTML-CHARSET DATA))
                (BACKING (\HTML-BACKING-STREAM DATA)))
               (HTML.OUTPUT-TEXT STREAM)
               (if (NEQ CHARSET (\HTML-CHARSET DATA))
                   then (\HTML.CHANGECHARSET DATA CHARSET))
               (SELECTC CHCODE
                   ((CHARCODE ^J)                            (* ; "handle LF")
                        (HTML.TERPRI STREAM))
                   ((CHARCODE ^M)                            (* ; "handle CR")
                        (HTML.TERPRI STREAM))
                   ((CHARCODE ^L)                            (* ; "handle pagefeed")
                        (HTML.NEWPAGE STREAM))
                   (LET* ((CHAR-WIDTH (HTML.CHARWIDTH STREAM CHCODE))
                          (NEW-X-POSITION (+ (\HTML-X-POSITION DATA)
                                             CHAR-WIDTH)))
                         (CL:FLET [(OUT NIL (HTML.OUTPUT-TEXT STREAM)
                                        (SELECTC CHCODE
                                            ((CHARCODE &) 
                                                 (CL:FORMAT BACKING "&amp;"))
                                            ((CHARCODE <) 
                                                 (CL:FORMAT BACKING "&lt;"))
                                            (\OUTCHAR BACKING CHCODE]
                                (if (> NEW-X-POSITION (\HTML-RIGHT-MARGIN DATA))
                                    then (HTML.TERPRI STREAM)
                                         (OUT)
                                         (CL:INCF (\HTML-X-POSITION DATA)
                                                CHAR-WIDTH)
                                  else (CL:SETF (\HTML-X-POSITION DATA)
                                              NEW-X-POSITION)
                                       (OUT])

(CL:DEFUN HTML.RESET (STREAM)
   (with-htmldata (DATA STREAM)
          (CL:SETF (\HTML-X-POSITION DATA)
                 (\HTML-LEFT-MARGIN DATA))
          (CL:SETF (\HTML-Y-POSITION DATA)
                 (\HTML-TOP-MARGIN DATA))
          (CL:SETF (\HTML-STATE DATA)
                 HTML.STATE.NON-TEXT-OUTPUT)))

(CL:DEFUN HTML.RIGHTMARGIN (STREAM NEW-RIGHT-MARGIN)
   (printout T "HTML.RIGHTMARGIN" T)
   (CHECK-OPEN STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-RIGHT-MARGIN DATA)))
               (COND
                  (NEW-RIGHT-MARGIN (CL:SETF (\HTML-RIGHT-MARGIN DATA)
                                           NEW-RIGHT-MARGIN)))
               OLD-VALUE)))

(CL:DEFUN HTML.SCALE (STREAM NEW-SCALE)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-SCALE DATA)))
               [COND
                  (NEW-SCALE (printout T "Warning: DSPSCALE argument is ignored")
                         (DO-NOT (CL:SETF (\HTML-SCALE DATA)
                                        NEW-SCALE]
               OLD-VALUE)))

(CL:DEFUN HTML.SCALEDBITBLT (SOURCEBITMAP SOURCELEFT SOURCEBOTTOM STREAM DESTINATIONLEFT 
                                   DESTINATIONBOTTOM WIDTH HEIGHT SOURCETYPE OPERATION TEXTURE 
                                   CLIPPINGREGION CLIPPEDSOURCELEFT CLIPPEDSOURCEBOTTOM SCALE)

   (* ;; 
   "just like bitblt, but scale the image by SCALE. this is called by HTML.BITBLT with SCALE = 1")

   (with-htmldata (DATA STREAM)
          (HTML.OUTPUT-GRAPHICS STREAM)
          (LET [(BACKING (\HTML-BACKING-STREAM DATA))
                (NEW-WIDTH (ITIMES SCALE (- WIDTH SOURCELEFT)))
                (NEW-HEIGHT (ITIMES SCALE (- HEIGHT SOURCEBOTTOM]
               (CL:FORMAT BACKING 
                  "<image width=%"~d%" height=%"~d%" x=%"~d%" y=%"~d%" href=%"data:image/png;base64,"
                      (P-TO-CP NEW-WIDTH)
                      (P-TO-CP NEW-HEIGHT)
                      DESTINATIONLEFT DESTINATIONBOTTOM)
               (WRITE-BASE64-PNG BACKING SOURCEBITMAP SOURCELEFT SOURCEBOTTOM WIDTH HEIGHT)
               (CL:FORMAT BACKING "%"/>~%%"))))

(CL:DEFUN HTML.SPACEFACTOR (STREAM NEW-FACTOR)
   (printout T "HTML.SPACEFACTOR" T)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-SPACE-FACTOR DATA)))
               (COND
                  (NEW-FACTOR (CL:SETF (\HTML-SPACE-FACTOR DATA)
                                     NEW-FACTOR)))
               OLD-VALUE)))

(CL:DEFUN HTML.TERPRI (STREAM)
   "Do a newline"
   (CHECK-OPEN STREAM)
   [with-htmldata (DATA STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
               (CL:SETF (\HTML-X-POSITION DATA)
                      (\HTML-LEFT-MARGIN DATA))
               (CL:DECF (\HTML-Y-POSITION DATA)
                      (\HTML-LINEFEED DATA))

               (* ;; "if Y-POSITION overflowed BOTTOM-MARGIN, start a new page")

               (if (< (\HTML-Y-POSITION DATA)
                      (\HTML-BOTTOM-MARGIN DATA))
                   then (\HTML.END-PAGE DATA STREAM)
                 else (HTML.OUTPUT-GRAPHICS STREAM])

(CL:DEFUN HTML.TOPMARGIN (STREAM NEW-TOP-MARGIN)
   (CHECK-OPEN STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-TOP-MARGIN DATA)))
               (COND
                  (NEW-TOP-MARGIN (CL:SETF (\HTML-TOP-MARGIN DATA)
                                         NEW-TOP-MARGIN)))
               OLD-VALUE)))

(CL:DEFUN HTML.XPOSITION (STREAM NEW-X-POSITION)
   (CHECK-OPEN STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-X-POSITION DATA)))
               (COND
                  (NEW-X-POSITION (CL:SETF (\HTML-X-POSITION DATA)
                                         NEW-X-POSITION)))
               OLD-VALUE)))

(CL:DEFUN HTML.YPOSITION (STREAM NEW-Y-POSITION)
   (CHECK-OPEN STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-Y-POSITION DATA)))
               (COND
                  (NEW-Y-POSITION (CL:SETF (\HTML-Y-POSITION DATA)
                                         NEW-Y-POSITION)))
               OLD-VALUE)))

(CL:DEFUN MAKE-HTML-IMAGETYPE ()
   "Return the IMAGETYPE descriptor for HTML streams."
   `((OPENSTREAM OPENHTMLSTREAM)
     (FONTCREATE \HTML.FONTCREATE)
     (FONTSAVAILABLE \HTML.FONTSAVAILABLE)
     (CREATECHARSET \HTML.CREATECHARSET)))

(CL:DEFUN \HTML.FILLCIRCLE (STREAM CENTERX CENTERY RADIUS COLOR-NAME)

   (* ;; "common code underlying HTML.FILLCIRCLE and HTML.DRAWCIRCLE")

   (with-htmldata (DATA STREAM)
          (HTML.OUTPUT-GRAPHICS STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
               (CL:FORMAT BACKING 
          "<circle cx=%"~d%" cy=%"~d%" r=%"~d%" fill=%"~a%" stroke=%"black%" stroke-width=%"1%"/>~%%"
                      CENTERX (\HTML.SVG-Y DATA CENTERY)
                      RADIUS COLOR-NAME))
          (HTML.MOVETO STREAM CENTERX CENTERY)))

(CL:DEFUN \HTML.INIT-IMAGEDATA (HTMLSTREAM FONT)
   "Finish initializing the stream's IMAGEDATA"
   (with-htmldata (DATA HTMLSTREAM)

          (* ;; "set the font and linefeed delta")

          (CL:SETF (\HTML-FONT DATA)
                 FONT)
          (CL:SETF (\HTML-LINEFEED DATA)
                 (FONTPROP FONT 'HEIGHT))

          (* ;; "set the margins")

          (CL:SETF (\HTML-LEFT-MARGIN DATA)
                 0)
          (CL:SETF (\HTML-RIGHT-MARGIN DATA)
                 (\HTML-PAGE-WIDTH DATA))
          [CL:SETF (\HTML-TOP-MARGIN DATA)
                 (- (\HTML-PAGE-HEIGHT DATA)
                    (FONTPROP FONT 'HEIGHT]
          (CL:SETF (\HTML-BOTTOM-MARGIN DATA)
                 0)
          (CL:SETF (\HTML-Y-POSITION DATA)
                 (\HTML-TOP-MARGIN DATA))))

(CL:DEFUN \HTMLSTREAM.INIT ()

   (* ;; "Initialize the HTMLSTREAM world")

   (DECLARE (GLOBALVARS \HTMLSTREAM.FDEV IMAGESTREAMTYPES *DEFAULT-EXTERNALFORMAT*))
   (SETQ \HTMLSTREAM.FDEV (create FDEV
                                 DEVICENAME _ (LIST 'HTML 'DOCUMENT)
                                 CLOSEFILE _ #'NILL
                                 BOUT _ #'NILL))

   (* ;; "update IMAGESTREAMTYPES")

   (PUTASSOC HTML.FONTCREATE.DEVICENAME (MAKE-HTML-IMAGETYPE)
          IMAGESTREAMTYPES))

(CL:DEFUN WRITE-BASE64-PNG (STREAM BITMAP SOURCELEFT SOURCEBOTTOM WIDTH HEIGHT)
   "Write a BASE64-encoded PNG rendition of the bitmap, clipped as directed"
   (LET [(NEW-BITMAP (BITMAPCREATE (- WIDTH SOURCELEFT)
                            (- HEIGHT SOURCEBOTTOM]
        (BITBLT BITMAP SOURCELEFT SOURCEBOTTOM NEW-BITMAP 0 0 WIDTH HEIGHT)
        (CONVERT-TO-PNG-BASE64 NEW-BITMAP STREAM)))

(CL:DEFUN CONVERT-TO-PNG-BASE64 (BITMAP STREAM)
   "Write a bitmap as a BASE64-encoded PNG stream"

   (* ;; "We encode the PNG as BASE64 using a GENERATOR to produce and ENCODE-BASE64-GEN to consume")

   (LET ((THRESHOLD (/ (BITSPERPIXEL BITMAP)
                       2)))
        (S-BASE64:ENCODE-BASE64-GEN (GENERATOR (UNCOMPRESSED-PNG:WRITE-BITMAP
                                                BITMAP THRESHOLD NIL #'(CL:LAMBDA (BYTE)
                                                                              (PRODUCE BYTE))
                                                #'UNCOMPRESSED-PNG:PIXEL-TO-MONOCHROME-RGBA))
               STREAM)))

(CL:DEFUN \HTML.FONTCREATE (FAMILY SIZE FACE ROTATION DEVICE CHARSET)
   "Create a font for the HTML device"

   (* ;; "FAMILY must be a litatom")

   (* ;; "SIZE is a positive integer number of printer's points")

   (* ;; "FACE = (WEIGHT SLOPE EXPANSION)")

   (* ;; "    WEIGHT = one of BOLD, MEDIUM, LIGHT")

   (* ;; "    SLOPE = one of ITALIC or REGULAR")

   (* ;; "    EXPANSION = one of REGULAR, COMPRESSED, EXPANDED")

   (* ;; "CHARSET is a positive integer or NIL")

   (DECLARE (GLOBALVARS \DEFAULTCHARSET))
   (CL:FORMAT T "\HTML.FONTCREATE ~a ~a ~a ~a ~a ~a~%%" FAMILY SIZE FACE ROTATION DEVICE CHARSET)

   (* ;; 
   "TODO consider handling requests where SIZE is out of range by clamping to the closest valid size")

   (if (NEQ ROTATION 0)
       then (ERROR "We only support ROTATION = 0"))
   (LET* [(FONT-DESCR (\HTML.READ-FONT-METRICS FAMILY FACE SIZE))
          (PRIVATE-FONT-INFO (MAKE-HTML.FONTINFO :CHARSETS (MAKE-CHARSET-BIT-ARRAY
                                                            (fetch (WEB-FONT-DESCR charsets)
                                                               of FONT-DESCR))
                                    :CSS-CLASS
                                    (CSS-CLASS-FROM FAMILY SIZE FACE]

         (* ;; "also read the metrics for charset CHARSET")

         (AND FONT-DESCR
              (LET* ((CHARSET-DESCR (\HTML.READ-CHARSET-METRICS FAMILY SIZE FACE CHARSET))
                     (CHARSET0-WIDTHS (fetch (WEB-CHARSET-METRICS xccsWidths) of CHARSET-DESCR))
                     (FD (create FONTDESCRIPTOR
                                FONTDEVICE _ DEVICE
                                FONTSCALE _ *CENTIPOINTS-PER-POINT*
                                FONTFAMILY _ FAMILY
                                FONTSIZE _ SIZE
                                FONTFACE _ FACE
                                \SFAscent _ (fetch (WEB-FONT-METRICS maxAscent) of FONT-DESCR)
                                \SFDescent _ (fetch (WEB-FONT-METRICS maxDescent) of FONT-DESCR)
                                \SFHeight _ (fetch (WEB-FONT-METRICS height) of FONT-DESCR)
                                ROTATION _ 0
                                FONTDEVICESPEC _ (LIST FAMILY SIZE FACE ROTATION DEVICE)
                                \SFFACECODE _ (\FACECODE FACE)
                                OTHERDEVICEFONTPROPS _ PRIVATE-FONT-INFO))
                     (CSINFO (\CREATECHARSET CHARSET FD T))
                     (CS-WIDTHS (fetch (CHARSETINFO WIDTHS) of CSINFO)))
                    (for WIDTH in CHARSET0-WIDTHS as CH from 0 to \MAXTHINCHAR
                       do (\FSETWIDTH CS-WIDTHS CH WIDTH))
                    FD))))

(CL:DEFUN \HTML.FONTSAVAILABLE (FAMILY SIZE FACE ROTATION DEVICE)
   "Search for matching fonts for the HTML device"

   (* ;; "any of the fields can be '*.  Ignore ROTATION. FACE = (WEIGHT SLOPE EXPANSION)")

   (* ;; "return a list of fontspecs")
                                                             (* ; "")
   (CL:FORMAT T "\HTML.FONTSAVAILABLE ~a ~a ~a ~a ~a~%%" FAMILY SIZE FACE ROTATION DEVICE 
          *WEB-FONT-METRICS-EXT*)
   (LET* ((FACE-AS-LIST (\FONTFACE FACE))
          (WEIGHT (fetch (WEB-FONT-FACE weight) of FACE-AS-LIST))
          (SLOPE (fetch (WEB-FONT-FACE slope) of FACE-AS-LIST))
          (EXPANSION (fetch (WEB-FONT-FACE expansion) of FACE-AS-LIST))
          (FILE-NAME (MAKE-FONT-METRICS-FILE-NAME FAMILY SIZE WEIGHT SLOPE EXPANSION)))

         (* ;; "TODO: enumerate!")

         FILE-NAME))

(CL:DEFUN \HTML.CREATECHARSET (FAMILY SIZE FACE ROTATION DEVICE CHARSET FONTDESC NOSLUG?)
   (printout T "\HTML.CREATECHARSET fam " FAMILY " size " SIZE " face " FACE " rot " ROTATION " dev "
          DEVICE " charset " CHARSET " desc " FONTDESC " NOSLUG? " NOSLUG? T)
   (LET ((PRIVATE-FONT-INFO (fetch (FONTDESCRIPTOR OTHERDEVICEFONTPROPS) of FONTDESC)))
        (CL:IF (KNOWN-CHARSET? PRIVATE-FONT-INFO CHARSET)
            (LET* ((CHARSET-DESCR (\HTML.READ-CHARSET-METRICS FAMILY SIZE FACE CHARSET))
                   (CHARSET-WIDTHS (fetch (WEB-CHARSET-METRICS xccsWidths) of CHARSET-DESCR))
                   (CSINFO (create CHARSETINFO
                                  OFFSETS _ NIL))
                   (CS-WIDTHS (fetch (CHARSETINFO WIDTHS) of CSINFO)))
                  (for WIDTH in CHARSET0-WIDTHS as CH from 0 to \MAXTHINCHAR
                     do (\FSETWIDTH CS-WIDTHS CH WIDTH))
                  (replace (CHARSETINFO IMAGEWIDTHS) of CSINFO with CS-WIDTHS)
                  CSINFO)
            (PROGN (printout T "Font does not support charset " CHARSET T)
                   NIL))))

(CL:DEFUN \HTML.CHANGECHARSET (DATA CHARSET)
   "Set the new character set, creating the charset info if necessary"

   (* ;; "But don't change the charset if CHARSET is not a member of the font's charsets list")

   (printout T "\HTML.CHANGECHARSET " CHARSET T)
   (LET* ((FONT (\HTML-FONT DATA)))
         (CL:IF (KNOWN-CHARSET? (fetch (FONTDESCRIPTOR OTHERDEVICEFONTPROPS) of FONT)
                       CHARSET)
             (LET ((CSINFO (\HTML.CREATECHARSET (FONTPROP FONT 'FAMILY)
                                  (FONTPROP FONT 'SIZE)
                                  (FONTPROP FONT 'FACE)
                                  0 HTML.FONTCREATE.DEVICENAME CHARSET FONT T)))
                  (\INSTALLCHARSETINFO FONT CSINFO CHARSET)
                  (CL:SETF (\HTML-CHARSET DATA)
                         CHARSET))
             (printout T "Font does not contain charset " CHARSET T))))

(CL:DEFUN MAKE-CHARSET-BIT-ARRAY (CHARSETS-LIST)
   "Read a list of charset numbers and return an equivalent set in the form of a bit-vector"
   (LET ((BIT-SET (BITMAPCREATE (IPLUS 1 \MAXCHARSET)
                         1 1)))
        (CL:DOLIST (CHARSET CHARSETS-LIST)
            (BITMAPBIT BIT-SET CHARSET 0 1))
        BIT-SET))

(CL:DEFUN KNOWN-CHARSET? (HTMLFONT CHARSET)
   "Return T if the HTMLFONT says it has metrics for CHARSET"
   [LET ((KNOWN-CHARSETS (\HTMLFONT-CHARSETS HTMLFONT)))
        (NOT (ZEROP (BITMAPBIT KNOWN-CHARSETS CHARSET 0])



(* ;; "PRINTFILETYPES-related")


(CL:DEFUN HTMLFILEP (FILE)
   "Is the FILE an HTML file?"

   (* ;; "Check the extension; failing that, look at the start of the file")

   NIL)

(CL:DEFUN MAKE-HTML-FROM-TEXT (FILE HTMLFILE FONTS HEADING TABS)

   (* ;; "TODO Convert a plain text file to HTML")

   NIL)

(CL:DEFUN MAKE-HTML-FROM-TEDIT (FILE HTMLFILE FONTS HEADING TABS)

   (* ;; "TODO Convert a TEdit file to HTML")

   NIL)

(\HTMLSTREAM.INIT)

(ADDTOVAR PRINTFILETYPES (HTML (TEST HTMLFILEP)
                               (EXTENSION (HTML))
                               (CONVERSION (TEXT MAKE-HTML-FROM-TEXT TEDIT MAKE-HTML-FROM-TEDIT))))



(* ;; "debugging support")


(CL:DEFUN \CLEAN-FONT-CACHE ()
   "Remove all HTML fonts from \FONTSINCORE"
   (DECLARE (GLOBALVARS \FONTSINCORE))
   (LET [(FAMILIES (MAPCAR *WEB-FONT-FAMILIES* #'(LAMBDA (FAMILY)
                                                   (CAR FAMILY]
        (CL:LABELS [(CLEAN (LIST)
                           (if (NULL LIST)
                               then NIL
                             else (LET ((ELEMENT (CAR LIST)))
                                       (if (MEMB (CAR ELEMENT)
                                                 FAMILIES)
                                           then (CLEAN (CDR LIST))
                                         else (CONS ELEMENT (CLEAN (CDR LIST]
               (SETQ \FONTSINCORE (CLEAN \FONTSINCORE))
               NIL)))

(DEFMACRO DO-NOT (&BODY BODY)
   "Ignore the body, return NIL"
   NIL)
(DECLARE%: DONTCOPY
  (FILEMAP (NIL (4612 6099 (BEZIER-CONTROL-POINTS-TO-SVG 4612 . 6099)) (6101 6290 (CLOSE-KNOTS 6101 . 
6290)) (6292 6547 (COMPUTE-LINE-HEIGHT 6292 . 6547)) (6549 6805 (COMPUTE-MAX-ASCENT 6549 . 6805)) (
6807 7066 (COMPUTE-MAX-DESCENT 6807 . 7066)) (7068 8727 (CONVERT-TO-BEZIER 7068 . 8727)) (8729 8885 (
HTML.INCHES-TO-POINTS 8729 . 8885)) (8887 8989 (HTML.INCHES-TO-CENTIPOINTS 8887 . 8989)) (8991 9080 (
CP-TO-P 8991 . 9080)) (9082 9248 (ICP-TO-P 9082 . 9248)) (9250 9326 (P-TO-CP 9250 . 9326)) (9328 9487 
(PIXEL-TO-PT 9328 . 9487)) (9489 9649 (PT-TO-PIXEL 9489 . 9649)) (9651 9799 (\HTML.SVG-Y 9651 . 9799))
 (9801 10144 (MAKE-FONT-METRICS-FILE-NAME 9801 . 10144)) (10146 10546 (MAKE-CHARSET-METRICS-FILE-NAME 
10146 . 10546)) (13393 13782 (CHECK-BROWSER-METRICS-FORMAT 13393 . 13782)) (13784 15476 (
CSS-CLASS-FROM 13784 . 15476)) (15478 16969 (\HTML.READ-FONT-METRICS 15478 . 16969)) (16971 18350 (
\HTML.READ-CHARSET-METRICS 16971 . 18350)) (18971 19203 (with-htmldata 18971 . 19203)) (19205 19425 (
CHECK-OPEN 19205 . 19425)) (19427 20084 (HTML.OUTPUT-GRAPHICS 19427 . 20084)) (20086 21222 (
HTML.OUTPUT-TEXT 20086 . 21222)) (21224 22179 (\HTML.MAYBE-START-PAGE 21224 . 22179)) (22181 22588 (
\HTML.END-PAGE 22181 . 22588)) (22590 26585 (HTML.WRITE-PREFACE 22590 . 26585)) (26587 32098 (
OPENHTMLSTREAM 26587 . 32098)) (32100 32454 (HTML.BACKCOLOR 32100 . 32454)) (32456 33004 (HTML.BITBLT 
32456 . 33004)) (33006 34974 (HTML.BLTSHADE 33006 . 34974)) (34976 35373 (HTML.BOTTOMMARGIN 34976 . 
35373)) (35375 35884 (HTML.CHARWIDTH 35375 . 35884)) (35886 36239 (HTML.CLIPPINGREGION 35886 . 36239))
 (36241 36713 (HTML.CLOSEFN 36241 . 36713)) (36715 37061 (HTML.COLOR 36715 . 37061)) (37063 37279 (
HTML.DRAWCIRCLE 37063 . 37279)) (37281 38519 (HTML.DRAWCURVE 37281 . 38519)) (38521 39270 (
HTML.DRAWELLIPSE 38521 . 39270)) (39272 39906 (HTML.DRAWLINE 39272 . 39906)) (39908 40811 (
HTML.DRAWPOLYGON 39908 . 40811)) (40813 40988 (HTML.FILLCIRCLE 40813 . 40988)) (40990 41936 (
HTML.FILLPOLYGON 40990 . 41936)) (41938 42821 (HTML.FONT 41938 . 42821)) (42823 43209 (HTML.LEFTMARGIN
 42823 . 43209)) (43211 43502 (HTML.LINEFEED 43211 . 43502)) (43504 43761 (HTML.MOVETO 43504 . 43761))
 (43763 43832 (HTML.NEWPAGE 43763 . 43832)) (43834 44156 (HTML.OPERATION 43834 . 44156)) (44158 46459 
(HTML.OUTCHARFN 44158 . 46459)) (46461 46786 (HTML.RESET 46461 . 46786)) (46788 47182 (
HTML.RIGHTMARGIN 46788 . 47182)) (47184 47558 (HTML.SCALE 47184 . 47558)) (47560 48658 (
HTML.SCALEDBITBLT 47560 . 48658)) (48660 49003 (HTML.SPACEFACTOR 48660 . 49003)) (49005 49673 (
HTML.TERPRI 49005 . 49673)) (49675 50018 (HTML.TOPMARGIN 49675 . 50018)) (50020 50363 (HTML.XPOSITION 
50020 . 50363)) (50365 50708 (HTML.YPOSITION 50365 . 50708)) (50710 50955 (MAKE-HTML-IMAGETYPE 50710
 . 50955)) (50957 51535 (\HTML.FILLCIRCLE 50957 . 51535)) (51537 52354 (\HTML.INIT-IMAGEDATA 51537 . 
52354)) (52356 52878 (\HTMLSTREAM.INIT 52356 . 52878)) (52880 53280 (WRITE-BASE64-PNG 52880 . 53280)) 
(53282 53945 (CONVERT-TO-PNG-BASE64 53282 . 53945)) (53947 56787 (\HTML.FONTCREATE 53947 . 56787)) (
56789 57670 (\HTML.FONTSAVAILABLE 56789 . 57670)) (57672 58855 (\HTML.CREATECHARSET 57672 . 58855)) (
58857 59777 (\HTML.CHANGECHARSET 58857 . 59777)) (59779 60116 (MAKE-CHARSET-BIT-ARRAY 59779 . 60116)) 
(60118 60342 (KNOWN-CHARSET? 60118 . 60342)) (60384 60536 (HTMLFILEP 60384 . 60536)) (60538 60671 (
MAKE-HTML-FROM-TEXT 60538 . 60671)) (60673 60802 (MAKE-HTML-FROM-TEDIT 60673 . 60802)) (61066 61866 (
\CLEAN-FONT-CACHE 61066 . 61866)) (61868 61942 (DO-NOT 61868 . 61942)))))
STOP

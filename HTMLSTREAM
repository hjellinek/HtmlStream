(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)

(FILECREATED "14-Oct-2024 13:18:05" {DSK}<Users>hjellinek>Projects>TrySVG>Lisp>HTMLSTREAM.;36 27319  

      :CHANGES-TO (FUNCTIONS HTML.DRAWPOLYGON HTML.FILLPOLYGON HTML.DRAWCIRCLE \HTML.FILLCIRCLE 
                         HTML.DRAWLINE OPENHTMLSTREAM HTML.DRAWELLIPSE HTML.OUTCHARFN 
                         \HTML.MAYBE-START-PAGE HTML.FILLCIRCLE HTML.CHARWIDTH HTML.CLOSEFN 
                         HTML.MOVETO HTML.OUTPUT-TEXT HTML.TERPRI \HTML.CHARWIDTH 
                         HTML.OUTPUT-GRAPHICS HTML.WRITE-PREFACE \HTMLSTREAM.INIT CHECK-OPEN 
                         HTML.BACKCOLOR HTML.BOTTOMMARGIN HTML.CLIPPINGREGION HTML.COLOR HTML.FONT 
                         HTML.LEFTMARGIN HTML.LINEFEED HTML.OPERATION HTML.RESET HTML.RIGHTMARGIN 
                         HTML.SCALE HTML.SPACEFACTOR HTML.TOPMARGIN HTML.XPOSITION HTML.YPOSITION 
                         with-htmldata HTML.DRAWCURVE)
                  (VARS HTMLSTREAMCOMS)
                  (STRUCTURES HTML.IMAGEDATA HTML.IMAGEDATA2 IMAGEDATA)
                  (RECORDS HTML.IMAGEDATA)
                  (VARIABLES \HTMLSTREAM.FDEV HTML.STATE.NON-TEXT HTML.STATES 
                         HTML.STATE.NON-TEXT-OUTPUT)
                  (FNS HTML.OUTPUT-GRAPHICS)

      :PREVIOUS-DATE " 3-Oct-2024 14:59:15" {DSK}<Users>hjellinek>Projects>TrySVG>Lisp>HTMLSTREAM.;13
)


(PRETTYCOMPRINT HTMLSTREAMCOMS)

(RPAQQ HTMLSTREAMCOMS
       ((VARIABLES HTML.FONTCREATE.DEVICENAME HTML.IMAGETYPE HTML.STATE.CLOSED HTML.STATE.NEW 
               HTML.STATE.NON-TEXT HTML.STATE.NON-TEXT-OUTPUT HTML.STATE.TEXT-OUTPUT HTML.STATES 
               \HTMLSTREAM.FDEV)
        (FUNCTIONS CHECK-OPEN HTML.BACKCOLOR HTML.BITBLT HTML.BLTSHADE HTML.BOTTOMMARGIN 
               HTML.CHARWIDTH HTML.CLIPPINGREGION HTML.CLOSEFN HTML.COLOR HTML.DRAWCIRCLE 
               HTML.DRAWCURVE HTML.DRAWELLIPSE HTML.DRAWLINE HTML.DRAWPOLYGON HTML.FILLCIRCLE 
               HTML.FILLPOLYGON HTML.FONT HTML.LEFTMARGIN HTML.LINEFEED HTML.MOVETO HTML.NEWPAGE 
               HTML.OPERATION HTML.OUTCHARFN HTML.OUTPUT-GRAPHICS HTML.OUTPUT-TEXT HTML.RESET 
               HTML.RIGHTMARGIN HTML.SCALE HTML.SCALEDBITBLT HTML.SPACEFACTOR HTML.STRINGWIDTH 
               HTML.TERPRI HTML.TOPMARGIN HTML.WRITE-PREFACE HTML.XPOSITION HTML.YPOSITION 
               OPENHTMLSTREAM \HTML.CHARWIDTH \HTML.FILLCIRCLE \HTMLSTREAM.INIT 
               \HTML.MAYBE-START-PAGE \HTMLSTREAM.INIT with-htmldata)
        (STRUCTURES HTML.IMAGEDATA)))

(CL:DEFCONSTANT HTML.FONTCREATE.DEVICENAME 'HTML)

(CL:DEFCONSTANT HTML.IMAGETYPE 'HTML)

(CL:DEFCONSTANT HTML.STATE.CLOSED :HTML.STATE.CLOSED)

(CL:DEFCONSTANT HTML.STATE.NEW :HTML.STATE.NEW)

(CL:DEFCONSTANT HTML.STATE.NON-TEXT :HTML.STATE.NON-TEXT)

(CL:DEFCONSTANT HTML.STATE.NON-TEXT-OUTPUT :HTML.STATE.NON-TEXT-OUTPUT)

(CL:DEFCONSTANT HTML.STATE.TEXT-OUTPUT :HTML.STATE.TEXT-OUTPUT)

(CL:DEFCONSTANT HTML.STATES '(HTML.STATE.NEW HTML.STATE.NON-TEXT-OUTPUT HTML.STATE.TEXT-OUTPUT 
                                    HTML.STATE.CLOSED)
                            "All HTML imagestream states, for informational use.")

(DEFGLOBALVAR \HTMLSTREAM.FDEV "The FDEV for HTML output")

(DEFMACRO CHECK-OPEN (STREAM)
   `[with-htmldata (DATA ,STREAM)
           (COND
              ((EQ (\HTML-STATE DATA)
                   HTML.STATE.CLOSED)
               (ERROR "HTMLSTREAM is in state CLOSED"])

(CL:DEFUN HTML.BACKCOLOR (STREAM NEW-COLOR)
   (printout T "HTML.BACKCOLOR" T)
   (CHECK-OPEN STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-BG-COLOR DATA)))
               (COND
                  (NEW-COLOR (CL:SETF (\HTML-BG-COLOR DATA)
                                    NEW-COLOR)))
               OLD-VALUE)))

(CL:DEFUN HTML.BITBLT (SOURCEBITMAP SOURCELEFFT SOURCEBOTTOM STREAM DESTINATIONLEFT DESTINATIONBOTTOM
                             WIDTH HEIGHT SOURCETYPE OPERATION TEXTURE CLIPPINGREGION 
                             CLIPPEDSOURCELEFT CLIPPEDSOURCEBOTTOM)
   (printout T "HTML.BITBLT" T))

(CL:DEFUN HTML.BLTSHADE (TEXTURE STREAM DESTINATIONLEFT DESTINATIONBOTTOM WIDTH HEIGHT OPERATION 
                               CLIPPINGREGION)
   (printout T "HTML.BLTSHADE" T))

(CL:DEFUN HTML.BOTTOMMARGIN (STREAM NEW-BOTTOM-MARGIN)
   (printout T "HTML.BOTTOMMARGIN")
   (CHECK-OPEN STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-BOTTOM-MARGIN DATA)))
               (if NEW-BOTTOM-MARGIN
                   then (CL:SETF (\HTML-BOTTOM-MARGIN DATA)
                               NEW-BOTTOM-MARGIN))
               OLD-VALUE)))

(CL:DEFUN HTML.CHARWIDTH (STREAM CHARCODE)

   (* ;; "TODO phony value")

   10)

(CL:DEFUN HTML.CLIPPINGREGION (STREAM NEW-REGION)
   (printout T "HTML.CLIPPINGREGION")
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-CLIPPING-REGION DATA)))
               (COND
                  (NEW-REGION (CL:SETF (\HTML-CLIPPING-REGION DATA)
                                     NEW-REGION)))
               OLD-VALUE)))

(CL:DEFUN HTML.CLOSEFN (STREAM)
   (printout T "HTML.CLOSEFN" T)
   (with-htmldata (DATA STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA)))

               (* ;; " TODO close any open sections (e.g., text)")

               (if (EQ (\HTML-STATE DATA)
                       HTML.STATE.TEXT-OUTPUT)
                   then (HTML.OUTPUT-GRAPHICS STREAM))
               (printout BACKING T "</svg>" T "</body>" T "</html>" T)
               (CLOSEF BACKING)
               (CL:SETF (\HTML-STATE DATA)
                      HTML.STATE.CLOSED))))

(CL:DEFUN HTML.COLOR (STREAM NEW-COLOR)
   (printout T "HTML.COLOR")
   (CHECK-OPEN STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-FG-COLOR DATA)))
               (COND
                  (NEW-COLOR (CL:SETF (\HTML-FG-COLOR DATA)
                                    NEW-COLOR)))
               OLD-VALUE)))

(CL:DEFUN HTML.DRAWCIRCLE (STREAM CENTERX CENTERY RADIUS BRUSH DASHING)
   "Draw a circle"

   (* ;; "TODO implement BRUSH and DASHING")

   (\HTML.FILLCIRCLE STREAM CENTERX CENTERY RADIUS "transparent"))

(CL:DEFUN HTML.DRAWCURVE (STREAM KNOTS CLOSED BRUSH DASHING)
   (printout T "HTML.DRAWCURVE" T))

(CL:DEFUN HTML.DRAWELLIPSE (STREAM CENTERX CENTERY SEMIMINORRADIUS SEMIMAJORRADIUS ORIENTATION BRUSH
                                  DASHING)
   "Draw an ellipse"

   (* ;; "TODO implement BRUSH and DASHING")

   (with-htmldata (DATA STREAM)
          (HTML.OUTPUT-GRAPHICS STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
               (CL:FORMAT BACKING "<ellipse cx=%"~d%" cy=%"~d%" rx=%"~d%" ry=%"~d%" transform=%"rotate(~d,~d,~d)%" fill=%"transparent%" stroke=%"black%" stroke-width=%"1%"/>~%%"
                      CENTERX CENTERY SEMIMAJORRADIUS SEMIMINORRADIUS (- ORIENTATION)
                      CENTERX CENTERY))))

(CL:DEFUN HTML.DRAWLINE (STREAM X1 Y1 X2 Y2 WIDTH OPERATION COLOR)
   "Draw a line"

   (* ;; "TODO implement OPERATION and COLOR")

   (with-htmldata (DATA STREAM)
          (HTML.OUTPUT-GRAPHICS STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
               (CL:FORMAT BACKING 
            "<line x1=%"~d%" y1=%"~d%" x2=%"~d%" y2=%"~d%" stroke=%"black%" stroke-width=%"~d%"/>~%%"
                      X1 Y1 X2 Y2 (OR WIDTH 1)))
          (HTML.MOVETO STREAM X2 Y2)))

(CL:DEFUN HTML.DRAWPOLYGON (STREAM POINTS CLOSED BRUSH DASHING)
   "Draw an open or closed polygon"

   (* ;; "TODO implement BRUSH and DASHING")

   (CHECK-OPEN STREAM)
   (HTML.OUTPUT-GRAPHICS STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA))
                (DRAWING-TYPE (if CLOSED
                                  then "polygon"
                                else "polyline")))
               (CL:FORMAT BACKING "<~a fill=%"none%" stroke=%"black%" stroke-width=%"1%" points=%"" 
                      DRAWING-TYPE)
               (for POINT in POINTS do (CL:FORMAT BACKING "~d,~d " (CAR POINT)
                                              (CDR POINT)))
               (CL:FORMAT BACKING "%"/>~%%"))))

(CL:DEFUN HTML.FILLCIRCLE (STREAM CENTERX CENTERY RADIUS TEXTURE)

   (* ;; "TODO implement TEXTURE")

   (\HTML.FILLCIRCLE STREAM CENTERX CENTERY RADIUS "black"))

(CL:DEFUN HTML.FILLPOLYGON (STREAM POINTS TEXTURE)
   "Fill a closed polygon"

   (* ;; "TODO implement TEXTURE")

   (CHECK-OPEN STREAM)
   (HTML.OUTPUT-GRAPHICS STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
               (CL:FORMAT BACKING 
        "<polygon fill=%"black%" fill-rule=%"evenodd%" stroke=%"black%" stroke-width=%"1%" points=%""
                      )
               (for POINT in POINTS do (CL:FORMAT BACKING "~d,~d " (CAR POINT)
                                              (CDR POINT)))
               (CL:FORMAT BACKING "%"/>~%%"))))

(CL:DEFUN HTML.FONT (STREAM NEW-FONT)
   (printout T "HTML.FONT" T)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-FONT DATA)))
               (COND
                  (NEW-FONT (CL:SETF (\HTML-FONT DATA)
                                   NEW-FONT)))
               OLD-VALUE)))

(CL:DEFUN HTML.LEFTMARGIN (STREAM NEW-LEFT-MARGIN)
   (printout T "HTML.LEFTMARGIN" T)
   (CHECK-OPEN STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-LEFT-MARGIN DATA)))
               (COND
                  (NEW-LEFT-MARGIN (CL:SETF (\HTML-LEFT-MARGIN DATA)
                                          NEW-LEFT-MARGIN)))
               OLD-VALUE)))

(CL:DEFUN HTML.LINEFEED (STREAM NEW-DELTA)
   (printout T "HTML.LINEFEED" T)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-LINEFEED DATA)))
               (COND
                  (NEW-DELTA (CL:SETF (\HTML-LINEFEED DATA)
                                    NEW-DELTA)))
               OLD-VALUE)))

(CL:DEFUN HTML.MOVETO (STREAM X Y)
   "Move to X, Y"
   (printout T "HTML.MOVETO" T)
   (HTML.OUTPUT-GRAPHICS STREAM)
   (with-htmldata (DATA STREAM)
          (CL:SETF (\HTML-X-POSITION DATA)
                 X)
          (CL:SETF (\HTML-Y-POSITION DATA)
                 Y)))

(CL:DEFUN HTML.NEWPAGE (STREAM)
   (printout T "HTML.NEWPAGE" T))

(CL:DEFUN HTML.OPERATION (STREAM NEW-OPERATION)
   (printout T "HTML.OPERATION" T)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-IMAGE-OPERATION DATA)))
               (COND
                  (NEW-OPERATION (CL:SETF (\HTML-IMAGE-OPERATION DATA)
                                        NEW-OPERATION)))
               OLD-VALUE)))

(CL:DEFUN HTML.OUTCHARFN (STREAM CHCODE)
   "Write a character, which may cause us to write other markup first"
   (CHECK-OPEN STREAM)
   [with-htmldata (DATA STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
               (\HTML.MAYBE-START-PAGE DATA STREAM)
               (if (NEQ (\HTML-STATE DATA)
                        HTML.STATE.TEXT-OUTPUT)
                   then (HTML.OUTPUT-TEXT STREAM))
               (SELECTC CHCODE
                   ((CHARCODE ^J)                            (* ; "handle LF")
                        (HTML.TERPRI STREAM))
                   ((CHARCODE ^M)                            (* ; "handle CR")
                        (HTML.TERPRI STREAM))
                   ((CHARCODE ^L)                            (* ; "handle pagefeed")
                        (HTML.NEWPAGE STREAM))
                   (LET* ((CHAR-WIDTH (\HTML.CHARWIDTH STREAM CHCODE))
                          (NEW-X-POSITION (+ (\HTML-X-POSITION DATA)
                                             CHAR-WIDTH)))
                         (if (> NEW-X-POSITION (\HTML-RIGHT-MARGIN DATA))
                             then (HTML.TERPRI STREAM))
                         (\OUTCHAR BACKING CHCODE)
                         (CL:INCF (\HTML-X-POSITION DATA)
                                (HTML.CHARWIDTH STREAM CHCODE])

(CL:DEFUN HTML.OUTPUT-GRAPHICS (STREAM)
   "We're going to do some graphics now"
   (with-htmldata (DATA STREAM)
          (SELECTC (\HTML-STATE DATA)
              (HTML.STATE.NON-TEXT-OUTPUT                    (* ; "this is the state we need")
                   )
              (HTML.STATE.TEXT-OUTPUT                        (* ; "end the text section")
                   (printout (\HTML-BACKING-STREAM DATA)
                          "</text>" T))
              NIL)

          (* ;; "finally")

          (CL:SETF (\HTML-STATE DATA)
                 HTML.STATE.NON-TEXT-OUTPUT)))

(CL:DEFUN HTML.OUTPUT-TEXT (STREAM)
   "We're being asked to write text"
   (with-htmldata (DATA STREAM)
          (SELECTC (\HTML-STATE DATA)
              (HTML.STATE.NON-TEXT-OUTPUT                    (* ; "start a new text section")
                   (printout (\HTML-BACKING-STREAM DATA)
                          "<text x="
                          (\HTML-X-POSITION DATA)
                          " y="
                          (\HTML-Y-POSITION DATA)
                          ">" T))
              (HTML.STATE.TEXT-OUTPUT                        (* ; "continue this text section")
                   )
              NIL)

          (* ;; "finally")

          (CL:SETF (\HTML-STATE DATA)
                 HTML.STATE.TEXT-OUTPUT)))

(CL:DEFUN HTML.RESET (STREAM)
   (printout T "HTML.RESET" T)
   (with-htmldata (DATA STREAM)
          (CL:SETF (\HTML-X-POSITION DATA)
                 (\HTML-LEFT-MARGIN DATA))
          (CL:SETF (\HTML-Y-POSITION DATA)
                 (\HTML-TOP-MARGIN DATA))
          (CL:SETF (\HTML-STATE DATA)
                 HTML.STATE.NON-TEXT)))

(CL:DEFUN HTML.RIGHTMARGIN (STREAM NEW-RIGHT-MARGIN)
   (printout T "HTML.RIGHTMARGIN" T)
   (CHECK-OPEN STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-RIGHT-MARGIN DATA)))
               (COND
                  (NEW-RIGHT-MARGIN (CL:SETF (\HTML-RIGHT-MARGIN DATA)
                                           NEW-RIGHT-MARGIN)))
               OLD-VALUE)))

(CL:DEFUN HTML.SCALE (STREAM NEW-SCALE)
   (printout T "HTML.SCALE" T)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-SCALE DATA)))
               (COND
                  (NEW-SCALE (CL:SETF (\HTML-SCALE DATA)
                                    NEW-SCALE)))
               OLD-VALUE)))

(CL:DEFUN HTML.SCALEDBITBLT (SOURCEBITMAP SOURCELEFFT SOURCEBOTTOM STREAM DESTINATIONLEFT 
                                   DESTINATIONBOTTOM WIDTH HEIGHT SOURCETYPE OPERATION TEXTURE 
                                   CLIPPINGREGION CLIPPEDSOURCELEFT CLIPPEDSOURCEBOTTOM SCALE)
   (printout T "HTML.SCALEDBITBLT" T))

(CL:DEFUN HTML.SPACEFACTOR (STREAM NEW-FACTOR)
   (printout T "HTML.SPACEFACTOR" T)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-SPACE-FACTOR DATA)))
               (COND
                  (NEW-FACTOR (CL:SETF (\HTML-SPACE-FACTOR DATA)
                                     NEW-FACTOR)))
               OLD-VALUE)))

(CL:DEFUN HTML.STRINGWIDTH (STREAM STR RDTBL)
   (printout T "HTML.STRINGWIDTH" T)
   0)

(CL:DEFUN HTML.TERPRI (STREAM)
   "Do a newline"
   (printout T "HTML.TERPRI" T)
   (CHECK-OPEN STREAM)
   (HTML.OUTPUT-GRAPHICS STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
               (CL:SETF (\HTML-X-POSITION DATA)
                      (\HTML-LEFT-MARGIN DATA))

               (* ;; 
         "TODO do we check to see if Y-POSITION overflowed BOTTOM-MARGIN and start a new page if so?")

               (CL:INCF (\HTML-Y-POSITION DATA)
                      (\HTML-LINEFEED DATA))
               (HTML.OUTPUT-TEXT STREAM))))

(CL:DEFUN HTML.TOPMARGIN (STREAM NEW-TOP-MARGIN)
   (printout T "HTML.TOPMARGIN" T)
   (CHECK-OPEN STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-TOP-MARGIN DATA)))
               (COND
                  (NEW-TOP-MARGIN (CL:SETF (\HTML-TOP-MARGIN DATA)
                                         NEW-TOP-MARGIN)))
               OLD-VALUE)))

(CL:DEFUN HTML.WRITE-PREFACE (STREAM)
   "Write the preamble to the file: <html><head>... etc."
   (with-htmldata (DATA STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA))
                (TITLE (\HTML-TITLE DATA)))
               (printout BACKING "<!DOCTYPE HTML>" T)
               (printout BACKING "<html>" T)
               (printout BACKING "<head>" T)
               (printout BACKING "<title>" TITLE "</title>" T)
               (printout BACKING "<link rel=%"preconnect%" href=%"https://fonts.googleapis.com%">" T)
               (printout BACKING 
                      "<link rel=%"preconnect%" href=%"https://fonts.gstatic.com%" crossorigin>" T)
               (printout BACKING "<link href=%"https://fonts.googleapis.com/css2?family==Noto+Sans+Display&family=Roboto&family=Roboto+Mono&display=swap%" rel=%"stylesheet%">"
                      T)
               (printout BACKING "<script>" T)
               (printout BACKING "    const fontSpecs = [" T)
               (printout BACKING "            {family: %"Roboto Mono%", size: %"10pt%"}," T)
               (printout BACKING "            {family: %"Noto Sans Display%", size: %"10pt%"}," T)
               (printout BACKING "            {family: %"Roboto%", size: %"10pt%"}," T)
               (printout BACKING "            {family: %"Roboto Mono%", size: %"20pt%"}," T)
               (printout BACKING "            {family: %"Noto Sans Display%", size: %"20pt%"}," T)
               (printout BACKING "            {family: %"Roboto%", size: %"20pt%"}," T)
               (printout BACKING "    ];" T T)
               (printout BACKING "    function fontFromSpec(font) {" T 
                      "        return font.size + %" %" + font.family;" T "    }" T T)
               (printout BACKING "    const fontLoadPromises = [];" T T)
               (printout BACKING "    for (const spec of fontSpecs) {" T 
                      "        fontLoadPromises.push(document.fonts.load(fontFromSpec(spec)));" T 
                      "    }" T T)
               (printout BACKING 
                  "    Promise.all(fontLoadPromises).then(_ => { console.log('All fonts loaded');});"
                      T)
               (printout BACKING "</script>" T)
               (printout BACKING "</head>" T)
               (printout BACKING "<body>" T)
               BACKING)))

(CL:DEFUN HTML.XPOSITION (STREAM NEW-X-POSITION)
   (printout T "HTML.XPOSITION" T)
   (CHECK-OPEN STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-X-POSITION DATA)))
               (COND
                  (NEW-X-POSITION (CL:SETF (\HTML-X-POSITION DATA)
                                         NEW-X-POSITION)))
               OLD-VALUE)))

(CL:DEFUN HTML.YPOSITION (STREAM NEW-Y-POSITION)
   (printout T "HTML.YPOSITION" T)
   (CHECK-OPEN STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-Y-POSITION DATA)))
               (COND
                  (NEW-Y-POSITION (CL:SETF (\HTML-Y-POSITION DATA)
                                         NEW-Y-POSITION)))
               OLD-VALUE)))

(CL:DEFUN OPENHTMLSTREAM (FILENAME &OPTIONAL TITLE)
   "Open and return an HTML imagestream"
   (LET* ([BACKING (OPENSTREAM FILENAME 'OUTPUT NIL '((FORMAT :UTF-8]
          (IMAGEOPS (create IMAGEOPS))
          (IMAGEDATA (MAKE-HTML.IMAGEDATA :BACKING-STREAM BACKING :TITLE (OR TITLE FILENAME)))
          (HTMLSTREAM (create STREAM
                             FULLFILENAME _ (FULLNAME BACKING)
                             DEVICE _ \HTMLSTREAM.FDEV
                             ACCESS _ 'OUTPUT
                             OUTCHARFN _ #'HTML.OUTCHARFN
                             STRMBOUTFN _ #'\BUFFERED.BOUT   (* ; "is this right?")
                             IMAGEOPS _ IMAGEOPS
                             USERCLOSEABLE _ T
                             USERVISIBLE _ T
                             IMAGEDATA _ IMAGEDATA)))

         (* ;; "Make the backing file invisible")

         (replace (STREAM USERVISIBLE) of BACKING with NIL)

         (* ;; "install our OUTCHARFN. you can't do this in the create.")

         (replace (STREAM OUTCHARFN) of HTMLSTREAM with #'HTML.OUTCHARFN)

         (* ;; "replace (do not smash!) the stream's IMAGEOPS with ours")

         (replace IMAGEOPS of HTMLSTREAM with IMAGEOPS)

         (* ;; "Set the informational fields")

         (replace IMFONTCREATE of IMAGEOPS with HTML.FONTCREATE.DEVICENAME)
         (replace IMAGETYPE of IMAGEOPS with HTML.IMAGETYPE)

         (* ;; "Set the functions")

         (replace IMCLOSEFN of IMAGEOPS with #'HTML.CLOSEFN)
         (replace IMDRAWLINE of IMAGEOPS with #'HTML.DRAWLINE)
         (replace IMDRAWCURVE of IMAGEOPS with #'HTML.DRAWCURVE)
         (replace IMDRAWCIRCLE of IMAGEOPS with #'HTML.DRAWCIRCLE)
         (replace IMDRAWELLIPSE of IMAGEOPS with #'HTML.DRAWELLIPSE)
         (replace IMFILLPOLYGON of IMAGEOPS with #'HTML.FILLPOLYGON)
         (replace IMDRAWPOLYGON of IMAGEOPS with #'HTML.DRAWPOLYGON)
         (replace IMFILLCIRCLE of IMAGEOPS with #'HTML.FILLCIRCLE)
         (replace IMBLTSHADE of IMAGEOPS with #'HTML.BLTSHADE)
         (replace IMBITBLT of IMAGEOPS with #'HTML.BITBLT)
         (replace IMSCALEDBITBLT of IMAGEOPS with #'HTML.SCALEDBITBLT)
         (replace IMMOVETO of IMAGEOPS with #'HTML.MOVETO)
         (replace IMSTRINGWIDTH of IMAGEOPS with #'HTML.STRINGWIDTH)
         (replace IMCHARWIDTH of IMAGEOPS with #'HTML.CHARWIDTH)
         (replace IMNEWPAGE of IMAGEOPS with #'HTML.NEWPAGE)
         (replace IMTERPRI of IMAGEOPS with #'HTML.TERPRI)
         (replace IMRESET of IMAGEOPS with #'HTML.RESET)
         (replace IMCLIPPINGREGION of IMAGEOPS with #'HTML.CLIPPINGREGION)
         (replace IMXPOSITION of IMAGEOPS with #'HTML.XPOSITION)
         (replace IMYPOSITION of IMAGEOPS with #'HTML.YPOSITION)
         (replace IMFONT of IMAGEOPS with #'HTML.FONT)
         (replace IMLEFTMARGIN of IMAGEOPS with #'HTML.LEFTMARGIN)
         (replace IMRIGHTMARGIN of IMAGEOPS with #'HTML.RIGHTMARGIN)
         (replace IMTOPMARGIN of IMAGEOPS with #'HTML.TOPMARGIN)
         (replace IMBOTTOMMARGIN of IMAGEOPS with #'HTML.BOTTOMMARGIN)
         (replace IMLINEFEED of IMAGEOPS with #'HTML.LINEFEED)
         (replace IMSCALE of IMAGEOPS with #'HTML.SCALE)
         (replace IMSPACEFACTOR of IMAGEOPS with #'HTML.SPACEFACTOR)
         (replace IMOPERATION of IMAGEOPS with #'HTML.OPERATION)
         (replace IMBACKCOLOR of IMAGEOPS with #'HTML.BACKCOLOR)
         (replace IMCOLOR of IMAGEOPS with #'HTML.COLOR)

         (* ;; "Maybe implement these later:")

         (replace IMWRITEPIXEL of IMAGEOPS with #'NILL)
         (replace IMROTATE of IMAGEOPS with #'NILL)
         (replace IMDRAWARC of IMAGEOPS with #'NILL)
         (replace IMTRANSLATE of IMAGEOPS with #'NILL)
         (replace IMSCALE2 of IMAGEOPS with #'NILL)
         (replace IMPUSHSTATE of IMAGEOPS with #'NILL)
         (replace IMPOPSTATE of IMAGEOPS with #'NILL)
         (replace IMDEFAULTSTATE of IMAGEOPS with #'NILL)
         (replace IMCHARWIDTHY of IMAGEOPS with #'NILL)
         (replace IMBITMAPSIZE of IMAGEOPS with #'NILL)

         (* ;; "write the preface")

         (HTML.WRITE-PREFACE HTMLSTREAM)

         (* ;; "return the stream")

         HTMLSTREAM))

(CL:DEFUN \HTML.CHARWIDTH (STREAM CHARCODE)
   "Very fast character width accessor"

   (* ;; "TODO hack!")

   10)

(CL:DEFUN \HTML.FILLCIRCLE (STREAM CENTERX CENTERY RADIUS COLOR-NAME)

   (* ;; "common code underlying HTML.FILLCIRCLE and HTML.DRAWCIRCLE")

   (with-htmldata (DATA STREAM)
          (HTML.OUTPUT-GRAPHICS STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
               (CL:FORMAT BACKING 
          "<circle cx=%"~d%" cy=%"~d%" r=%"~d%" fill=%"~a%" stroke=%"black%" stroke-width=%"1%"/>~%%"
                      CENTERX CENTERY RADIUS COLOR-NAME))
          (HTML.MOVETO STREAM CENTERX CENTERY)))

(CL:DEFUN \HTMLSTREAM.INIT ()

   (* ;; "Initialize the HTMLSTREAM world")

   (DECLARE (GLOBALVARS \HTMLSTREAM.FDEV))
   (SETQ \HTMLSTREAM.FDEV (create FDEV
                                 DEVICENAME _ (LIST 'HTML 'DOCUMENT)
                                 CLOSEFILE _ #'NILL
                                 BOUT _ #'NILL)))

(CL:DEFUN \HTML.MAYBE-START-PAGE (DATA STREAM)

   (* ;; "We're going to do output of some sort, so start an SVG stanza if necessary")

   (if (EQ (\HTML-STATE DATA)
           HTML.STATE.NEW)
       then (LET [(BACKING (\HTML-BACKING-STREAM DATA))
                  [PAGE-WIDTH (IABS (- (\HTML-RIGHT-MARGIN DATA)
                                       (\HTML-LEFT-MARGIN DATA]
                  (PAGE-HEIGHT (IABS (- (\HTML-BOTTOM-MARGIN DATA)
                                        (\HTML-TOP-MARGIN DATA]
                 (CL:FORMAT BACKING "<svg width=%"~d%" height=%"~d%" viewBox=%"~d ~d ~d ~d%">~%%" 
                        PAGE-WIDTH PAGE-HEIGHT (\HTML-LEFT-MARGIN DATA)
                        (\HTML-TOP-MARGIN DATA)
                        PAGE-WIDTH PAGE-HEIGHT)
                 (HTML.OUTPUT-GRAPHICS STREAM))))

(CL:DEFUN \HTMLSTREAM.INIT ()

   (* ;; "Initialize the HTMLSTREAM world")

   (DECLARE (GLOBALVARS \HTMLSTREAM.FDEV))
   (SETQ \HTMLSTREAM.FDEV (create FDEV
                                 DEVICENAME _ (LIST 'HTML 'DOCUMENT)
                                 CLOSEFILE _ #'NILL
                                 BOUT _ #'NILL)))

(DEFMACRO with-htmldata ((DATA-VAR-NAME STREAM)
                         &BODY
                         (BODY DECLS ENV))
   `(LET [(,DATA-VAR-NAME (fetch (STREAM IMAGEDATA) of ,STREAM]
         ,@DECLS
         ,@BODY))

(CL:DEFSTRUCT (HTML.IMAGEDATA (:CONC-NAME \HTML-))
   "Private data for HTMLSTREAMs"
   BACKING-STREAM
   FONT
   CLIPPING-REGION
   SPACE-FACTOR
   IMAGE-OPERATION
   BG-COLOR
   FG-COLOR
   (SCALE 1.0)
   (PAGE-NUM 0)
   (X-POSITION 0)
   (Y-POSITION 0)
   (LEFT-MARGIN 0)
   (TOP-MARGIN 0)
   (RIGHT-MARGIN 1024)
   (BOTTOM-MARGIN 1024)
   (LINEFEED 12)
   (STATE HTML.STATE.NEW)
   TITLE)
(DECLARE%: DONTCOPY
  (FILEMAP (NIL (3282 3502 (CHECK-OPEN 3282 . 3502)) (3504 3858 (HTML.BACKCOLOR 3504 . 3858)) (3860 4153
 (HTML.BITBLT 3860 . 4153)) (4155 4338 (HTML.BLTSHADE 4155 . 4338)) (4340 4737 (HTML.BOTTOMMARGIN 4340
 . 4737)) (4739 4827 (HTML.CHARWIDTH 4739 . 4827)) (4829 5182 (HTML.CLIPPINGREGION 4829 . 5182)) (5184
 5762 (HTML.CLOSEFN 5184 . 5762)) (5764 6108 (HTML.COLOR 5764 . 6108)) (6110 6326 (HTML.DRAWCIRCLE 
6110 . 6326)) (6328 6428 (HTML.DRAWCURVE 6328 . 6428)) (6430 7090 (HTML.DRAWELLIPSE 6430 . 7090)) (
7092 7596 (HTML.DRAWLINE 7092 . 7596)) (7598 8395 (HTML.DRAWPOLYGON 7598 . 8395)) (8397 8572 (
HTML.FILLCIRCLE 8397 . 8572)) (8574 9211 (HTML.FILLPOLYGON 8574 . 9211)) (9213 9518 (HTML.FONT 9213 . 
9518)) (9520 9906 (HTML.LEFTMARGIN 9520 . 9906)) (9908 10233 (HTML.LINEFEED 9908 . 10233)) (10235 
10524 (HTML.MOVETO 10235 . 10524)) (10526 10595 (HTML.NEWPAGE 10526 . 10595)) (10597 10954 (
HTML.OPERATION 10597 . 10954)) (10956 12358 (HTML.OUTCHARFN 10956 . 12358)) (12360 12966 (
HTML.OUTPUT-GRAPHICS 12360 . 12966)) (12968 13730 (HTML.OUTPUT-TEXT 12968 . 13730)) (13732 14081 (
HTML.RESET 13732 . 14081)) (14083 14477 (HTML.RIGHTMARGIN 14083 . 14477)) (14479 14792 (HTML.SCALE 
14479 . 14792)) (14794 15118 (HTML.SCALEDBITBLT 14794 . 15118)) (15120 15463 (HTML.SPACEFACTOR 15120
 . 15463)) (15465 15557 (HTML.STRINGWIDTH 15465 . 15557)) (15559 16170 (HTML.TERPRI 15559 . 16170)) (
16172 16550 (HTML.TOPMARGIN 16172 . 16550)) (16552 18911 (HTML.WRITE-PREFACE 16552 . 18911)) (18913 
19291 (HTML.XPOSITION 18913 . 19291)) (19293 19671 (HTML.YPOSITION 19293 . 19671)) (19673 24465 (
OPENHTMLSTREAM 19673 . 24465)) (24467 24590 (\HTML.CHARWIDTH 24467 . 24590)) (24592 25125 (
\HTML.FILLCIRCLE 24592 . 25125)) (25127 25471 (\HTMLSTREAM.INIT 25127 . 25471)) (25473 26318 (
\HTML.MAYBE-START-PAGE 25473 . 26318)) (26320 26664 (\HTMLSTREAM.INIT 26320 . 26664)) (26666 26898 (
with-htmldata 26666 . 26898)))))
STOP

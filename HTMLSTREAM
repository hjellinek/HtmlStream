(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)

(FILECREATED " 3-Apr-2025 11:38:32" {DSK}<Users>hjellinek>Projects>TrySVG>Lisp>HTMLSTREAM.;17 80333  

      :CHANGES-TO (FUNCTIONS HTML.OUTPUT-TEXT)

      :PREVIOUS-DATE " 2-Apr-2025 15:35:15" {DSK}<Users>hjellinek>Projects>TrySVG>Lisp>HTMLSTREAM.;16
)


(PRETTYCOMPRINT HTMLSTREAMCOMS)

(RPAQQ HTMLSTREAMCOMS
       ((FILES XCCS-UNICODE-DUMPER BASE64 U-PNG)
        (VARIABLES *CENTIPOINTS-PER-POINT*)
        (RECORDS WEB-FONT-DESCR WEB-FONT-FACE WEB-FONT-METRICS WEB-CHARSET-METRICS)
        (FUNCTIONS CLOSE-KNOTS HTML.INCHES-TO-POINTS HTML.INCHES-TO-CENTIPOINTS CP-TO-P ICP-TO-P 
               P-TO-CP PIXEL-TO-PT PT-TO-PIXEL \HTML.SVG-Y)
        (FUNCTIONS MAKE-FONT-METRICS-FILE-NAME MAKE-CHARSET-METRICS-FILE-NAME)
        (VARIABLES *WEB-FONT-DIRECTORY* *WEB-FONT-MAPPINGS* *GOOGLE-FONTS-BASE-URL* 
               *HTML-STANDARD-PAGE-WEB-FONT-FAMILIES* *HTML-STYLESHEET-FONT-FAMILY-DEFS* 
               *DEFAULT-WEB-FONT-METRICS-FILE-NAME* *WEB-FONT-EXPANSIONS* *WEB-FONT-FAMILIES* 
               *WEB-FONT-FAMILY-NAMES* *WEB-FONT-SIZES* *WEB-FONT-SLOPES* *WEB-FONT-WEIGHTS* 
               *BROWSER-FONTS-MAP* *WEB-CHARSET-METRICS-EXT* *WEB-CHARSET-METRICS-DOT-EXT* 
               *WEB-FONT-METRICS-EXT* *WEB-FONT-METRICS-DOT-EXT*)
        (VARIABLES *BROWSER-FONT-FILE-VERSION* *HTML.DEFAULT-PAGE-SIZE* HTML.FONTCREATE.DEVICENAME 
               HTML.IMAGETYPE HTML.STATE.BETWEEN-PAGES HTML.STATE.CLOSED HTML.STATE.NON-TEXT 
               HTML.STATE.NON-TEXT-OUTPUT HTML.STATE.TEXT-OUTPUT HTML.STATES \HTMLSTREAM.FDEV 
               *XCCS-KNOWN-CHARSETS* *XCCS-UNDEFINED-CHARCODE*)
        (FUNCTIONS CHECK-BROWSER-METRICS-FORMAT CSS-CLASS-FROM CSS-CLASS-FROM-FAMILY 
               \HTML.READ-FONT-METRICS \HTML.READ-CHARSET-METRICS \SF \HTML.SVG-STROKE-DASHARRAY 
               \HTML.SVG-BRUSH-WIDTH \HTML.SVG-BRUSH-CLASS \HTML.SVG-COLOR)
        (STRUCTURES HTML.IMAGEDATA HTML.FONTINFO)
        (FUNCTIONS with-htmldata)
        (FUNCTIONS HTML.OUTPUT-GRAPHICS HTML.OUTPUT-TEXT \HTML.MAYBE-START-PAGE \HTML.END-PAGE 
               HTML.WRITE-PREFACE CONVERT-FAMILY-TO-QUERY-PARAM \HTML.MAKE-STYLESHEET-URL)
        (FUNCTIONS OPENHTMLSTREAM HTML.BACKCOLOR HTML.BITBLT HTML.BLTSHADE HTML.BOTTOMMARGIN 
               HTML.CHARWIDTH HTML.CLIPPINGREGION HTML.CLOSEFN HTML.COLOR HTML.DRAWCIRCLE 
               HTML.DRAWCURVE HTML.DRAWELLIPSE HTML.DRAWLINE HTML.DRAWPOLYGON HTML.FILLCIRCLE 
               HTML.FILLPOLYGON HTML.FONT HTML.LEFTMARGIN HTML.LINEFEED HTML.MOVETO HTML.NEWPAGE 
               HTML.OPERATION HTML.OUTCHARFN HTML.RESET HTML.RIGHTMARGIN HTML.SCALE HTML.SCALEDBITBLT
               HTML.SPACEFACTOR HTML.TERPRI HTML.TOPMARGIN HTML.XPOSITION HTML.YPOSITION 
               MAKE-HTML-IMAGETYPE \HTML.INIT-IMAGEDATA \HTMLSTREAM.INIT)
        (FUNCTIONS WRITE-BASE64-PNG CONVERT-TO-PNG-BASE64)
        (FUNCTIONS URL-ENCODE HTML-ENCODE)
        (FUNCTIONS \HTML.FONTCREATE \HTML.FONTSAVAILABLE \HTML.CREATECHARSET \HTML.CHANGECHARSET 
               MAKE-CHARSET-BIT-ARRAY KNOWN-CHARSET? \HTML.WARN-CHARSET)
        (P (\HTMLSTREAM.INIT))
        
        (* ;; "PRINTFILETYPES-related")

        (VARIABLES *HTML-FILE-EXTENSIONS* *HTML-FINGERPRINTS*)
        (FUNCTIONS HTMLFILEP MAKE-HTML-FROM-TEXT MAKE-HTML-FROM-TEDIT)
        [ADDVARS (PRINTFILETYPES (HTML (TEST HTMLFILEP)
                                       (EXTENSION (HTML))
                                       (CONVERSION (TEXT MAKE-HTML-FROM-TEXT TEDIT 
                                                         MAKE-HTML-FROM-TEDIT]
        
        (* ;; "debugging support")

        (FUNCTIONS \CLEAN-FONT-CACHE DO-NOT)))

(FILESLOAD XCCS-UNICODE-DUMPER BASE64 U-PNG)

(CL:DEFCONSTANT *CENTIPOINTS-PER-POINT* 100
   "There are 100 centipoints per point, by definition and by golly!")
(DECLARE%: EVAL@COMPILE

(PROPRECORD WEB-FONT-DESCR (:NAME :FACE :SIZE :HEIGHT :SLUG-WIDTH :MAX-ASCENT :MAX-DESCENT :CHARSETS))

(RECORD WEB-FONT-FACE (:WEIGHT :SLOPE :EXPANSION))

(PROPRECORD WEB-FONT-METRICS (:FAMILY :SIZE :WEIGHT :STYLE :HEIGHT :MAX-ASCENT :MAX-DESCENT :CHARSETS
                                    :LISP-NAME :LISP-FACE :LISP-SIZE))

(PROPRECORD WEB-CHARSET-METRICS (:CHARSET :MAX-ASCENT :MAX-DESCENT :XCCS-WIDTHS))
)

(CL:DEFUN CLOSE-KNOTS (KNOTS)
   "Create a closed polygon by adding the first point to the end of the list"
   (LET ((FIRST-KNOT (CAR KNOTS)))
        (APPEND KNOTS (LIST FIRST-KNOT))))

(CL:DEFUN HTML.INCHES-TO-POINTS (INCHES)
   "Convert inches to points"

   (* ;; "Assume one inch contains 72 points")

   (FIXR (TIMES 72 INCHES)))

(CL:DEFUN HTML.INCHES-TO-CENTIPOINTS (INCHES)
   (FIXR (TIMES 72 *CENTIPOINTS-PER-POINT* INCHES)))

(DEFMACRO CP-TO-P (CENTIPOINTS)
   `(FQUOTIENT ,CENTIPOINTS *CENTIPOINTS-PER-POINT*))

(DEFMACRO ICP-TO-P (CENTIPOINTS)

   (* ;; "convert centipoints to an integer number of points")

   `(FIXR (FQUOTIENT ,CENTIPOINTS *CENTIPOINTS-PER-POINT*)))

(DEFMACRO P-TO-CP (POINTS)
   `(FTIMES ,POINTS *CENTIPOINTS-PER-POINT*))

(CL:DEFUN PIXEL-TO-PT (PIXELS)
   "Convert some number of pixels to that number of points"

   (* ;; "96 pixels = 72 points")

   (FTIMES 0.75 PIXELS))

(CL:DEFUN PT-TO-PIXEL (POINTS)
   "Convert some number of points to that number of pixels"

   (* ;; "96 pixels = 72 points")

   (FTIMES 1.333 POINTS))

(CL:DEFUN \HTML.SVG-Y (DATA MEDLEY-Y)
   "Return the SVG Y-coordinate for a Medley Y coordinate"
   (- (\HTML-PAGE-HEIGHT DATA)
      MEDLEY-Y))

(CL:DEFUN MAKE-FONT-METRICS-FILE-NAME (FAMILY SIZE WEIGHT SLOPE EXPANSION)
   "Create the name of the file that holds the metrics for the given font"

   (* ;; "The file name looks like <family>-<size>-<weight>-<slope>-<expansion>.wfm")

   (CL:FORMAT NIL "~A-~d-~A-~A-~A.~A" FAMILY SIZE WEIGHT SLOPE EXPANSION *WEB-FONT-METRICS-EXT*))

(CL:DEFUN MAKE-CHARSET-METRICS-FILE-NAME (FAMILY SIZE WEIGHT SLOPE EXPANSION CHARSET-NUM)
   "Create the name of the file that holds the metrics for the given charset"

   (* ;; "The file name looks like <family>-<size>-<weight>-<slope>-<expansion>-<charset>.wcm")

   (CL:FORMAT NIL "~A-~d-~A-~A-~A-~d.~A" FAMILY SIZE WEIGHT SLOPE EXPANSION CHARSET-NUM 
          *WEB-CHARSET-METRICS-EXT*))

(DEFGLOBALVAR *WEB-FONT-DIRECTORY* "."
   "The directory that holds .wfm and .wcm files")

(DEFGLOBALVAR *WEB-FONT-MAPPINGS*
   '((HELVETICA . NOTO-SANS)
     (HELVETICAD . NOTO-SANS-DISPLAY)
     (TIMESROMAN . NOTO-SERIF)
     (TIMESROMAND . NOTO-SERIF-DISPLAY)
     (COURIER . NOTO-SANS-MONO)
     (GACHA . NOTO-SANS-MONO)
     (CLASSIC . NOTO-SERIF)
     (MODERN . NOTO-SANS)
     (CREAM . NOTO-SANS)
     (TERMINAL . NOTO-SANS-MONO)
     (LOGO . NOTO-SANS-MONO)
     (OPTIMA . NOTO-SERIF)
     (TITAN . NOTO-SANS-MONO))
   "Map common font families to Web font families")

(CL:DEFPARAMETER *GOOGLE-FONTS-BASE-URL* "https://fonts.googleapis.com/css2"
   "The base of the Google Fonts font stylesheet URL")

(CL:DEFPARAMETER *HTML-STANDARD-PAGE-WEB-FONT-FAMILIES* '(NOTO-SANS NOTO-SANS-MONO NOTO-SANS-DISPLAY
                                                                NOTO-SERIF)

                                                        (* ;; 
                       "these correspond to the property names in *HTML-STYLESHEET-FONT-FAMILY-DEFS*")

                                                        
                  "The names of the standard font families to be included in the HTML pages we write")

(CL:DEFPARAMETER *HTML-STYLESHEET-FONT-FAMILY-DEFS*
   `[NOTO-SANS ("Noto Sans" "Noto Sans Simplified Chinese" "Noto Sans Traditional Chinese" 
                      "Noto Sans JP" "Noto Sans KR" "Noto Sans Arabic" "Noto Sans Hebrew" 
                      "Noto Sans Runic" "Noto Sans Georgian" "Noto Sans Armenian" "Noto Sans Thai" 
                      "Noto Sans Lao" "Noto Sans Gurmukhi" "Noto Sans Bengali" "Noto Sans Math" 
                      "Noto Sans Symbols" "Noto Sans Symbols 2")
           NOTO-SANS-MONO
           ("Noto Sans Mono")
           NOTO-SANS-DISPLAY
           ("Noto Sans Display")
           NOTO-SERIF
           ("Noto Serif" "Noto Serif Simplified Chinese" "Noto Serif Traditional Chinese" 
                  "Noto Serif JP" "Noto Serif KR" "Noto Naskh Arabic" "Noto Serif Hebrew"
                  ,(\SF "Noto Sans Runic")
                  "Noto Serif Georgian" "Noto Serif Armenian" "Noto Serif Thai" "Noto Serif Lao" 
                  "Noto Serif Devanagari" "Noto Serif Gurmukhi" "Noto Serif Bengali"
                  ,(\SF "Noto Sans Math")
                  ,(\SF "Noto Sans Symbols")
                  ,(\SF "Noto Sans Symbols 2"]
   "The font family styles we'll load into the page")

(CL:DEFCONSTANT *DEFAULT-WEB-FONT-METRICS-FILE-NAME* "font-metrics.data"
   "The usual name of the raw font metrics file we get from the browser")

(CL:DEFCONSTANT *WEB-FONT-EXPANSIONS* '(REGULAR)
                                      "The Web font expansions we support")

(CL:DEFCONSTANT *WEB-FONT-FAMILIES* '((NOTO-SANS . "ns")
                                      (NOTO-SANS-MONO . "nsm")
                                      (NOTO-SANS-DISPLAY . "nsd")
                                      (NOTO-SERIF . "nsf"))
                                    
                              "A-list of supported Web font names, as atoms, with the CSS class name")

(CL:DEFCONSTANT *WEB-FONT-FAMILY-NAMES* '("Noto Sans" "Noto Sans Mono" "Noto Sans Display" 
                                                "Noto Serif")

                                        (* ;; "keep this synchronized with *WEB-FONT-FAMILIES*")

                                        
                               "The names of the font families we're using, suitable for use in CSS.")

(CL:DEFCONSTANT *WEB-FONT-SIZES* '(8 10 12 14 16 18 20 24 32 40 92)
                                 "Sizes of the Web fonts we support, in points")

(CL:DEFCONSTANT *WEB-FONT-SLOPES* '(REGULAR ITALIC)
                                  "The Web font slopes we support")

(CL:DEFCONSTANT *WEB-FONT-WEIGHTS* '(MEDIUM BOLD)
                                   "The supported Web font weights")

(CL:DEFPARAMETER *BROWSER-FONTS-MAP* '((NOTO-SANS . "sans-serif")
                                       (NOTO-SANS-MONO . "monospace")
                                       (NOTO-SANS-DISPLAY . "sans-serif")
                                       (NOTO-SERIF . "serif"))
                                     
     "Map each of our fonts to a browser default. The metrics for these characters may be incorrect.")

(CL:DEFCONSTANT *WEB-CHARSET-METRICS-EXT* "wcm"
   "The filename extension for files that describe a charset's metrics")

(CL:DEFCONSTANT *WEB-CHARSET-METRICS-DOT-EXT* (CONCAT "." *WEB-CHARSET-METRICS-EXT*)
                                              
       "The filename extension for files that describe a charset's metrics, prepended with a dot (.)")

(CL:DEFCONSTANT *WEB-FONT-METRICS-EXT* "wfm"
   "The file extension for a web font metrics file")

(CL:DEFCONSTANT *WEB-FONT-METRICS-DOT-EXT* (CONCAT "." *WEB-FONT-METRICS-EXT*)
                                           
                           "The file extension for a web font metrics file, prepended with a dot (.)")

(CL:DEFCONSTANT *BROWSER-FONT-FILE-VERSION* 2
   "The current version of the font-metrics.data file")

(CL:DEFCONSTANT *HTML.DEFAULT-PAGE-SIZE*

   (* ;; "the default size of an HTML page, in centipoints")

   (CONS (HTML.INCHES-TO-CENTIPOINTS 8.5)
         (HTML.INCHES-TO-CENTIPOINTS 11.0)))

(CL:DEFCONSTANT HTML.FONTCREATE.DEVICENAME 'HTML)

(CL:DEFCONSTANT HTML.IMAGETYPE 'HTML)

(CL:DEFCONSTANT HTML.STATE.BETWEEN-PAGES :HTML.STATE.BETWEEN-PAGES)

(CL:DEFCONSTANT HTML.STATE.CLOSED :HTML.STATE.CLOSED)

(CL:DEFCONSTANT HTML.STATE.NON-TEXT :HTML.STATE.NON-TEXT)

(CL:DEFCONSTANT HTML.STATE.NON-TEXT-OUTPUT :HTML.STATE.NON-TEXT-OUTPUT)

(CL:DEFCONSTANT HTML.STATE.TEXT-OUTPUT :HTML.STATE.TEXT-OUTPUT)

(CL:DEFCONSTANT HTML.STATES '(HTML.STATE.BETWEEN-PAGES HTML.STATE.NON-TEXT-OUTPUT 
                                    HTML.STATE.TEXT-OUTPUT HTML.STATE.CLOSED)
                            "All HTML imagestream states, for informational use.")

(DEFGLOBALVAR \HTMLSTREAM.FDEV "The FDEV for HTML output")

(CL:DEFCONSTANT *XCCS-KNOWN-CHARSETS*
   '(0 33 34 35 36 37 38 39 40 224 225 226 227 228 238 239 240 241)
   "The set of defined XCCS character sets")

(CL:DEFCONSTANT *XCCS-UNDEFINED-CHARCODE* 61639
   "XCCS defines 0xF0C7 (61639) as 'Replacement symbol (for undefined code points)'")

(CL:DEFUN CHECK-BROWSER-METRICS-FORMAT (VERSION)

   (* ;; "check that the version looks like (format <number>)")

   (if (NOT (AND (LISTP VERSION)
                 (EQ ':FORMAT (CAR VERSION))
                 (EQUAL (CADR VERSION)
                        *BROWSER-FONT-FILE-VERSION*)))
       then (ERROR "File does not begin with expected format declaration"))
   VERSION)

(CL:DEFUN CSS-CLASS-FROM (FAMILY SIZE FACE)
   "Compute the CSS class names from the FAMILY, SIZE, and FACE"

   (* ;; "the result will look like %"nsd10 bold italic%" or a variant")

   [LET* [(FONT-CLASS-NAME-ROOT (CDR (FASSOC FAMILY *WEB-FONT-FAMILIES*)))
          (SIZE-CLASS-NAME (CONCAT "sz" SIZE))
          (WEIGHT-CLASS (COND
                           ((EQ (CAR FACE)
                                'BOLD)
                            "bold")
                           (T NIL)))
          (SLOPE-CLASS (COND
                          ((EQ (CADR FACE)
                               'ITALIC)
                           "italic")
                          (T NIL)))
          (SLOPE-AND-WEIGHT-CLASSES (COND
                                       ((AND (NULL WEIGHT-CLASS)
                                             (NULL SLOPE-CLASS))
                                        "")
                                       ((NULL WEIGHT-CLASS)
                                        SLOPE-CLASS)
                                       ((NULL SLOPE-CLASS)
                                        WEIGHT-CLASS)
                                       (T (CONCAT WEIGHT-CLASS " " SLOPE-CLASS]
         (CONCAT FONT-CLASS-NAME-ROOT " " SIZE-CLASS-NAME (COND
                                                             ((EQUAL SLOPE-AND-WEIGHT-CLASSES "")
                                                              "")
                                                             (T (CONCAT " " SLOPE-AND-WEIGHT-CLASSES])

(CL:DEFUN CSS-CLASS-FROM-FAMILY (FAMILY)
   "Compute the CSS class name from the FAMILY"
   (CDR (FASSOC FAMILY *WEB-FONT-FAMILIES*)))

(CL:DEFUN \HTML.READ-FONT-METRICS (FAMILY FACE SIZE)
   "Read the font metrics file and return the WEB-FONT-DESCR"
   (LET* ((WEIGHT (fetch (WEB-FONT-FACE :WEIGHT) of FACE))
          (SLOPE (fetch (WEB-FONT-FACE :SLOPE) of FACE))
          (EXPANSION (fetch (WEB-FONT-FACE :EXPANSION) of FACE))
          (FILE-NAME (PACKFILENAME.STRING 'DIRECTORY *WEB-FONT-DIRECTORY* 'NAME
                            (MAKE-FONT-METRICS-FILE-NAME FAMILY SIZE WEIGHT SLOPE EXPANSION)))
          (*PACKAGE* (CL:FIND-PACKAGE "IL")))
         (CL:WITH-OPEN-STREAM (IN (OPENSTREAM FILE-NAME 'INPUT))
                (CHECK-BROWSER-METRICS-FORMAT (READ IN))
                (LET* ((DESCR (READ IN))
                       (FAMILY (fetch (WEB-FONT-DESCR :NAME) of DESCR))
                       (FACE (fetch (WEB-FONT-DESCR :FACE) of DESCR))
                       (SIZE (fetch (WEB-FONT-DESCR :SIZE) of DESCR))
                       (HEIGHT (fetch (WEB-FONT-DESCR :HEIGHT) of DESCR))
                       (MAX-ASCENT (fetch (WEB-FONT-DESCR :MAX-ASCENT) of DESCR))
                       (MAX-DESCENT (fetch (WEB-FONT-DESCR :MAX-DESCENT) of DESCR))
                       (SLUG-WIDTH (fetch (WEB-FONT-DESCR :SLUG-WIDTH) of DESCR))
                       (CHARSETS (fetch (WEB-FONT-DESCR :CHARSETS) of DESCR)))
                      (CL:FORMAT T "font: ~A face: ~A size: ~A height: ~A #charsets: ~d~%%" FAMILY 
                             FACE SIZE HEIGHT (LENGTH CHARSETS))
                      DESCR))))

(CL:DEFUN \HTML.READ-CHARSET-METRICS (FAMILY SIZE FACE CHARSET-NUM)
   "Read a file containing a charset's metrics and return the WEB-CHARSET-METRICS"
   (LET* ((WEIGHT (fetch (WEB-FONT-FACE :WEIGHT) of FACE))
          (SLOPE (fetch (WEB-FONT-FACE :SLOPE) of FACE))
          (EXPANSION (fetch (WEB-FONT-FACE :EXPANSION) of FACE))
          (FILE-NAME (PACKFILENAME.STRING 'DIRECTORY *WEB-FONT-DIRECTORY* 'NAME
                            (MAKE-CHARSET-METRICS-FILE-NAME FAMILY SIZE WEIGHT SLOPE EXPANSION 
                                   CHARSET-NUM)))
          (*PACKAGE* (CL:FIND-PACKAGE "IL")))
         (CL:WITH-OPEN-STREAM (IN (OPENSTREAM FILE-NAME 'INPUT))
                (CHECK-BROWSER-METRICS-FORMAT (READ IN))
                (LET* ((CHARSET (READ IN))
                       (MAX-ASCENT (fetch (WEB-CHARSET-METRICS :MAX-ASCENT) of CHARSET))
                       (MAX-DESCENT (fetch (WEB-CHARSET-METRICS :MAX-DESCENT) of CHARSET))
                       (WIDTHS (fetch (WEB-CHARSET-METRICS :XCCS-WIDTHS) of CHARSET)))
                      (CL:FORMAT T "charset family: ~A face: ~A size: ~A charset: ~d~%%" FAMILY FACE
                             SIZE CHARSET-NUM)
                      CHARSET))))

(DEFMACRO \SF (FONT-NAME)
   "Marker for a font name substituting for another"
   FONT-NAME)

(CL:DEFUN \HTML.SVG-STROKE-DASHARRAY (DASHING)
   "Turn an array of dashes (on/off sequences) to an SVG stroke-dasharray attribute"
   [if (NULL DASHING)
       then ""
     else 
          (* ;; 
          "If the DASHING list has an odd length, keep SVG from %"reflecting%" it by appending a 0")

          [if (ODDP (LENGTH DASHING))
              then (SETQ DASHING (APPEND DASHING (LIST 0]
          (CL:FORMAT NIL " stroke-dasharray='~A'"
                 (CONCATLIST (for SENSOR on DASHING as ON-OFF in DASHING
                                collect (if (NOT (NUMBERP ON-OFF))
                                            then (ERROR "Dashes must be numbers" ON-OFF))
                                      (if (CDR SENSOR)
                                          then (CONCAT ON-OFF " ")
                                        else ON-OFF])

(CL:DEFUN \HTML.SVG-BRUSH-WIDTH (BRUSH-SPEC)
   "Convert a brush specification to a width SVG can use"
   (COND
      ((AND (LISTP BRUSH-SPEC)
            (LITATOM (CAR BRUSH-SPEC))
            (NUMBERP (CADR BRUSH-SPEC)))
       (CADR BRUSH-SPEC))
      ((NUMBERP BRUSH-SPEC)
       BRUSH-SPEC)
      (T (ERROR "Not a valid brush:" BRUSH-SPEC))))

(CL:DEFUN \HTML.SVG-BRUSH-CLASS (BRUSH-SPEC)
   "Convert the brush to a CSS class value."
   (LET [(LINEJOIN-CLASS (COND
                            ((AND (LISTP BRUSH-SPEC)
                                  (LITATOM (CAR BRUSH-SPEC))
                                  (NUMBERP (CADR BRUSH-SPEC)))
                             (SELECTQ (CAR BRUSH-SPEC)
                                 (ROUND "joinr")
                                 (SQUARE "joinm")
                                 "joinm"))
                            (T "joinm")))
         (LINECAP-CLASS (COND
                           ((AND (LISTP BRUSH-SPEC)
                                 (LITATOM (CAR BRUSH-SPEC))
                                 (NUMBERP (CADR BRUSH-SPEC)))
                            (SELECTQ (CAR BRUSH-SPEC)
                                (ROUND "capr")
                                (SQUARE "caps")
                                "capb"))
                           (T "capb"]
        (CONCAT LINEJOIN-CLASS " " LINECAP-CLASS)))

(CL:DEFUN \HTML.SVG-COLOR (COLOR)
   "Given a Medley color, convert it to an RGB value for SVG, #rrggbb."
   (LET ((TRIPLE (INSURE.RGB.COLOR COLOR)))                  (* ; "returns an RGB list")
        (CL:FORMAT NIL "#~2,'0x~2,'0x~2,'0x" (CAR TRIPLE)
               (CADR TRIPLE)
               (CADDR TRIPLE))))

(CL:DEFSTRUCT (HTML.IMAGEDATA (:CONC-NAME \HTML-))
   "Private data for HTMLSTREAMs"
   BACKING-STREAM
   FONT
   CLIPPING-REGION
   (SPACE-FACTOR 1.0)
   IMAGE-OPERATION
   [FG-COLOR (CONSTANT (INSURE.RGB.COLOR 'BLACK]
   [BG-COLOR (CONSTANT (INSURE.RGB.COLOR 'WHITE]
   [SVG-FG-COLOR (CONSTANT (\HTML.SVG-COLOR 'BLACK]          (* ; "stored as %"#rrggbb%"")
   [SVG-BG-COLOR (CONSTANT (\HTML.SVG-COLOR 'WHITE]          (* ; "stored as %"#rrggbb%"")
   (SCALE *CENTIPOINTS-PER-POINT*)
   (PAGE-NUM 0)
   (X-POSITION 0)
   (Y-POSITION 0)
   (LEFT-MARGIN 0)
   (TOP-MARGIN 1024)
   (RIGHT-MARGIN 1024)
   (BOTTOM-MARGIN 0)
   (LINEFEED 12)
   (STATE HTML.STATE.BETWEEN-PAGES)
   PAGE-HEIGHT PAGE-WIDTH TITLE)

(CL:DEFSTRUCT (HTML.FONTINFO (:CONC-NAME \HTMLFONT-))
   "Private data for an HTML FONTDESCRIPTOR"
   (CHARSETS NIL)
   (CSS-CLASS NIL)
   (SLUG-WIDTH NIL)
   (WARNED-CHARSETS NIL))

(DEFMACRO with-htmldata ((DATA-VAR-NAME STREAM)
                         &BODY
                         (BODY DECLS ENV))
   `(LET [(,DATA-VAR-NAME (fetch (STREAM IMAGEDATA) of ,STREAM]
         ,@DECLS
         ,@BODY))

(CL:DEFUN HTML.OUTPUT-GRAPHICS (STREAM)
   "We're going to do some graphics now"
   (with-htmldata (DATA STREAM)
          (\HTML.MAYBE-START-PAGE DATA STREAM)
          (SELECTC (\HTML-STATE DATA)
              (HTML.STATE.NON-TEXT-OUTPUT                    (* ; "this is the state we need")
                   )
              (HTML.STATE.TEXT-OUTPUT                        (* ; "end the text section")
                   (CL:FORMAT (\HTML-BACKING-STREAM DATA)
                          "</text>~%%"))
              NIL)

          (* ;; "finally")

          (CL:SETF (\HTML-STATE DATA)
                 HTML.STATE.NON-TEXT-OUTPUT)))

(CL:DEFUN HTML.OUTPUT-TEXT (STREAM)
   "We're being asked to write text"
   (with-htmldata (DATA STREAM)
          (\HTML.MAYBE-START-PAGE DATA STREAM)
          (LET* ((FONT (\HTML-FONT DATA))
                 (FONT-DATA (fetch (FONTDESCRIPTOR OTHERDEVICEFONTPROPS) of FONT)))
                (SELECTC (\HTML-STATE DATA)
                    ((LIST HTML.STATE.NON-TEXT-OUTPUT HTML.STATE.BETWEEN-PAGES) 
                                                             (* ; "start a new text section")
                         (CL:FORMAT (\HTML-BACKING-STREAM DATA)
                                "<text class='~a' fill='~a' x='~d' y='~d'>"
                                (\HTMLFONT-CSS-CLASS FONT-DATA)
                                (\HTML-SVG-FG-COLOR DATA)
                                (\HTML-X-POSITION DATA)
                                (\HTML.SVG-Y DATA (\HTML-Y-POSITION DATA))))
                    (HTML.STATE.TEXT-OUTPUT                  (* ; "continue this text section")
                         )
                    NIL)

                (* ;; "finally")

                (CL:SETF (\HTML-STATE DATA)
                       HTML.STATE.TEXT-OUTPUT))))

(CL:DEFUN \HTML.MAYBE-START-PAGE (DATA STREAM)

   (* ;; "We're going to do output of some sort, so start an SVG stanza if necessary")

   [with-htmldata (DATA STREAM)
          (if (EQ (\HTML-STATE DATA)
                  HTML.STATE.BETWEEN-PAGES)
              then (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
                        (CL:FORMAT BACKING 
                               "<svg width=%"~dpt%" height=%"~dpt%" viewBox=%"~d ~d ~d ~d%">~%%"
                               (CP-TO-P (\HTML-PAGE-WIDTH DATA))
                               (CP-TO-P (\HTML-PAGE-HEIGHT DATA))
                               0 0 (\HTML-PAGE-WIDTH DATA)
                               (\HTML-PAGE-HEIGHT DATA))
                        [CL:SETF (\HTML-TOP-MARGIN DATA)
                               (- (\HTML-PAGE-HEIGHT DATA)
                                  (FONTPROP (\HTML-FONT DATA)
                                         'HEIGHT]
                        (CL:SETF (\HTML-X-POSITION DATA)
                               (\HTML-LEFT-MARGIN DATA))
                        (CL:SETF (\HTML-Y-POSITION DATA)
                               (\HTML-TOP-MARGIN DATA])

(CL:DEFUN \HTML.END-PAGE (DATA STREAM)
   "End the current page"
   (if (EQ (\HTML-STATE DATA)
           HTML.STATE.TEXT-OUTPUT)
       then (HTML.OUTPUT-GRAPHICS STREAM))
   (CL:INCF (\HTML-PAGE-NUM DATA))
   (HTML.RESET STREAM)
   (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
        (CL:FORMAT BACKING "</svg>~%%"))
   (CL:SETF (\HTML-STATE DATA)
          HTML.STATE.BETWEEN-PAGES))

(CL:DEFUN HTML.WRITE-PREFACE (STREAM)
   "Write the preamble to the file: <html><head>... etc."
   (with-htmldata
    (DATA STREAM)
    (LET ((BACKING (\HTML-BACKING-STREAM DATA))
          (TITLE (\HTML-TITLE DATA)))
         (CL:FLET ((FONT-DEF (VAR-NAME FAMILY)
                          (CL:FORMAT BACKING "    const ~a = [" VAR-NAME)
                          [LET ((FAMILY-MEMBERS (LISTGET *HTML-STYLESHEET-FONT-FAMILY-DEFS* FAMILY)))
                               (for FONT in FAMILY-MEMBERS as TAIL on FAMILY-MEMBERS
                                  do (if (CDR TAIL)
                                         then (CL:FORMAT BACKING "%"~a%"," FONT)
                                       else (CL:FORMAT BACKING "%"~a%"" FONT]
                          (CL:FORMAT BACKING "].map(singleQuote).join(%",%");~%%")))
                (CL:FORMAT BACKING "<!DOCTYPE HTML>~%%")
                (CL:FORMAT BACKING "<html>~%%")
                (CL:FORMAT BACKING "<head>~%%")
                (CL:FORMAT BACKING "<title>~a</title>~%%" (HTML-ENCODE TITLE))
                (CL:FORMAT BACKING 
                       "<link rel=%"preconnect%" href=%"https://fonts.googleapis.com%">~%%")
                (CL:FORMAT BACKING 
                       "<link rel=%"preconnect%" href=%"https://fonts.gstatic.com%" crossorigin>~%%")
                [for FAMILY in *HTML-STANDARD-PAGE-WEB-FONT-FAMILIES*
                   do (CL:FORMAT BACKING "<link rel=%"stylesheet%" href=%"~a%">~%%"
                             (\HTML.MAKE-STYLESHEET-URL (LISTGET *HTML-STYLESHEET-FONT-FAMILY-DEFS* 
                                                               FAMILY]
                (CL:FORMAT BACKING "<script>~%%")
                (CL:FORMAT BACKING "function singleQuote(fn) { return %"'%" + fn + %"'%"; }~%%")
                (FONT-DEF "notoSans" 'NOTO-SANS)
                (FONT-DEF "notoSansMono" 'NOTO-SANS-MONO)
                (FONT-DEF "notoSansDisplay" 'NOTO-SANS-DISPLAY)
                (FONT-DEF "notoSerif" 'NOTO-SERIF)
                (CL:FORMAT BACKING "    const sizes = [")
                (for SIZE in *WEB-FONT-SIZES* do (CL:FORMAT BACKING "~d, " SIZE))
                (CL:FORMAT BACKING "];~%%")
                (CL:FORMAT BACKING 
                      "    const families = [notoSans, notoSansMono, notoSansDisplay, notoSerif];~%%"
                       )
                (CL:FORMAT BACKING "    const fontLoadPromises = [];~%%")
                (CL:FORMAT BACKING "    for (const family of families) {~%%")
                (CL:FORMAT BACKING "        for (const size of sizes) {~%%")
                (CL:FORMAT BACKING 
                    "            fontLoadPromises.push(document.fonts.load(size+%"pt %"+family));~%%"
                       )
                (CL:FORMAT BACKING "        }~%%")
                (CL:FORMAT BACKING "    }~%%")
                (CL:FORMAT BACKING 
               "    Promise.all(fontLoadPromises).then(_ => { console.log('All fonts loaded');});~%%"
                       )
                (CL:FORMAT BACKING "</script>~%%")

                (* ;; "define styles")

                (CL:FORMAT BACKING "<style>~%%")

                (* ;; "all space chars in text blocks are significant:")

                (CL:FORMAT BACKING "text { white-space: pre; }~%%")

                (* ;; 
 "the page is scaled to use centipoints, so font sizes below are measured in centipoints, not points")

                (* ;; "define font families as CSS classes")

                (for FONT-FAMILY in *HTML-STANDARD-PAGE-WEB-FONT-FAMILIES*
                   do (CL:FORMAT BACKING ".~A { font-family: " (CDR (FASSOC FONT-FAMILY 
                                                                           *WEB-FONT-FAMILIES*)))
                      [LET ((FONTS (LISTGET *HTML-STYLESHEET-FONT-FAMILY-DEFS* FONT-FAMILY)))
                           (for FONT in FONTS as TAIL on FONTS
                              do (if (CDR TAIL)
                                     then (CL:FORMAT BACKING "'~a', " FONT)
                                   else (CL:FORMAT BACKING "'~a', ~a" FONT (CDR (FASSOC FONT-FAMILY 
                                                                                  *BROWSER-FONTS-MAP*
                                                                                       ]
                      (CL:FORMAT BACKING "; }~%%"))

                (* ;; "define font sizes as CSS classes")

                [for SIZE in *WEB-FONT-SIZES* do (CL:FORMAT BACKING ".sz~d { font-size: ~dpt; }~%%" 
                                                        SIZE (FIXR (P-TO-CP SIZE]

                (* ;; "define faces as CSS classes")

                (CL:FORMAT BACKING ".bold { font-weight: bold; }~%%")
                (CL:FORMAT BACKING ".italic { font-style: italic; }~%%")

                (* ;; "define stroke-linejoin and stroke-linecap CSS classes")

                (* ;; "linecaps")

                (CL:FORMAT BACKING ".capb { stroke-linecap: butt; }~%%")
                (CL:FORMAT BACKING ".capr { stroke-linecap: round; }~%%")
                (CL:FORMAT BACKING ".caps { stroke-linecap: square; }~%%")

                (* ;; "linejoins")

                (CL:FORMAT BACKING ".joinm { stroke-linejoin: miter; }~%%")
                (CL:FORMAT BACKING ".joinr { stroke-linejoin: round; }~%%")
                (CL:FORMAT BACKING ".joinb { stroke-linejoin: bevel; }~%%")

                (* ;; "end of the style definitions")

                (CL:FORMAT BACKING "</style>~%%")
                (CL:FORMAT BACKING "</head>~%%")
                (CL:FORMAT BACKING "<body style='background-color: ~a;'>~%%" (\HTML-SVG-BG-COLOR
                                                                              DATA)))
         BACKING)))

(CL:DEFUN CONVERT-FAMILY-TO-QUERY-PARAM (FONT-FAMILY-NAME INITIAL-PARAM?)
   "Convert a font family name like 'Noto Sans' to a URL query param like '&family=Noto+Sans'"
   (CL:FLET ((REPLACE-SPACES (STR)
                    (LET* ((STR-LENGTH (CL:LENGTH STR))
                           (NEW-STR (CL:MAKE-STRING STR-LENGTH)))
                          [for I from 0 to (CL:1- STR-LENGTH)
                             do (LET ((CH (CL:CHAR STR I)))
                                     (CL:SETF (CL:CHAR NEW-STR I)
                                            (if (EQP CH #\Space)
                                                then #\+
                                              else (CL:CHAR STR I]
                          NEW-STR)))
          (CONCAT (if INITIAL-PARAM?
                      then "?"
                    else "&")
                 "family="
                 (REPLACE-SPACES FONT-FAMILY-NAME))))

(CL:DEFUN \HTML.MAKE-STYLESHEET-URL (FONT-FAMILY-NAMES)
   "Return the stylesheet URL for downloading the given font family names from Google Fonts"
   [LET [(FULL-URL (CONCAT *GOOGLE-FONTS-BASE-URL* (CONVERT-FAMILY-TO-QUERY-PARAM (CAR 
                                                                                    FONT-FAMILY-NAMES
                                                                                       )
                                                          T]
        (CONCAT FULL-URL (APPLY* #'CONCATLIST (MAPCAR (CDR FONT-FAMILY-NAMES)
                                                     #'CONVERT-FAMILY-TO-QUERY-PARAM])

(CL:DEFUN OPENHTMLSTREAM (FILENAME &OPTIONAL OPTIONS)
   "Open and return an HTML imagestream"
   (LET* ((TITLE (OR (LISTGET OPTIONS 'TITLE)
                     FILENAME))
          (REGION (OR (LISTGET OPTIONS 'REGION)
                      *HTML.DEFAULT-PAGE-SIZE*))
          [BG-COLOR (OR (LISTGET OPTIONS 'BG-COLOR)
                        (CONSTANT (INSURE.RGB.COLOR 'WHITE]
          [BACKING (OPENSTREAM FILENAME 'OUTPUT NIL '((FORMAT :UTF-8-SLUG]
          (IMAGEOPS (create IMAGEOPS))
          (IMAGEDATA (MAKE-HTML.IMAGEDATA :BACKING-STREAM BACKING :TITLE TITLE :PAGE-WIDTH
                            (CAR REGION)
                            :PAGE-HEIGHT
                            (CDR REGION)
                            :BG-COLOR BG-COLOR :SVG-BG-COLOR (\HTML.SVG-COLOR BG-COLOR)))
          (HTMLSTREAM (create STREAM
                             FULLFILENAME _ (FULLNAME BACKING)
                             DEVICE _ \HTMLSTREAM.FDEV
                             ACCESS _ 'OUTPUT
                             OUTCHARFN _ #'HTML.OUTCHARFN
                             STRMBOUTFN _ #'\BUFFERED.BOUT   (* ; "is this right?")
                             IMAGEOPS _ IMAGEOPS
                             USERCLOSEABLE _ T
                             USERVISIBLE _ T
                             IMAGEDATA _ IMAGEDATA)))

         (* ;; "Make the backing file invisible")

         (replace (STREAM USERVISIBLE) of BACKING with NIL)

         (* ;; "install our OUTCHARFN. you can't do this in the create.")

         (replace (STREAM OUTCHARFN) of HTMLSTREAM with #'HTML.OUTCHARFN)

         (* ;; "replace (do not smash!) the stream's IMAGEOPS with ours")

         (replace IMAGEOPS of HTMLSTREAM with IMAGEOPS)

         (* ;; "Set the informational fields")

         (replace IMFONTCREATE of IMAGEOPS with HTML.FONTCREATE.DEVICENAME)
         (replace IMAGETYPE of IMAGEOPS with HTML.IMAGETYPE)

         (* ;; "Set the functions")

         (replace IMCLOSEFN of IMAGEOPS with #'HTML.CLOSEFN)
         (replace IMDRAWLINE of IMAGEOPS with #'HTML.DRAWLINE)
         (replace IMDRAWCURVE of IMAGEOPS with #'HTML.DRAWCURVE)
         (replace IMDRAWCIRCLE of IMAGEOPS with #'HTML.DRAWCIRCLE)
         (replace IMDRAWELLIPSE of IMAGEOPS with #'HTML.DRAWELLIPSE)
         (replace IMFILLPOLYGON of IMAGEOPS with #'HTML.FILLPOLYGON)
         (replace IMDRAWPOLYGON of IMAGEOPS with #'HTML.DRAWPOLYGON)
         (replace IMFILLCIRCLE of IMAGEOPS with #'HTML.FILLCIRCLE)
         (replace IMBLTSHADE of IMAGEOPS with #'HTML.BLTSHADE)
         (replace IMBITBLT of IMAGEOPS with #'HTML.BITBLT)
         (replace IMSCALEDBITBLT of IMAGEOPS with #'HTML.SCALEDBITBLT)
         (replace IMMOVETO of IMAGEOPS with #'HTML.MOVETO)
         (replace IMCHARWIDTH of IMAGEOPS with #'HTML.CHARWIDTH)
         (replace IMNEWPAGE of IMAGEOPS with #'HTML.NEWPAGE)
         (replace IMTERPRI of IMAGEOPS with #'HTML.TERPRI)
         (replace IMRESET of IMAGEOPS with #'HTML.RESET)
         (replace IMCLIPPINGREGION of IMAGEOPS with #'HTML.CLIPPINGREGION)
         (replace IMXPOSITION of IMAGEOPS with #'HTML.XPOSITION)
         (replace IMYPOSITION of IMAGEOPS with #'HTML.YPOSITION)
         (replace IMFONT of IMAGEOPS with #'HTML.FONT)
         (replace IMLEFTMARGIN of IMAGEOPS with #'HTML.LEFTMARGIN)
         (replace IMRIGHTMARGIN of IMAGEOPS with #'HTML.RIGHTMARGIN)
         (replace IMTOPMARGIN of IMAGEOPS with #'HTML.TOPMARGIN)
         (replace IMBOTTOMMARGIN of IMAGEOPS with #'HTML.BOTTOMMARGIN)
         (replace IMLINEFEED of IMAGEOPS with #'HTML.LINEFEED)
         (replace IMSCALE of IMAGEOPS with #'HTML.SCALE)
         (replace IMSPACEFACTOR of IMAGEOPS with #'HTML.SPACEFACTOR)
         (replace IMOPERATION of IMAGEOPS with #'HTML.OPERATION)
         (replace IMBACKCOLOR of IMAGEOPS with #'HTML.BACKCOLOR)
         (replace IMCOLOR of IMAGEOPS with #'HTML.COLOR)

         (* ;; "Maybe implement these later:")

         (replace IMWRITEPIXEL of IMAGEOPS with #'NILL)
         (replace IMROTATE of IMAGEOPS with #'NILL)
         (replace IMDRAWARC of IMAGEOPS with #'NILL)
         (replace IMTRANSLATE of IMAGEOPS with #'NILL)
         (replace IMSCALE2 of IMAGEOPS with #'NILL)
         (replace IMPUSHSTATE of IMAGEOPS with #'NILL)
         (replace IMPOPSTATE of IMAGEOPS with #'NILL)
         (replace IMDEFAULTSTATE of IMAGEOPS with #'NILL)
         (replace IMCHARWIDTHY of IMAGEOPS with #'NILL)
         (replace IMBITMAPSIZE of IMAGEOPS with #'NILL)

         (* ;; "we can init the font now that the IMAGEOPS are complete")

         (LET* [(USER-FONT (LISTGET OPTIONS 'FONT))
                (DEFAULTFONT (if USER-FONT
                                 then (\COERCEFONTDESC USER-FONT HTMLSTREAM)
                               else (FONTCREATE 'NOTO-SANS 10 'MRR 0 'HTML]

               (* ;; "Finish initializing the IMAGEDATA")

               (\HTML.INIT-IMAGEDATA HTMLSTREAM DEFAULTFONT)

               (* ;; "write the preface")

               (HTML.WRITE-PREFACE HTMLSTREAM)

               (* ;; "return the stream")

               HTMLSTREAM)))

(CL:DEFUN HTML.BACKCOLOR (STREAM NEW-COLOR)
   "Set the bg color. Generate the SVG color and set it into the imagedata."
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-BG-COLOR DATA)))
               [COND
                  ((AND NEW-COLOR (INSURE.RGB.COLOR NEW-COLOR))
                   (CL:SETF (\HTML-BG-COLOR DATA)
                          NEW-COLOR)
                   (CL:SETF (\HTML-SVG-BG-COLOR DATA)
                          (\HTML.SVG-COLOR NEW-COLOR]
               OLD-VALUE)))

(CL:DEFUN HTML.BITBLT (SOURCEBITMAP SOURCELEFT SOURCEBOTTOM STREAM DESTINATIONLEFT DESTINATIONBOTTOM
                             WIDTH HEIGHT SOURCETYPE OPERATION TEXTURE CLIPPINGREGION 
                             CLIPPEDSOURCELEFT CLIPPEDSOURCEBOTTOM)

   (* ;; "blt the image expanded by a scale factor of 1")

   (HTML.SCALEDBITBLT SOURCEBITMAP SOURCELEFT SOURCEBOTTOM STREAM DESTINATIONLEFT DESTINATIONBOTTOM 
          WIDTH HEIGHT SOURCETYPE OPERATION TEXTURE CLIPPINGREGION CLIPPEDSOURCELEFT 
          CLIPPEDSOURCEBOTTOM 1))

(CL:DEFUN HTML.BLTSHADE (TEXTURE STREAM DESTINATIONLEFT DESTINATIONBOTTOM WIDTH HEIGHT OPERATION 
                               CLIPPINGREGION)

   (* ;; "NOTE we ignore OPERATION")

   (* ;; "in our monochrome graphics world, SHADEs are 4x4 TEXTUREs.  Let's interpret the texture as a shade, meaning a gray value")

   (* ;; "because we're dealing with 24-bit color, we can only represent 256 gray shades")

   [LET* [(BLACK-BITS (CL:LOGCOUNT TEXTURE))
          (BLACK-PROPORTION (/ BLACK-BITS 16))
          (GRAY-VALUE (FIXR (TIMES BLACK-PROPORTION 255]
         (with-htmldata (DATA STREAM)

                (* ;; "clip region against CLIPPINGREGION")

                (LET* [(BACKING (\HTML-BACKING-STREAM DATA))
                       (ORIGINAL-REGION (CREATE REGION
                                               LEFT _ DESTINATIONLEFT
                                               BOTTOM _ DESTINATIONBOTTOM
                                               WIDTH _ WIDTH
                                               HEIGHT _ HEIGHT))
                       (EFFECTIVE-REGION (INTERSECTREGIONS ORIGINAL-REGION (CL:IF CLIPPINGREGION
                                                                               CLIPPINGREGION
                                                                               ORIGINAL-REGION)]
                      (HTML.OUTPUT-GRAPHICS STREAM)
                      (CL:FORMAT BACKING 
           "<rect x='~d' y='~d' width='~d' height='~d' stroke='none' fill='#~2,'0x~2,'0x~2,'0x'/>~%%"
                             (FETCH (REGION LEFT) OF EFFECTIVE-REGION)
                             (\HTML.SVG-Y DATA (FETCH (REGION BOTTOM) OF EFFECTIVE-REGION))
                             (FETCH (REGION WIDTH) OF EFFECTIVE-REGION)
                             (FETCH (REGION HEIGHT) OF EFFECTIVE-REGION)
                             GRAY-VALUE GRAY-VALUE GRAY-VALUE])

(CL:DEFUN HTML.BOTTOMMARGIN (STREAM NEW-BOTTOM-MARGIN)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-BOTTOM-MARGIN DATA)))
               (if NEW-BOTTOM-MARGIN
                   then (CL:SETF (\HTML-BOTTOM-MARGIN DATA)
                               NEW-BOTTOM-MARGIN))
               OLD-VALUE)))

(CL:DEFUN HTML.CHARWIDTH (STREAM CHCODE)
   "Character width accessor that obeys space-factors"
   (with-htmldata (DATA STREAM)
          (LET* ((FONT-INFO (fetch (FONTDESCRIPTOR OTHERDEVICEFONTPROPS) of (\HTML-FONT DATA)))
                 (CHAR-WIDTH (if (= CHCODE *XCCS-UNDEFINED-CHARCODE*)
                                 then (\HTMLFONT-SLUG-WIDTH FONT-INFO)
                               else (\FGETCHARWIDTH (\HTML-FONT DATA)
                                           CHCODE)))
                 (SPACE-FACTOR (\HTML-SPACE-FACTOR DATA)))
                (if (AND (= CHCODE (CHARCODE SPACE))
                         (NOT (= SPACE-FACTOR 1.0)))
                    then (FTIMES SPACE-FACTOR CHAR-WIDTH)
                  else CHAR-WIDTH))))

(CL:DEFUN HTML.CLIPPINGREGION (STREAM NEW-REGION)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-CLIPPING-REGION DATA)))
               (COND
                  (NEW-REGION (CL:SETF (\HTML-CLIPPING-REGION DATA)
                                     NEW-REGION)))
               OLD-VALUE)))

(CL:DEFUN HTML.CLOSEFN (STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
               (if (EQ (\HTML-STATE DATA)
                       HTML.STATE.TEXT-OUTPUT)
                   then (HTML.OUTPUT-GRAPHICS STREAM))
               (printout BACKING T "</svg>" T "</body>" T "</html>" T)
               (CLOSEF BACKING)
               (CL:SETF (\HTML-STATE DATA)
                      HTML.STATE.CLOSED))))

(CL:DEFUN HTML.COLOR (STREAM NEW-COLOR)
   "Return and optionally set the color of the stream"
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-FG-COLOR DATA)))
               [COND
                  ((AND NEW-COLOR (INSURE.RGB.COLOR NEW-COLOR))
                   (CL:SETF (\HTML-FG-COLOR DATA)
                          NEW-COLOR)
                   (CL:SETF (\HTML-SVG-FG-COLOR DATA)
                          (\HTML.SVG-COLOR NEW-COLOR]
               OLD-VALUE)))

(CL:DEFUN HTML.DRAWCIRCLE (STREAM CENTERX CENTERY RADIUS BRUSH DASHING)
   "Draw a circle"
   (with-htmldata (DATA STREAM)
          (HTML.OUTPUT-GRAPHICS STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
               (CL:FORMAT BACKING 
  "<circle class='~a' cx='~d' cy='~d' r='~d' fill='transparent' stroke='~a' stroke-width='~d'~A/>~%%"
                      (\HTML.SVG-BRUSH-CLASS BRUSH)
                      CENTERX
                      (\HTML.SVG-Y DATA CENTERY)
                      RADIUS
                      (\HTML-SVG-FG-COLOR DATA)
                      (\HTML.SVG-BRUSH-WIDTH BRUSH)
                      (\HTML.SVG-STROKE-DASHARRAY DASHING)))
          (HTML.MOVETO STREAM CENTERX CENTERY)))

(CL:DEFUN HTML.DRAWCURVE (STREAM KNOTS CLOSED BRUSH DASHING)
   "Interpret the knots as points on a cubic parametric curve, convert to cubic Bezier form, and draw it"
   (with-htmldata (DATA STREAM)
          (HTML.OUTPUT-GRAPHICS STREAM)

          (* ;; "TODO deal with BRUSH, color, and DASHING")

          (LET* ((BACKING (\HTML-BACKING-STREAM DATA))
                 (STROKE-WIDTH (\HTML.SVG-BRUSH-WIDTH BRUSH))
                 (SPLINE (PARAMETRICSPLINE KNOTS CLOSED NIL))
                 (N (fetch (SPLINE %#KNOTS) of SPLINE))
                 (XA (fetch (SPLINE SPLINEX) of SPLINE))
                 (YA (fetch (SPLINE SPLINEY) of SPLINE))
                 (DXA (fetch (SPLINE SPLINEDX) of SPLINE))
                 (DYA (fetch (SPLINE SPLINEDY) of SPLINE))
                 (PREVX (ELT XA 1))
                 (PREVY (ELT YA 1))
                 (PREV-DX3 (FQUOTIENT (ELT DXA 1)
                                  3.0))
                 (PREV-DY3 (FQUOTIENT (ELT DYA 1)
                                  3.0))
                 (PATH (CONCAT "M " PREVX " " (\HTML.SVG-Y DATA PREVY)
                              " "))                          (* ; "start at PREVX, PREVY")
                 )
                (for C from 2 to N do (SETQ PATH (CONCAT PATH "C " (FPLUS PREVX PREV-DX3)
                                                        " "
                                                        (\HTML.SVG-Y DATA (FPLUS PREVY PREV-DY3))
                                                        " "
                                                        (FDIFFERENCE (SETQ PREVX (ELT XA C))
                                                               (SETQ PREV-DX3 (FQUOTIENT (ELT DXA C)
                                                                                     3.0)))
                                                        " "
                                                        [\HTML.SVG-Y DATA
                                                               (FDIFFERENCE (SETQ PREVY
                                                                             (ELT YA C))
                                                                      (SETQ PREV-DY3
                                                                       (FQUOTIENT (ELT DYA C)
                                                                              3.0]
                                                        " " PREVX " " (\HTML.SVG-Y DATA PREVY)
                                                        " ")))
                (CL:FORMAT BACKING 
                       "<path class='~a' fill='none' stroke='black' stroke-width='~d'~A d='~A' />~%%"
                       (\HTML.SVG-BRUSH-CLASS BRUSH)
                       STROKE-WIDTH
                       (\HTML.SVG-STROKE-DASHARRAY DASHING)
                       PATH)
                (HTML.MOVETO STREAM PREVX PREVY)
                NIL)))

(CL:DEFUN HTML.DRAWELLIPSE (STREAM CENTERX CENTERY SEMIMINORRADIUS SEMIMAJORRADIUS ORIENTATION BRUSH
                                  DASHING)
   "Draw an ellipse"
   [with-htmldata (DATA STREAM)
          (HTML.OUTPUT-GRAPHICS STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
               (CL:FORMAT BACKING "<ellipse class='~a' cx=%"~d%" cy=%"~d%" rx=%"~d%" ry=%"~d%" transform=%"rotate(~d,~d,~d)%" fill=%"transparent%" stroke=%"black%"~A stroke-width=%"~d%"/>~%%"
                      (\HTML.SVG-BRUSH-CLASS BRUSH)
                      CENTERX
                      (\HTML.SVG-Y DATA CENTERY)
                      SEMIMAJORRADIUS SEMIMINORRADIUS (- ORIENTATION)
                      CENTERX
                      (\HTML.SVG-Y DATA CENTERY)
                      (\HTML.SVG-STROKE-DASHARRAY DASHING)
                      (\HTML.SVG-BRUSH-WIDTH BRUSH])

(CL:DEFUN HTML.DRAWLINE (STREAM X1 Y1 X2 Y2 WIDTH OPERATION COLOR DASHING)
   "Draw a line"

   (* ;; "TODO implement OPERATION and COLOR")

   (with-htmldata (DATA STREAM)
          (HTML.OUTPUT-GRAPHICS STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
               (CL:FORMAT BACKING 
           "<line class='~a' x1='~d' y1='~d' x2='~d' y2='~d' stroke='black' stroke-width='~d'~A/>~%%"
                      (\HTML.SVG-BRUSH-CLASS NIL)
                      X1
                      (\HTML.SVG-Y DATA Y1)
                      X2
                      (\HTML.SVG-Y DATA Y2)
                      (OR WIDTH (P-TO-CP 1))
                      (\HTML.SVG-STROKE-DASHARRAY DASHING)))
          (HTML.MOVETO STREAM X2 Y2)))

(CL:DEFUN HTML.DRAWPOLYGON (STREAM POINTS CLOSED BRUSH DASHING)
   "Draw an open or closed polygon"
   (HTML.OUTPUT-GRAPHICS STREAM)
   (with-htmldata (DATA STREAM)
          (LET ((WIDTH (\HTML.SVG-BRUSH-WIDTH BRUSH))
                (BACKING (\HTML-BACKING-STREAM DATA))
                (DRAWING-TYPE (if CLOSED
                                  then "polygon"
                                else "polyline")))
               (CL:FORMAT BACKING 
                      "<~a class='~a' fill='none' stroke='black' stroke-width='~d'~A points='" 
                      DRAWING-TYPE (\HTML.SVG-BRUSH-CLASS BRUSH)
                      WIDTH
                      (\HTML.SVG-STROKE-DASHARRAY DASHING))
               [for POINT in POINTS do (CL:FORMAT BACKING "~d,~d " (CAR POINT)
                                              (\HTML.SVG-Y DATA (CDR POINT]
               (CL:FORMAT BACKING "' />~%%"))))

(CL:DEFUN HTML.FILLCIRCLE (STREAM CENTERX CENTERY RADIUS TEXTURE)

   (* ;; "TODO implement TEXTURE")

   (LET ((COLOR-NAME "black"))
        (with-htmldata (DATA STREAM)
               (HTML.OUTPUT-GRAPHICS STREAM)
               (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
                    (CL:FORMAT BACKING 
          "<circle cx=%"~d%" cy=%"~d%" r=%"~d%" fill=%"~a%" stroke=%"black%" stroke-width=%"1%"/>~%%"
                           CENTERX (\HTML.SVG-Y DATA CENTERY)
                           RADIUS COLOR-NAME))
               (HTML.MOVETO STREAM CENTERX CENTERY))))

(CL:DEFUN HTML.FILLPOLYGON (STREAM POINTS TEXTURE OPERATION WINDING-NUMBER)
   "Fill a closed polygon"

   (* ;; "TODO implement TEXTURE, OPERATION")

   (HTML.OUTPUT-GRAPHICS STREAM)
   (with-htmldata (DATA STREAM)
          (LET [(BACKING (\HTML-BACKING-STREAM DATA))
                (FILL-RULE (COND
                              ((ZEROP WINDING-NUMBER)
                               "nonzero")
                              (T "evenodd"]
               (CL:FORMAT BACKING 
                      "<polygon fill='black' fill-rule='~A' stroke='black' stroke-width='1' points='"
                      FILL-RULE)
               [for POINT in POINTS do (CL:FORMAT BACKING "~d,~d " (CAR POINT)
                                              (\HTML.SVG-Y DATA (CDR POINT]
               (CL:FORMAT BACKING "'/>~%%"))))

(CL:DEFUN HTML.FONT (STREAM NEW-FONT)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-FONT DATA)))
               (COND
                  (NEW-FONT                                  (* ; 
  "NEW-FONT might be a FONTDESCRIPTOR or a list of properties to apply to the current FONTDESCRIPTOR")
                         (SETQ NEW-FONT (OR (\COERCEFONTDESC NEW-FONT STREAM T)
                                            [FONTCOPY OLD-VALUE `(NOERROR T ,@NEW-FONT]
                                            (ERROR "Font not found or illegal parameter")))
                         (CL:SETF (\HTML-FONT DATA)
                                NEW-FONT)
                         (CL:SETF (\HTML-LINEFEED DATA)
                                (FONTPROP NEW-FONT 'HEIGHT))
                         (HTML.OUTPUT-GRAPHICS STREAM)))
               OLD-VALUE)))

(CL:DEFUN HTML.LEFTMARGIN (STREAM NEW-LEFT-MARGIN)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-LEFT-MARGIN DATA)))
               (COND
                  (NEW-LEFT-MARGIN (CL:SETF (\HTML-LEFT-MARGIN DATA)
                                          NEW-LEFT-MARGIN)))
               OLD-VALUE)))

(CL:DEFUN HTML.LINEFEED (STREAM NEW-DELTA)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-LINEFEED DATA)))
               (COND
                  (NEW-DELTA (CL:SETF (\HTML-LINEFEED DATA)
                                    NEW-DELTA)))
               OLD-VALUE)))

(CL:DEFUN HTML.MOVETO (STREAM X Y)
   "Move to X, Y"
   (HTML.OUTPUT-GRAPHICS STREAM)
   (with-htmldata (DATA STREAM)
          (CL:SETF (\HTML-X-POSITION DATA)
                 X)
          (CL:SETF (\HTML-Y-POSITION DATA)
                 Y)))

(CL:DEFUN HTML.NEWPAGE (STREAM)
   (with-htmldata (DATA STREAM)
          (\HTML.END-PAGE DATA STREAM)))

(CL:DEFUN HTML.OPERATION (STREAM NEW-OPERATION)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-IMAGE-OPERATION DATA)))
               (COND
                  (NEW-OPERATION (CL:SETF (\HTML-IMAGE-OPERATION DATA)
                                        NEW-OPERATION)))
               OLD-VALUE)))

(CL:DEFUN HTML.OUTCHARFN (STREAM CHCODE)
   "Write a character, which may cause us to write other markup first"
   [with-htmldata (DATA STREAM)
          (LET [(BACKING (\HTML-BACKING-STREAM DATA))
                (FONT-INFO (fetch (FONTDESCRIPTOR OTHERDEVICEFONTPROPS) of (\HTML-FONT DATA]

               (* ;; "if the char is unmapped, write *XCCS-UNDEFINED-CHARCODE*")

               (if (NOT (XTOUCODE? CHCODE))
                   then (SETQ CHCODE *XCCS-UNDEFINED-CHARCODE*)
                        [LET* ((CHAR-WIDTH (\HTMLFONT-SLUG-WIDTH FONT-INFO))
                               (NEW-X-POSITION (+ (\HTML-X-POSITION DATA)
                                                  CHAR-WIDTH)))
                              (CL:FLET ((SLUG-OUT NIL (HTML.OUTPUT-TEXT STREAM)
                                               (\OUTCHAR BACKING CHCODE)))
                                     (if (> NEW-X-POSITION (\HTML-RIGHT-MARGIN DATA))
                                         then (HTML.TERPRI STREAM)
                                              (SLUG-OUT)
                                              (CL:INCF (\HTML-X-POSITION DATA)
                                                     CHAR-WIDTH)
                                       else (SLUG-OUT)
                                            (CL:SETF (\HTML-X-POSITION DATA)
                                                   NEW-X-POSITION]
                 else 
                      (* ;; "Otherwise do the normal stuff")

                      (LET ((CHARSET (\CHARSET CHCODE))
                            (CHAR8CODE (\CHAR8CODE CHCODE)))
                           (SELECTC CHCODE
                               ((CHARCODE ^J)                (* ; "handle LF")
                                    (HTML.TERPRI STREAM))
                               ((CHARCODE ^M)                (* ; "handle CR")
                                    (HTML.TERPRI STREAM))
                               ((CHARCODE ^L)                (* ; "handle pagefeed")
                                    (HTML.NEWPAGE STREAM))
                               (LET* ((CHAR-WIDTH (HTML.CHARWIDTH STREAM CHCODE))
                                      (NEW-X-POSITION (+ (\HTML-X-POSITION DATA)
                                                         CHAR-WIDTH)))
                                     (CL:FLET [(OUT NIL (HTML.OUTPUT-TEXT STREAM)

                                                    (* ;; 
                                                  "probably no need to encode >, but just in case...")

                                                    (SELECTC CHCODE
                                                        ((CHARCODE &) 
                                                             (CL:FORMAT BACKING "&amp;"))
                                                        ((CHARCODE <) 
                                                             (CL:FORMAT BACKING "&lt;"))
                                                        ((CHARCODE >) 
                                                             (CL:FORMAT BACKING "&gt;"))
                                                        (\OUTCHAR BACKING CHCODE]
                                            (if (> NEW-X-POSITION (\HTML-RIGHT-MARGIN DATA))
                                                then (HTML.TERPRI STREAM)
                                                     (OUT)
                                                     (CL:INCF (\HTML-X-POSITION DATA)
                                                            CHAR-WIDTH)
                                              else (OUT)
                                                   (CL:SETF (\HTML-X-POSITION DATA)
                                                          NEW-X-POSITION])

(CL:DEFUN HTML.RESET (STREAM)
   (with-htmldata (DATA STREAM)
          (CL:SETF (\HTML-X-POSITION DATA)
                 (\HTML-LEFT-MARGIN DATA))
          (CL:SETF (\HTML-Y-POSITION DATA)
                 (\HTML-TOP-MARGIN DATA))
          (CL:SETF (\HTML-STATE DATA)
                 HTML.STATE.NON-TEXT-OUTPUT)))

(CL:DEFUN HTML.RIGHTMARGIN (STREAM NEW-RIGHT-MARGIN)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-RIGHT-MARGIN DATA)))
               (COND
                  (NEW-RIGHT-MARGIN (CL:SETF (\HTML-RIGHT-MARGIN DATA)
                                           NEW-RIGHT-MARGIN)))
               OLD-VALUE)))

(CL:DEFUN HTML.SCALE (STREAM NEW-SCALE)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-SCALE DATA)))
               [COND
                  (NEW-SCALE (printout T "Warning: DSPSCALE argument is ignored")
                         (DO-NOT (CL:SETF (\HTML-SCALE DATA)
                                        NEW-SCALE]
               OLD-VALUE)))

(CL:DEFUN HTML.SCALEDBITBLT (SOURCEBITMAP SOURCELEFT SOURCEBOTTOM STREAM DESTINATIONLEFT 
                                   DESTINATIONBOTTOM WIDTH HEIGHT SOURCETYPE OPERATION TEXTURE 
                                   CLIPPINGREGION CLIPPEDSOURCELEFT CLIPPEDSOURCEBOTTOM SCALE)

   (* ;; 
   "just like bitblt, but scale the image by SCALE. this is called by HTML.BITBLT with SCALE = 1")

   (with-htmldata (DATA STREAM)
          (HTML.OUTPUT-GRAPHICS STREAM)
          (LET [(BACKING (\HTML-BACKING-STREAM DATA))
                (NEW-WIDTH (ITIMES SCALE (- WIDTH SOURCELEFT)))
                (NEW-HEIGHT (ITIMES SCALE (- HEIGHT SOURCEBOTTOM]
               (CL:FORMAT BACKING 
                  "<image width=%"~d%" height=%"~d%" x=%"~d%" y=%"~d%" href=%"data:image/png;base64,"
                      (P-TO-CP NEW-WIDTH)
                      (P-TO-CP NEW-HEIGHT)
                      DESTINATIONLEFT DESTINATIONBOTTOM)
               (WRITE-BASE64-PNG BACKING SOURCEBITMAP SOURCELEFT SOURCEBOTTOM WIDTH HEIGHT)
               (CL:FORMAT BACKING "%"/>~%%"))))

(CL:DEFUN HTML.SPACEFACTOR (STREAM NEW-FACTOR)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-SPACE-FACTOR DATA)))
               (COND
                  (NEW-FACTOR (CL:SETF (\HTML-SPACE-FACTOR DATA)
                                     NEW-FACTOR)))
               OLD-VALUE)))

(CL:DEFUN HTML.TERPRI (STREAM)
   "Do a newline"
   [with-htmldata (DATA STREAM)
          (LET ((BACKING (\HTML-BACKING-STREAM DATA)))
               (CL:SETF (\HTML-X-POSITION DATA)
                      (\HTML-LEFT-MARGIN DATA))
               (CL:DECF (\HTML-Y-POSITION DATA)
                      (\HTML-LINEFEED DATA))

               (* ;; "if Y-POSITION overflowed BOTTOM-MARGIN, start a new page")

               (if (< (\HTML-Y-POSITION DATA)
                      (\HTML-BOTTOM-MARGIN DATA))
                   then (\HTML.END-PAGE DATA STREAM)
                 else (HTML.OUTPUT-GRAPHICS STREAM])

(CL:DEFUN HTML.TOPMARGIN (STREAM NEW-TOP-MARGIN)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-TOP-MARGIN DATA)))
               (COND
                  (NEW-TOP-MARGIN (CL:SETF (\HTML-TOP-MARGIN DATA)
                                         NEW-TOP-MARGIN)))
               OLD-VALUE)))

(CL:DEFUN HTML.XPOSITION (STREAM NEW-X-POSITION)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-X-POSITION DATA)))
               (COND
                  (NEW-X-POSITION (CL:SETF (\HTML-X-POSITION DATA)
                                         NEW-X-POSITION)))
               OLD-VALUE)))

(CL:DEFUN HTML.YPOSITION (STREAM NEW-Y-POSITION)
   (with-htmldata (DATA STREAM)
          (LET ((OLD-VALUE (\HTML-Y-POSITION DATA)))
               (COND
                  (NEW-Y-POSITION (CL:SETF (\HTML-Y-POSITION DATA)
                                         NEW-Y-POSITION)))
               OLD-VALUE)))

(CL:DEFUN MAKE-HTML-IMAGETYPE ()
   "Return the IMAGETYPE descriptor for HTML streams."
   `((OPENSTREAM OPENHTMLSTREAM)
     (FONTCREATE \HTML.FONTCREATE)
     (FONTSAVAILABLE \HTML.FONTSAVAILABLE)
     (CREATECHARSET \HTML.CREATECHARSET)))

(CL:DEFUN \HTML.INIT-IMAGEDATA (HTMLSTREAM FONT BG-COLOR)
   "Finish initializing the stream's IMAGEDATA"
   (with-htmldata (DATA HTMLSTREAM)

          (* ;; "set the font and linefeed delta")

          (CL:SETF (\HTML-FONT DATA)
                 FONT)
          (CL:SETF (\HTML-LINEFEED DATA)
                 (FONTPROP FONT 'HEIGHT))

          (* ;; "set the margins")

          (CL:SETF (\HTML-LEFT-MARGIN DATA)
                 0)
          (CL:SETF (\HTML-RIGHT-MARGIN DATA)
                 (\HTML-PAGE-WIDTH DATA))
          [CL:SETF (\HTML-TOP-MARGIN DATA)
                 (- (\HTML-PAGE-HEIGHT DATA)
                    (FONTPROP FONT 'HEIGHT]
          (CL:SETF (\HTML-BOTTOM-MARGIN DATA)
                 0)
          (CL:SETF (\HTML-Y-POSITION DATA)
                 (\HTML-TOP-MARGIN DATA))))

(CL:DEFUN \HTMLSTREAM.INIT ()

   (* ;; "Initialize the HTMLSTREAM world")

   (DECLARE (GLOBALVARS \HTMLSTREAM.FDEV IMAGESTREAMTYPES *DEFAULT-EXTERNALFORMAT*))
   (SETQ \HTMLSTREAM.FDEV (create FDEV
                                 DEVICENAME _ (LIST 'HTML 'DOCUMENT)
                                 CLOSEFILE _ #'NILL
                                 BOUT _ #'NILL))

   (* ;; "update IMAGESTREAMTYPES")

   (PUTASSOC HTML.FONTCREATE.DEVICENAME (MAKE-HTML-IMAGETYPE)
          IMAGESTREAMTYPES)

   (* ;; "set the default font")

   (DEFAULTFONT 'HTML '(NOTO-SANS 10 MRR)))

(CL:DEFUN WRITE-BASE64-PNG (STREAM BITMAP SOURCELEFT SOURCEBOTTOM WIDTH HEIGHT)
   "Write a BASE64-encoded PNG rendition of the bitmap, clipped as directed"
   (LET [(NEW-BITMAP (BITMAPCREATE (- WIDTH SOURCELEFT)
                            (- HEIGHT SOURCEBOTTOM]
        (BITBLT BITMAP SOURCELEFT SOURCEBOTTOM NEW-BITMAP 0 0 WIDTH HEIGHT)
        (CONVERT-TO-PNG-BASE64 NEW-BITMAP STREAM)))

(CL:DEFUN CONVERT-TO-PNG-BASE64 (BITMAP STREAM)
   "Write a bitmap as a BASE64-encoded PNG stream"

   (* ;; "We encode the PNG as BASE64 using a GENERATOR to produce and ENCODE-BASE64-GEN to consume")

   (LET ((THRESHOLD (/ (BITSPERPIXEL BITMAP)
                       2)))
        (S-BASE64:ENCODE-BASE64-GEN (GENERATOR (UNCOMPRESSED-PNG:WRITE-BITMAP
                                                BITMAP THRESHOLD NIL #'(CL:LAMBDA (BYTE)
                                                                              (PRODUCE BYTE))
                                                #'UNCOMPRESSED-PNG:PIXEL-TO-MONOCHROME-RGBA))
               STREAM)))

(CL:DEFUN URL-ENCODE (STRING)
   (LET ((RESULT (CL:MAKE-ARRAY 0 :FILL-POINTER 0 :ADJUSTABLE T)))
        [CL:LOOP FOR CHAR ACROSS STRING DO (COND
                                              ((OR (CL:ALPHANUMERICP CHAR)
                                                   (CL:CHAR-EQUAL CHAR #\-)
                                                   (CL:CHAR-EQUAL CHAR #\_)
                                                   (CL:CHAR-EQUAL CHAR #\.)
                                                   (CL:CHAR-EQUAL CHAR #\~))
                                               (CL:VECTOR-PUSH-EXTEND CHAR RESULT))
                                              ((CL:CHAR-EQUAL CHAR #\Space)
                                               (CL:VECTOR-PUSH-EXTEND #\+ RESULT))
                                              (T (CL:VECTOR-PUSH-EXTEND #\% RESULT)
                                                 (CL:LOOP FOR C ACROSS 
                                                             (* ; "hex")
                                                        (CL:FORMAT NIL "~2,'0x" (CL:CHAR-INT CHAR))
                                                        DO
                                                        (CL:VECTOR-PUSH-EXTEND C RESULT]
        (COERCE RESULT 'STRING)))

(CL:DEFUN HTML-ENCODE (STRING)
   (LET ((RESULT (CL:MAKE-ARRAY 0 :FILL-POINTER 0 :ADJUSTABLE T)))
        [CL:LOOP FOR CHAR ACROSS STRING DO (COND
                                              ((OR (CL:CHAR-EQUAL CHAR #\>)
                                                   (CL:CHAR-EQUAL CHAR #\<)
                                                   (CL:CHAR-EQUAL CHAR #\&))
                                               (CL:VECTOR-PUSH-EXTEND #\& RESULT)
                                               (CL:VECTOR-PUSH-EXTEND #\# RESULT)
                                               (CL:LOOP FOR C ACROSS 
                                                             (* ; "hex")
                                                      (CL:FORMAT NIL "~4,'0x" (CL:CHAR-INT CHAR))
                                                      DO
                                                      (CL:VECTOR-PUSH-EXTEND C RESULT))
                                               (CL:VECTOR-PUSH-EXTEND #\; RESULT))
                                              (T (CL:VECTOR-PUSH-EXTEND CHAR RESULT]
        (COERCE RESULT 'STRING)))

(CL:DEFUN \HTML.FONTCREATE (FAMILY SIZE FACE ROTATION DEVICE CHARSET)
   "Create a font for the HTML device"

   (* ;; "FAMILY must be a litatom")

   (* ;; "SIZE is a positive integer number of printer's points")

   (* ;; "FACE = (WEIGHT SLOPE EXPANSION)")

   (* ;; "    WEIGHT = one of BOLD, MEDIUM, LIGHT")

   (* ;; "    SLOPE = one of ITALIC or REGULAR")

   (* ;; "    EXPANSION = one of REGULAR, COMPRESSED, EXPANDED")

   (* ;; "CHARSET is a positive integer or NIL")

   (DECLARE (GLOBALVARS \DEFAULTCHARSET))
   (CL:FORMAT T "\HTML.FONTCREATE ~a ~a ~a ~a ~a ~a~%%" FAMILY SIZE FACE ROTATION DEVICE CHARSET)
   (if (NEQ ROTATION 0)
       then (ERROR "We only support ROTATION = 0"))
   (LET* [(COERCED-FAMILY (OR (CDR (FASSOC FAMILY *WEB-FONT-MAPPINGS*))
                              FAMILY))
          (FONT-DESCR (\HTML.READ-FONT-METRICS COERCED-FAMILY FACE SIZE))
          (PRIVATE-FONT-INFO (MAKE-HTML.FONTINFO :SLUG-WIDTH (fetch (WEB-FONT-DESCR :SLUG-WIDTH)
                                                                of FONT-DESCR)
                                    :CHARSETS
                                    (MAKE-CHARSET-BIT-ARRAY (fetch (WEB-FONT-DESCR :CHARSETS)
                                                               of FONT-DESCR))
                                    :CSS-CLASS
                                    (CSS-CLASS-FROM COERCED-FAMILY SIZE FACE]
         (COND
            ((NEQ FAMILY COERCED-FAMILY)
             (CL:FORMAT T "Coerced ~A to ~A~%%" FAMILY COERCED-FAMILY)))

         (* ;; "read the metrics for charset CHARSET")

         (AND FONT-DESCR
              (LET* ((CHARSET-DESCR (\HTML.READ-CHARSET-METRICS COERCED-FAMILY SIZE FACE CHARSET))
                     (CHARSET0-WIDTHS (fetch (WEB-CHARSET-METRICS :XCCS-WIDTHS) of CHARSET-DESCR))
                     (FD (create FONTDESCRIPTOR
                                FONTDEVICE _ DEVICE
                                FONTSCALE _ *CENTIPOINTS-PER-POINT*
                                FONTFAMILY _ FAMILY
                                FONTSIZE _ SIZE
                                FONTFACE _ FACE
                                \SFAscent _ (fetch (WEB-FONT-METRICS :MAX-ASCENT) of FONT-DESCR)
                                \SFDescent _ (fetch (WEB-FONT-METRICS :MAX-DESCENT) of FONT-DESCR)
                                \SFHeight _ (fetch (WEB-FONT-METRICS :HEIGHT) of FONT-DESCR)
                                ROTATION _ 0
                                FONTDEVICESPEC _ (LIST COERCED-FAMILY SIZE FACE ROTATION DEVICE)
                                \SFFACECODE _ (\FACECODE FACE)
                                OTHERDEVICEFONTPROPS _ PRIVATE-FONT-INFO))
                     (CSINFO (\CREATECHARSET CHARSET FD T))
                     (CS-WIDTHS (fetch (CHARSETINFO WIDTHS) of CSINFO)))
                    (replace (CHARSETINFO CHARSETASCENT) of CSINFO with (fetch (WEB-CHARSET-METRICS
                                                                                :MAX-ASCENT)
                                                                           of CHARSET-DESCR))
                    (replace (CHARSETINFO CHARSETDESCENT) of CSINFO with (fetch (WEB-CHARSET-METRICS
                                                                                 :MAX-DESCENT)
                                                                            of CHARSET-DESCR))
                    (for WIDTH in CHARSET0-WIDTHS as CH from 0 to \MAXTHINCHAR
                       do (CL:UNLESS (NULL WIDTH)
                                 (\FSETWIDTH CS-WIDTHS CH WIDTH)))
                    FD))))

(CL:DEFUN \HTML.FONTSAVAILABLE (FAMILY SIZE FACE ROTATION DEVICE)
   "Search for matching fonts for the HTML device"

   (* ;; "any of the fields can be '*.  Ignore ROTATION. FACE = (WEIGHT SLOPE EXPANSION)")

   (* ;; "return a list of fontspecs")

   [LET* ((FACE-AS-LIST (\FONTFACE FACE))
          (WEIGHT (fetch (FONTFACE WEIGHT) of FACE-AS-LIST))
          (SLOPE (fetch (FONTFACE SLOPE) of FACE-AS-LIST))
          (EXPANSION (fetch (FONTFACE EXPANSION) of FACE-AS-LIST))
          (FILE-NAME (MAKE-FONT-METRICS-FILE-NAME FAMILY SIZE WEIGHT SLOPE EXPANSION))
          (PATTERN (PACKFILENAME.STRING 'BODY *WEB-FONT-DIRECTORY* 'NAME FILE-NAME))
          (MATCHING-FILES (DIRECTORY PATTERN)))
         (FOR MATCH IN MATCHING-FILES 

                       (* ;; 
                       "the name will look like <font name>-<size>-<weight>-<slope>-<expansion>")

                       (* ;; 
                       "<font name> may contain hyphens, so parse from the end to the beginning")

                        COLLECT (LET* ((MATCHING-NAME (UNPACKFILENAME.STRING MATCH 'NAME))
                                       (EXPANSION-POS (STRPOS "-" MATCHING-NAME NIL NIL NIL NIL NIL T
                                                             ))
                                       (SLOPE-POS (STRPOS "-" MATCHING-NAME (CL:1- EXPANSION-POS)
                                                         NIL NIL NIL NIL T))
                                       (WEIGHT-POS (STRPOS "-" MATCHING-NAME (CL:1- SLOPE-POS)
                                                          NIL NIL NIL NIL T))
                                       (SIZE-POS (STRPOS "-" MATCHING-NAME (CL:1- WEIGHT-POS)
                                                        NIL NIL NIL NIL T)))
                                      (LIST (MKATOM (SUBSTRING MATCHING-NAME 1 (CL:1- SIZE-POS)))
                                            (MKATOM (SUBSTRING MATCHING-NAME (CL:1+ SIZE-POS)
                                                           (CL:1- WEIGHT-POS)))
                                            [LIST (MKATOM (SUBSTRING MATCHING-NAME (CL:1+ WEIGHT-POS)
                                                                 (CL:1- SLOPE-POS)))
                                                  (MKATOM (SUBSTRING MATCHING-NAME (CL:1+ SLOPE-POS)
                                                                 (CL:1- EXPANSION-POS)))
                                                  (MKATOM (SUBSTRING MATCHING-NAME (CL:1+ 
                                                                                        EXPANSION-POS
                                                                                          ]
                                            0 HTML.FONTCREATE.DEVICENAME])

(CL:DEFUN \HTML.CREATECHARSET (FAMILY SIZE FACE ROTATION DEVICE CHARSET FONTDESC NOSLUG?)
   (LET ((PRIVATE-FONT-INFO (fetch (FONTDESCRIPTOR OTHERDEVICEFONTPROPS) of FONTDESC)))
        (CL:IF (KNOWN-CHARSET? PRIVATE-FONT-INFO CHARSET)
            (LET* ((CHARSET-DESCR (\HTML.READ-CHARSET-METRICS FAMILY SIZE FACE CHARSET))
                   (CHARSET-WIDTHS (fetch (WEB-CHARSET-METRICS :XCCS-WIDTHS) of CHARSET-DESCR))
                   (CSINFO (create CHARSETINFO
                                  OFFSETS _ NIL))
                   (CS-WIDTHS (fetch (CHARSETINFO WIDTHS) of CSINFO)))
                  (replace (CHARSETINFO CHARSETASCENT) of CSINFO with (fetch (WEB-CHARSET-METRICS
                                                                              :MAX-ASCENT)
                                                                         of CHARSET-DESCR))
                  (replace (CHARSETINFO CHARSETDESCENT) of CSINFO with (fetch (WEB-CHARSET-METRICS
                                                                               :MAX-DESCENT)
                                                                          of CHARSET-DESCR))
                  (for WIDTH in CHARSET-WIDTHS as CH from 0 to \MAXTHINCHAR
                     do (CL:WHEN WIDTH (\FSETWIDTH CS-WIDTHS CH WIDTH)))
                  (replace (CHARSETINFO IMAGEWIDTHS) of CSINFO with CS-WIDTHS)
                  CSINFO)
            (PROGN (\HTML.WARN-CHARSET FONTDESC CHARSET T)
                   NIL))))

(CL:DEFUN \HTML.CHANGECHARSET (DATA CHARSET)
   "Set the new character set, creating the charset info if necessary"

   (* ;; "But don't change the charset if CHARSET is not a member of the font's charsets list")

   (printout T "\HTML.CHANGECHARSET " CHARSET T)
   (LET* ((FONT (\HTML-FONT DATA)))
         (CL:IF (KNOWN-CHARSET? (fetch (FONTDESCRIPTOR OTHERDEVICEFONTPROPS) of FONT)
                       CHARSET)
             (LET ((CSINFO (\HTML.CREATECHARSET (FONTPROP FONT 'FAMILY)
                                  (FONTPROP FONT 'SIZE)
                                  (FONTPROP FONT 'FACE)
                                  0 HTML.FONTCREATE.DEVICENAME CHARSET FONT T)))
                  (\INSTALLCHARSETINFO FONT CSINFO CHARSET))
             (printout T "Font does not contain charset " CHARSET T))))

(CL:DEFUN MAKE-CHARSET-BIT-ARRAY (CHARSETS-LIST)
   "Read a list of charset numbers and return an equivalent set in the form of a bit-vector"
   (LET ((BIT-SET (BITMAPCREATE (IPLUS 1 \MAXCHARSET)
                         1 1)))
        (CL:DOLIST (CHARSET CHARSETS-LIST)
            (BITMAPBIT BIT-SET CHARSET 0 1))
        BIT-SET))

(CL:DEFUN KNOWN-CHARSET? (HTMLFONT CHARSET)
   "Return T if the HTMLFONT says it has metrics for CHARSET"
   [LET ((KNOWN-CHARSETS (\HTMLFONT-CHARSETS HTMLFONT)))
        (NOT (ZEROP (BITMAPBIT KNOWN-CHARSETS CHARSET 0])

(CL:DEFUN \HTML.WARN-CHARSET (FONT CHARSET WARN-STREAM)
   "Warn the user once that the font doesn't support the charset"
   [LET ((PRIVATE-FONT-INFO (fetch (FONTDESCRIPTOR OTHERDEVICEFONTPROPS) of FONT)))
        (CL:UNLESS (FMEMB CHARSET (\HTMLFONT-WARNED-CHARSETS PRIVATE-FONT-INFO))
            (printout WARN-STREAM "Font " .PPVTL (FONTPROP FONT 'SPEC)
                   " does not support charset #o" .I3.8.T CHARSET " (" CHARSET ")" T)
            (CL:PUSH CHARSET (\HTMLFONT-WARNED-CHARSETS PRIVATE-FONT-INFO)))])

(\HTMLSTREAM.INIT)



(* ;; "PRINTFILETYPES-related")


(CL:DEFCONSTANT *HTML-FILE-EXTENSIONS* '("html" "htm")
                                       
                             "The file extensions that denote an HTML file. Case is not significant.")

(CL:DEFCONSTANT *HTML-FINGERPRINTS* '("<!DOCTYPE HTML" "<html")
                                    "If a file begins with any of these strings, it's an HTML file.")

(CL:DEFUN HTMLFILEP (FILE)
   "Is the FILE an HTML file?"

   (* ;; "Check the extension; failing that, look at the start of the file")

   [LET [(EXTENSION (L-CASE (UNPACKFILENAME.STRING FILE 'EXTENSION]
        (if (MEMBER EXTENSION *HTML-FILE-EXTENSIONS*)
            then T
          else (CL:WITH-OPEN-STREAM
                (STREAM (OPENSTREAM FILE 'INPUT NIL))

                (* ;; "check if the file starts with any of the members of *HTML-FINGERPRINTS*")

                (LET ((FIRST-CHAR-OR-NIL (SKIPSEPRS STREAM)))
                     (if (NULL FIRST-CHAR-OR-NIL)
                         then NIL
                       else (LET [(FIRST-LINE (L-CASE (CL:READ-LINE STREAM]

                                 (* ;; 
                                 "see if it starts with any of the elements of *HTML-FINGERPRINTS*")

                                 (AND (for FINGERPRINT in *HTML-FINGERPRINTS*
                                         thereis (EQUAL 1 (STRPOS (L-CASE FINGERPRINT)
                                                                 FIRST-LINE NIL NIL T)))
                                      T])

(CL:DEFUN MAKE-HTML-FROM-TEXT (FILE HTMLFILE FONTS HEADING TABS)
   (TEXTTOIMAGEFILE FILE HTMLFILE HTML.IMAGETYPE FONTS HEADING TABS NIL))

(CL:DEFUN MAKE-HTML-FROM-TEDIT (FILE HTMLFILE)

   (* ;; "Make an HTML file from a TEdit document.  If FILE is a string, make it into a symbol for the file-name.  If it's a STREAM, use that stream.")

   [COND
      ((STRINGP FILE)
       (SETQ FILE (MKATOM FILE]
   (SETQ FILE (OPENTEXTSTREAM FILE))
   (TEDIT.FORMAT.HARDCOPY FILE HTMLFILE T NIL NIL NIL HTML.IMAGETYPE)
   (CLOSEF? FILE)
   HTMLFILE)

(ADDTOVAR PRINTFILETYPES (HTML (TEST HTMLFILEP)
                               (EXTENSION (HTML))
                               (CONVERSION (TEXT MAKE-HTML-FROM-TEXT TEDIT MAKE-HTML-FROM-TEDIT))))



(* ;; "debugging support")


(CL:DEFUN \CLEAN-FONT-CACHE ()
   "Remove all HTML fonts from \FONTSINCORE"
   (DECLARE (GLOBALVARS \FONTSINCORE))
   (LET ((MATCHES (\LOOKUPFONTSINCORE '* '* '* '* HTML.FONTCREATE.DEVICENAME)))
        (for FONT-SPEC in MATCHES do (SETFONTDESCRIPTOR (CAR FONT-SPEC)
                                            (CADR FONT-SPEC)
                                            (CADDR FONT-SPEC)
                                            (CADDDR FONT-SPEC)
                                            HTML.FONTCREATE.DEVICENAME NIL))))

(DEFMACRO DO-NOT (&BODY BODY)
   "Ignore the body, return NIL"
   NIL)
(DECLARE%: DONTCOPY
  (FILEMAP (NIL (4346 4535 (CLOSE-KNOTS 4346 . 4535)) (4537 4693 (HTML.INCHES-TO-POINTS 4537 . 4693)) (
4695 4797 (HTML.INCHES-TO-CENTIPOINTS 4695 . 4797)) (4799 4888 (CP-TO-P 4799 . 4888)) (4890 5056 (
ICP-TO-P 4890 . 5056)) (5058 5134 (P-TO-CP 5058 . 5134)) (5136 5295 (PIXEL-TO-PT 5136 . 5295)) (5297 
5457 (PT-TO-PIXEL 5297 . 5457)) (5459 5607 (\HTML.SVG-Y 5459 . 5607)) (5609 5952 (
MAKE-FONT-METRICS-FILE-NAME 5609 . 5952)) (5954 6354 (MAKE-CHARSET-METRICS-FILE-NAME 5954 . 6354)) (
12812 13202 (CHECK-BROWSER-METRICS-FORMAT 12812 . 13202)) (13204 14740 (CSS-CLASS-FROM 13204 . 14740))
 (14742 14880 (CSS-CLASS-FROM-FAMILY 14742 . 14880)) (14882 16475 (\HTML.READ-FONT-METRICS 14882 . 
16475)) (16477 17758 (\HTML.READ-CHARSET-METRICS 16477 . 17758)) (17760 17856 (\SF 17760 . 17856)) (
17858 18780 (\HTML.SVG-STROKE-DASHARRAY 17858 . 18780)) (18782 19133 (\HTML.SVG-BRUSH-WIDTH 18782 . 
19133)) (19135 20159 (\HTML.SVG-BRUSH-CLASS 19135 . 20159)) (20161 20483 (\HTML.SVG-COLOR 20161 . 
20483)) (21401 21633 (with-htmldata 21401 . 21633)) (21635 22294 (HTML.OUTPUT-GRAPHICS 21635 . 22294))
 (22296 23500 (HTML.OUTPUT-TEXT 22296 . 23500)) (23502 24685 (\HTML.MAYBE-START-PAGE 23502 . 24685)) (
24687 25094 (\HTML.END-PAGE 24687 . 25094)) (25096 31050 (HTML.WRITE-PREFACE 25096 . 31050)) (31052 
32014 (CONVERT-FAMILY-TO-QUERY-PARAM 31052 . 32014)) (32016 32677 (\HTML.MAKE-STYLESHEET-URL 32016 . 
32677)) (32679 38391 (OPENHTMLSTREAM 32679 . 38391)) (38393 38916 (HTML.BACKCOLOR 38393 . 38916)) (
38918 39466 (HTML.BITBLT 38918 . 39466)) (39468 41436 (HTML.BLTSHADE 39468 . 41436)) (41438 41772 (
HTML.BOTTOMMARGIN 41438 . 41772)) (41774 42562 (HTML.CHARWIDTH 41774 . 42562)) (42564 42879 (
HTML.CLIPPINGREGION 42564 . 42879)) (42881 43353 (HTML.CLOSEFN 42881 . 43353)) (43355 43852 (
HTML.COLOR 43355 . 43852)) (43854 44610 (HTML.DRAWCIRCLE 43854 . 44610)) (44612 47633 (HTML.DRAWCURVE 
44612 . 47633)) (47635 48542 (HTML.DRAWELLIPSE 47635 . 48542)) (48544 49321 (HTML.DRAWLINE 48544 . 
49321)) (49323 50275 (HTML.DRAWPOLYGON 49323 . 50275)) (50277 50882 (HTML.FILLCIRCLE 50277 . 50882)) (
50884 51730 (HTML.FILLPOLYGON 50884 . 51730)) (51732 52615 (HTML.FONT 51732 . 52615)) (52617 52940 (
HTML.LEFTMARGIN 52617 . 52940)) (52942 53233 (HTML.LINEFEED 52942 . 53233)) (53235 53492 (HTML.MOVETO 
53235 . 53492)) (53494 53610 (HTML.NEWPAGE 53494 . 53610)) (53612 53934 (HTML.OPERATION 53612 . 53934)
) (53936 57826 (HTML.OUTCHARFN 53936 . 57826)) (57828 58153 (HTML.RESET 57828 . 58153)) (58155 58485 (
HTML.RIGHTMARGIN 58155 . 58485)) (58487 58861 (HTML.SCALE 58487 . 58861)) (58863 59961 (
HTML.SCALEDBITBLT 58863 . 59961)) (59963 60269 (HTML.SPACEFACTOR 59963 . 60269)) (60271 60912 (
HTML.TERPRI 60271 . 60912)) (60914 61230 (HTML.TOPMARGIN 60914 . 61230)) (61232 61548 (HTML.XPOSITION 
61232 . 61548)) (61550 61866 (HTML.YPOSITION 61550 . 61866)) (61868 62113 (MAKE-HTML-IMAGETYPE 61868
 . 62113)) (62115 62941 (\HTML.INIT-IMAGEDATA 62115 . 62941)) (62943 63547 (\HTMLSTREAM.INIT 62943 . 
63547)) (63549 63949 (WRITE-BASE64-PNG 63549 . 63949)) (63951 64614 (CONVERT-TO-PNG-BASE64 63951 . 
64614)) (64616 65903 (URL-ENCODE 64616 . 65903)) (65905 67040 (HTML-ENCODE 65905 . 67040)) (67042 
70857 (\HTML.FONTCREATE 67042 . 70857)) (70859 73708 (\HTML.FONTSAVAILABLE 70859 . 73708)) (73710 
75324 (\HTML.CREATECHARSET 73710 . 75324)) (75326 76164 (\HTML.CHANGECHARSET 75326 . 76164)) (76166 
76503 (MAKE-CHARSET-BIT-ARRAY 76166 . 76503)) (76505 76729 (KNOWN-CHARSET? 76505 . 76729)) (76731 
77265 (\HTML.WARN-CHARSET 76731 . 77265)) (77705 78888 (HTMLFILEP 77705 . 78888)) (78890 79032 (
MAKE-HTML-FROM-TEXT 78890 . 79032)) (79034 79443 (MAKE-HTML-FROM-TEDIT 79034 . 79443)) (79683 80234 (
\CLEAN-FONT-CACHE 79683 . 80234)) (80236 80310 (DO-NOT 80236 . 80310)))))
STOP
